{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to Codegen Lab","text":"<p>This is the documentation for the Codegen Lab project.</p>"},{"location":"#overview","title":"Overview","text":"<p>Codegen Lab is a project focused on code generation and AI-assisted development tools. This documentation will guide you through the installation, configuration, and usage of Codegen Lab.</p>"},{"location":"#features","title":"Features","text":"<ul> <li>Feature 1: Brief description</li> <li>Feature 2: Brief description</li> <li>Feature 3: Brief description</li> <li>Cursor Rules: Custom workflow automations for iterative development in existing codebases</li> </ul>"},{"location":"#quick-start","title":"Quick Start","text":"<pre><code># Clone the repository\ngit clone https://github.com/bossjones/codegen-lab.git\ncd codegen-lab\n\n# Install dependencies\nuv sync --frozen\n</code></pre>"},{"location":"#documentation-structure","title":"Documentation Structure","text":"<ul> <li>Getting Started: Basic introduction and setup</li> <li>User Guide: Detailed usage instructions</li> <li>Development Tools: Tools and workflows for effective development</li> <li>Cursor Rules: Workflow automations for iterative development</li> <li>API Reference: Technical reference for APIs</li> <li>Contributing: Guidelines for contributors</li> </ul>"},{"location":"api-reference/","title":"API Reference","text":"<p>This page provides detailed documentation for the Codegen Lab API.</p>"},{"location":"api-reference/#core-api","title":"Core API","text":""},{"location":"api-reference/#codegen_labgenerate","title":"<code>codegen_lab.generate</code>","text":"<p>Main function for generating code based on a prompt.</p> <pre><code>from codegen_lab import generate\n\ncode = generate(\n    prompt=\"Create a Python function to calculate the Fibonacci sequence\",\n    model=\"gpt-4\",\n    temperature=0.7,\n    max_tokens=1024\n)\n\nprint(code)\n</code></pre>"},{"location":"api-reference/#parameters","title":"Parameters","text":"Parameter Type Description Default <code>prompt</code> <code>str</code> The prompt to generate code from Required <code>model</code> <code>str</code> Model to use \"gpt-3.5-turbo\" <code>temperature</code> <code>float</code> Temperature parameter (0.0-1.0) 0.7 <code>max_tokens</code> <code>int</code> Maximum tokens to generate 1024 <code>top_p</code> <code>float</code> Top-p sampling parameter 0.9 <code>stop</code> <code>list[str]</code> Sequences where generation should stop None"},{"location":"api-reference/#returns","title":"Returns","text":"<p><code>str</code>: The generated code.</p>"},{"location":"api-reference/#exceptions","title":"Exceptions","text":"<ul> <li><code>ValueError</code>: If prompt is empty or parameters are invalid</li> <li><code>ConnectionError</code>: If there's an issue connecting to the model API</li> <li><code>AuthenticationError</code>: If API credentials are invalid</li> </ul>"},{"location":"api-reference/#codegen_labenhance","title":"<code>codegen_lab.enhance</code>","text":"<p>Enhance existing code with improvements, documentation, or tests.</p> <pre><code>from codegen_lab import enhance\n\noriginal_code = \"\"\"\ndef fibonacci(n):\n    if n &lt;= 0:\n        return []\n    if n == 1:\n        return [0]\n    sequence = [0, 1]\n    for i in range(2, n):\n        sequence.append(sequence[i-1] + sequence[i-2])\n    return sequence\n\"\"\"\n\nenhanced_code = enhance(\n    code=original_code,\n    enhancement_type=\"documentation\",\n    language=\"python\"\n)\n\nprint(enhanced_code)\n</code></pre>"},{"location":"api-reference/#parameters_1","title":"Parameters","text":"Parameter Type Description Default <code>code</code> <code>str</code> The code to enhance Required <code>enhancement_type</code> <code>str</code> Type of enhancement (\"documentation\", \"performance\", \"tests\", \"all\") \"all\" <code>language</code> <code>str</code> Programming language of the code \"python\" <code>model</code> <code>str</code> Model to use \"gpt-3.5-turbo\" <code>temperature</code> <code>float</code> Temperature parameter (0.0-1.0) 0.7"},{"location":"api-reference/#returns_1","title":"Returns","text":"<p><code>str</code>: The enhanced code.</p>"},{"location":"api-reference/#utility-functions","title":"Utility Functions","text":""},{"location":"api-reference/#codegen_labutilsvalidate_code","title":"<code>codegen_lab.utils.validate_code</code>","text":"<p>Validate generated code for syntax errors and other issues.</p> <pre><code>from codegen_lab.utils import validate_code\n\ncode = \"\"\"\ndef hello_world():\n    print(\"Hello, world!\")\n\"\"\"\n\nis_valid, issues = validate_code(code, language=\"python\")\n\nif is_valid:\n    print(\"Code is valid!\")\nelse:\n    print(\"Issues found:\", issues)\n</code></pre>"},{"location":"api-reference/#parameters_2","title":"Parameters","text":"Parameter Type Description Default <code>code</code> <code>str</code> The code to validate Required <code>language</code> <code>str</code> Programming language of the code \"python\" <code>strict</code> <code>bool</code> Enable strict validation False"},{"location":"api-reference/#returns_2","title":"Returns","text":"<ul> <li><code>bool</code>: Whether the code is valid</li> <li><code>list[str]</code>: List of issues found, empty if code is valid</li> </ul>"},{"location":"changelog/","title":"Changelog","text":"<p>All notable changes to this project will be documented in this file.</p> <p>The format is based on Keep a Changelog, and this project adheres to Semantic Versioning.</p>"},{"location":"changelog/#unreleased","title":"Unreleased","text":""},{"location":"changelog/#020-2025-03-02","title":"0.2.0 - 2025-03-02","text":""},{"location":"changelog/#added","title":"Added","text":"<ul> <li>Cheatsheets: Add Taskfile cheatsheet and repomix cheatsheet</li> <li>Cursor: Add cheatsheet creation best practices documentation - Comprehensive guidelines for creating well-structured command cheatsheets</li> <li>Cursor: Add MCP server configuration for memory file path - Configure the Cursor MCP server with a memory file path</li> <li>Cursor: Add MCP server development guidelines and best practices - Comprehensive documentation for developing Model Context Protocol (MCP) servers in Python</li> <li>Makefile: Update Taskfile copy destination path - Modify the <code>copy-global-taskfile</code> target to use <code>~/Taskfile.yml</code> instead of <code>~/.taskfile.yml</code></li> <li>Taskfile: Add empty line in Taskfile.yml - Minor whitespace adjustment to improve readability</li> <li>VSCode: Add VSCode settings and Taskfile schema integration</li> </ul>"},{"location":"changelog/#changed","title":"Changed","text":"<ul> <li>Cursor: Add output.txt context extraction guidelines - Enhanced documentation for working with output.txt files</li> <li>Fastmcp: Add comprehensive FastMCP server development examples - Expanded documentation with detailed usage examples</li> <li>Fastmcp: Enhance server development guidelines with examples - Detailed server type selection and implementation guidelines</li> <li>Fastmcp: Expand documentation with advanced MCP server examples - Comprehensive usage examples and demonstrations</li> <li>Taskfile: Update Taskfile schema and improve organization</li> </ul>"},{"location":"changelog/#010-2025-02-15","title":"0.1.0 - 2025-02-15","text":""},{"location":"changelog/#added_1","title":"Added","text":"<ul> <li>Initial release</li> <li>Core code generation functionality</li> <li>Basic API functionality</li> <li>Command-line interface</li> <li>Basic documentation</li> <li>Documentation structure</li> <li>Initial project setup</li> </ul>"},{"location":"changelog/#fixed","title":"Fixed","text":"<ul> <li>N/A</li> </ul>"},{"location":"changelog/#changed_1","title":"Changed","text":"<ul> <li>N/A</li> </ul>"},{"location":"changelog/#removed","title":"Removed","text":"<ul> <li>N/A</li> </ul>"},{"location":"changelog/#how-to-update-the-changelog","title":"How to Update the Changelog","text":"<ol> <li>Always add new entries at the top under the <code>[Unreleased]</code> section</li> <li>Group changes by type: Added, Changed, Deprecated, Removed, Fixed, Security</li> <li>When releasing a new version, rename the <code>[Unreleased]</code> section to the new version number and date</li> <li>Create a new <code>[Unreleased]</code> section at the top</li> <li>Use link references at the bottom of the file for version comparisons</li> </ol>"},{"location":"contributing/","title":"Contributing to Codegen Lab","text":"<p>Thank you for your interest in contributing to Codegen Lab! This document provides guidelines and instructions for contributors.</p>"},{"location":"contributing/#code-of-conduct","title":"Code of Conduct","text":"<p>Please read and follow our Code of Conduct before contributing.</p>"},{"location":"contributing/#how-to-contribute","title":"How to Contribute","text":"<p>There are many ways to contribute to Codegen Lab:</p> <ol> <li>Reporting Bugs: Report bugs by opening an issue on the GitHub repository.</li> <li>Suggesting Enhancements: Suggest new features or improvements by opening an issue.</li> <li>Pull Requests: Submit pull requests with bug fixes, improvements, or new features.</li> <li>Documentation: Help improve documentation or fix typos.</li> <li>Answering Questions: Help answer questions in issues or discussions.</li> </ol>"},{"location":"contributing/#development-setup","title":"Development Setup","text":"<ol> <li>Fork the repository on GitHub.</li> <li>Clone your fork to your local machine:</li> </ol> <pre><code>git clone https://github.com/YOUR_USERNAME/codegen-lab.git\ncd codegen-lab\n</code></pre> <ol> <li>Create a new branch for your changes:</li> </ol> <pre><code>git checkout -b feature/your-feature-name\n</code></pre> <ol> <li>Set up the development environment:</li> </ol> <pre><code>uv venv --python 3.12.0\nsource .venv/bin/activate  # On Windows: .venv\\Scripts\\activate\nuv sync --frozen --dev\n</code></pre> <ol> <li>Make your changes and commit them with a clear, descriptive commit message.</li> </ol>"},{"location":"contributing/#pull-request-process","title":"Pull Request Process","text":"<ol> <li>Ensure your code follows the project's style guidelines.</li> <li>Update documentation if necessary.</li> <li>Add tests for your changes.</li> <li>Make sure all tests pass:</li> </ol> <pre><code>uv run pytest tests/\n</code></pre> <ol> <li>Push your changes to your fork:</li> </ol> <pre><code>git push origin feature/your-feature-name\n</code></pre> <ol> <li>Submit a pull request to the main repository.</li> <li>The maintainers will review your pull request and provide feedback.</li> </ol>"},{"location":"contributing/#code-style","title":"Code Style","text":"<ul> <li>Follow PEP 8 for Python code.</li> <li>Add type hints to functions and methods.</li> <li>Write clear, descriptive docstrings following PEP 257.</li> <li>Use meaningful variable and function names.</li> </ul>"},{"location":"contributing/#testing","title":"Testing","text":"<ul> <li>Write tests for all new features and bug fixes.</li> <li>Use pytest for testing.</li> <li>Aim for high test coverage.</li> </ul>"},{"location":"contributing/#documentation","title":"Documentation","text":"<ul> <li>Update documentation for any changes to the API or behavior.</li> <li>Use clear, concise language.</li> <li>Provide examples for API usage.</li> </ul>"},{"location":"contributing/#license","title":"License","text":"<p>By contributing to Codegen Lab, you agree that your contributions will be licensed under the project's license.</p>"},{"location":"getting-started/","title":"Getting Started","text":"<p>This guide will help you get started with Codegen Lab.</p>"},{"location":"getting-started/#prerequisites","title":"Prerequisites","text":"<p>Before you begin, ensure you have the following installed:</p> <ul> <li>Python 3.10 or higher</li> <li>UV package manager</li> <li>Git</li> </ul>"},{"location":"getting-started/#installation","title":"Installation","text":"<ol> <li>Clone the repository:</li> </ol> <pre><code>git clone https://github.com/bossjones/codegen-lab.git\ncd codegen-lab\n</code></pre> <ol> <li>Set up a virtual environment:</li> </ol> <pre><code>uv venv --python 3.12.0\n</code></pre> <ol> <li>Activate the virtual environment:</li> </ol> <pre><code># On Unix or MacOS\nsource .venv/bin/activate\n\n# On Windows\n.venv\\Scripts\\activate\n</code></pre> <ol> <li>Install dependencies:</li> </ol> <pre><code>uv sync --frozen\n</code></pre>"},{"location":"getting-started/#verification","title":"Verification","text":"<p>Verify the installation by running:</p> <pre><code>python -m codegen_lab --version\n</code></pre>"},{"location":"getting-started/#next-steps","title":"Next Steps","text":"<p>Now that you have Codegen Lab installed, you can:</p> <ol> <li>Explore the User Guide for detailed usage instructions</li> <li>Check the API Reference for technical details</li> <li>Start using Codegen Lab in your projects</li> </ol>"},{"location":"troubleshooting/","title":"Troubleshooting","text":"<p>This page provides solutions to common issues you might encounter when using Codegen Lab.</p>"},{"location":"troubleshooting/#installation-issues","title":"Installation Issues","text":""},{"location":"troubleshooting/#python-version-compatibility","title":"Python Version Compatibility","text":"<p>Issue: Error indicating an incompatible Python version.</p> <p>Solution: Codegen Lab requires Python 3.10 or higher. Upgrade your Python installation or use a tool like pyenv to manage multiple Python versions.</p> <pre><code># Install pyenv (macOS)\nbrew install pyenv\n\n# Install Python 3.12 with pyenv\npyenv install 3.12.0\n\n# Set Python 3.12 as the local version for this project\npyenv local 3.12.0\n</code></pre>"},{"location":"troubleshooting/#dependency-conflicts","title":"Dependency Conflicts","text":"<p>Issue: Dependency resolution failures or conflicts during installation.</p> <p>Solution: Try reinstalling with the <code>--reinstall</code> flag or in a fresh virtual environment.</p> <pre><code># Using UV (recommended)\nuv sync --frozen --reinstall\n\n# Alternative: Create a fresh environment\nrm -rf .venv\nuv venv --python 3.12.0\nsource .venv/bin/activate\nuv sync --frozen\n</code></pre>"},{"location":"troubleshooting/#runtime-issues","title":"Runtime Issues","text":""},{"location":"troubleshooting/#import-errors","title":"Import Errors","text":"<p>Issue: <code>ModuleNotFoundError</code> or similar import errors when running Codegen Lab.</p> <p>Solution: Ensure you've activated the virtual environment and installed all dependencies.</p> <pre><code># Activate virtual environment\nsource .venv/bin/activate  # On Windows: .venv\\Scripts\\activate\n\n# Verify installation\nuv pip list\n</code></pre>"},{"location":"troubleshooting/#performance-issues","title":"Performance Issues","text":"<p>Issue: Code generation is slow or unstable.</p> <p>Solution:</p> <ol> <li>Check your internet connection if using cloud-based models</li> <li>Verify system resources (RAM, CPU) are sufficient</li> <li>Try reducing model complexity or batch size</li> <li>Update to the latest version of Codegen Lab</li> </ol> <pre><code># Update to latest version\nuv add --upgrade codegen-lab\n</code></pre>"},{"location":"troubleshooting/#model-specific-issues","title":"Model-Specific Issues","text":""},{"location":"troubleshooting/#api-rate-limits","title":"API Rate Limits","text":"<p>Issue: Encountering rate limits when using external API-based models.</p> <p>Solution: Implement exponential backoff retry logic or upgrade your API subscription tier.</p>"},{"location":"troubleshooting/#model-output-quality","title":"Model Output Quality","text":"<p>Issue: Poor quality code generation results.</p> <p>Solution:</p> <ol> <li>Improve your prompts with more context and examples</li> <li>Try a different model or adjust temperature settings</li> <li>Fine-tune the model on your specific use case (if applicable)</li> </ol>"},{"location":"troubleshooting/#environment-and-configuration-issues","title":"Environment and Configuration Issues","text":""},{"location":"troubleshooting/#configuration-file-not-found","title":"Configuration File Not Found","text":"<p>Issue: Codegen Lab can't find your configuration file.</p> <p>Solution: Ensure your configuration file is in the correct location or explicitly specify the path.</p> <pre><code>python -m codegen_lab --config path/to/config.yaml\n</code></pre>"},{"location":"troubleshooting/#environment-variables-not-applied","title":"Environment Variables Not Applied","text":"<p>Issue: Environment variable configurations aren't being applied.</p> <p>Solution: Verify environment variables are correctly set and take precedence over config files.</p> <pre><code># Set environment variables\nexport CODEGEN_MODEL_NAME=\"gpt-4\"\nexport CODEGEN_DEBUG=true\n\n# Verify environment variables\necho $CODEGEN_MODEL_NAME\n</code></pre>"},{"location":"troubleshooting/#getting-further-help","title":"Getting Further Help","text":"<p>If you encounter issues not covered in this guide:</p> <ol> <li>Check the GitHub Issues for similar problems and solutions</li> <li>Open a new issue with detailed information about your problem</li> <li>Join the community discussion in Discussions</li> </ol>"},{"location":"tools/cursor-rules/","title":"Cursor Rules for Iterative Development","text":""},{"location":"tools/cursor-rules/#overview","title":"Overview","text":"<p>This document describes the collection of Cursor rules implemented for Harper Reed's iterative development workflow. These rules help automate and guide developers through the process of working with existing codebases in a structured, incremental manner.</p>"},{"location":"tools/cursor-rules/#what-are-cursor-rules","title":"What are Cursor Rules?","text":"<p>Cursor rules are custom instructions for Cursor's AI assistant that help automate repetitive tasks, enforce best practices, and guide you through complex workflows. They're defined in <code>.mdc.md</code> files and are triggered based on specific patterns in your messages or the files you're working with.</p>"},{"location":"tools/cursor-rules/#rule-collection-for-iterative-development","title":"Rule Collection for Iterative Development","text":"<p>This collection implements Harper Reed's non-greenfield iteration workflow as described in their blog post. The workflow is specifically designed for working with existing codebases rather than greenfield (new) projects.</p>"},{"location":"tools/cursor-rules/#workflow-philosophy","title":"Workflow Philosophy","text":"<p>Harper's non-greenfield iteration workflow involves:</p> <ol> <li>Getting context from the existing codebase</li> <li>Planning per task rather than for the entire project</li> <li>Implementing incrementally with constant testing and feedback</li> <li>Debugging and fixing issues as they arise</li> </ol>"},{"location":"tools/cursor-rules/#rules-in-this-collection","title":"Rules in this Collection","text":"<p>This collection contains the following cursor rules:</p> <ol> <li>Incremental Task Planner - Breaks down a development task into smaller, manageable steps for incremental implementation</li> <li>Code Context Gatherer - Efficiently gathers code context from the codebase for LLM consumption</li> <li>Test Generator - Identifies missing tests and generates appropriate test cases for the codebase</li> <li>Iterative Debug and Fix - Provides guidance for debugging and fixing issues that arise during iterative development</li> <li>Iterative Development Workflow - Master rule that provides a structured workflow for incremental development in existing codebases</li> </ol>"},{"location":"tools/cursor-rules/#detailed-rule-descriptions","title":"Detailed Rule Descriptions","text":""},{"location":"tools/cursor-rules/#1-incremental-task-planner","title":"1. Incremental Task Planner","text":"<p>Purpose: Help break down a development task into smaller, manageable steps for incremental implementation.</p> <p>When to use: When you need to plan the implementation of a new feature or bug fix in an existing codebase.</p> <p>Activation phrases: - \"Plan this feature\" - \"Break down this task\" - \"Help me implement this incrementally\" - \"Steps for adding [feature]\"</p> <p>What it does: - Analyzes the task requirements - Identifies relevant parts of the codebase - Breaks the task into small, logical steps - Creates a todo checklist - Plans for testing - Provides implementation guidance</p>"},{"location":"tools/cursor-rules/#2-code-context-gatherer","title":"2. Code Context Gatherer","text":"<p>Purpose: Efficiently gather code context from the codebase for LLM consumption.</p> <p>When to use: When you need to understand how a specific part of the codebase works.</p> <p>Activation phrases: - \"Help me understand this code\" - \"Gather context for [feature/component]\" - \"How does [system/feature] work?\" - \"Explain the existing code\"</p> <p>What it does: - Identifies relevant components and files - Efficiently collects context from key files - Organizes the context in a logical structure - Summarizes architecture and key patterns - Highlights potential areas for modification</p>"},{"location":"tools/cursor-rules/#3-test-generator","title":"3. Test Generator","text":"<p>Purpose: Identify missing tests and generate appropriate test cases for the codebase.</p> <p>When to use: When you need to improve test coverage for an existing component.</p> <p>Activation phrases: - \"Generate tests for [component]\" - \"We need tests for [feature]\" - \"Add missing test coverage\" - \"Write tests for this code\"</p> <p>What it does: - Analyzes the code for testable components - Determines appropriate test types (unit, integration, etc.) - Follows the project's testing patterns - Generates comprehensive test cases - Includes edge cases and error conditions - Implements tests with proper typing and documentation</p>"},{"location":"tools/cursor-rules/#4-iterative-debug-and-fix","title":"4. Iterative Debug and Fix","text":"<p>Purpose: Provide guidance for debugging and fixing issues that arise during iterative development.</p> <p>When to use: When you encounter a bug or an issue in your implementation.</p> <p>Activation phrases: - \"Debug this issue\" - \"Fix this error\" - \"This isn't working correctly\" - \"Help me troubleshoot [problem]\"</p> <p>What it does: - Helps gather comprehensive error information - Guides you through reproducing and isolating the issue - Provides a systematic approach to debugging - Assists in testing hypotheses about the root cause - Helps design and implement targeted fixes - Guides verification and regression testing - Suggests preventative measures for the future</p>"},{"location":"tools/cursor-rules/#5-iterative-development-workflow","title":"5. Iterative Development Workflow","text":"<p>Purpose: Provide a structured workflow for incremental development in existing codebases.</p> <p>When to use: When you want guidance on the overall process of implementing a feature or fix.</p> <p>Activation phrases: - \"Help me develop this feature\" - \"Guide me through implementing [feature]\" - \"What's the workflow for adding [feature]\" - \"Non-greenfield development process\"</p> <p>What it does: - Guides you through the three phases of iterative development:   1. Understand and Plan   2. Implement Incrementally   3. Refine and Complete - Provides structured steps for each phase - Helps maintain focus on incremental progress - Ensures quality through testing and refactoring</p>"},{"location":"tools/cursor-rules/#how-to-use-these-rules","title":"How to Use These Rules","text":""},{"location":"tools/cursor-rules/#installation","title":"Installation","text":"<p>To use these rules in your project:</p> <ol> <li> <p>Ensure you have a <code>.cursor/rules/</code> directory in your project root:    <pre><code>mkdir -p .cursor/rules\n</code></pre></p> </li> <li> <p>Copy the rule files from the source location:    <pre><code>cp hack/drafts/cursor_rules/*.mdc.md .cursor/rules/\n</code></pre></p> </li> </ol>"},{"location":"tools/cursor-rules/#usage-flow","title":"Usage Flow","text":"<p>Here's how you might use these rules in a typical development session:</p> <ol> <li>Start with the workflow: \"Help me implement a feature using the iterative development workflow\"</li> <li>Gather context: \"Help me understand the current authentication system\"</li> <li>Plan your task: \"Break down the task of adding two-factor authentication\"</li> <li>Implement incrementally: \"Help me implement the first step of the 2FA feature\"</li> <li>Add tests: \"Generate tests for the 2FA authentication code\"</li> <li>Debug issues: \"The 2FA verification isn't working, help me debug it\"</li> </ol>"},{"location":"tools/cursor-rules/#example-conversations","title":"Example Conversations","text":""},{"location":"tools/cursor-rules/#example-1-planning-a-new-feature","title":"Example 1: Planning a New Feature","text":"<p>You: \"I need to add a new payment method to our existing e-commerce system.\"</p> <p>Cursor Assistant: [Using Incremental Task Planner rule] \"I'll help you break that down into manageable steps...\"</p>"},{"location":"tools/cursor-rules/#example-2-understanding-existing-code","title":"Example 2: Understanding Existing Code","text":"<p>You: \"I need to understand how our user authentication system works.\"</p> <p>Cursor Assistant: [Using Code Context Gatherer rule] \"Let me gather the relevant code and explain how it works...\"</p>"},{"location":"tools/cursor-rules/#example-3-adding-tests","title":"Example 3: Adding Tests","text":"<p>You: \"We need to add tests for our newly implemented payment service.\"</p> <p>Cursor Assistant: [Using Test Generator rule] \"I'll help you generate comprehensive tests for the payment service...\"</p>"},{"location":"tools/cursor-rules/#example-4-fixing-an-issue","title":"Example 4: Fixing an Issue","text":"<p>You: \"The payment processing is failing when users have special characters in their names.\"</p> <p>Cursor Assistant: [Using Iterative Debug and Fix rule] \"Let's debug this issue systematically...\"</p>"},{"location":"tools/cursor-rules/#customizing-the-rules","title":"Customizing the Rules","text":"<p>You can customize these rules by editing the <code>.mdc.md</code> files in your <code>.cursor/rules/</code> directory:</p> <ol> <li>Modify the filters to match your specific project patterns</li> <li>Adjust the instructions to align with your team's practices</li> <li>Add or modify examples to better match your codebase</li> </ol>"},{"location":"tools/cursor-rules/#credits","title":"Credits","text":"<p>These rules are based on Harper Reed's blog post \"My LLM codegen workflow atm\" which describes an effective iterative development workflow using LLMs.</p>"},{"location":"user-guide/configuration/","title":"Configuration","text":"<p>This page explains how to configure Codegen Lab for your specific needs.</p>"},{"location":"user-guide/configuration/#configuration-file","title":"Configuration File","text":"<p>Codegen Lab uses a YAML-based configuration file located at <code>config.yaml</code> in the project root directory. You can also specify a custom configuration file path when running Codegen Lab.</p>"},{"location":"user-guide/configuration/#example-configuration","title":"Example Configuration","text":"<pre><code># Basic configuration\nname: \"My Codegen Project\"\nversion: \"1.0.0\"\n\n# Environment settings\nenvironment:\n  python_version: \"3.12.0\"\n  cuda_support: true\n  debug_mode: false\n\n# Model settings\nmodel:\n  name: \"gpt-4\"\n  temperature: 0.7\n  max_tokens: 2048\n  top_p: 0.95\n\n# Paths\npaths:\n  output_dir: \"./generated\"\n  templates_dir: \"./templates\"\n  cache_dir: \"./.cache\"\n\n# Logging\nlogging:\n  level: \"INFO\"\n  file: \"./logs/codegen.log\"\n  rotation: \"daily\"\n</code></pre>"},{"location":"user-guide/configuration/#configuration-options","title":"Configuration Options","text":""},{"location":"user-guide/configuration/#basic-configuration","title":"Basic Configuration","text":"Option Description Default <code>name</code> Project name \"Codegen Project\" <code>version</code> Project version \"0.1.0\""},{"location":"user-guide/configuration/#environment-settings","title":"Environment Settings","text":"Option Description Default <code>environment.python_version</code> Python version to use \"3.10.0\" <code>environment.cuda_support</code> Enable CUDA support false <code>environment.debug_mode</code> Enable debug mode false"},{"location":"user-guide/configuration/#model-settings","title":"Model Settings","text":"Option Description Default <code>model.name</code> Model to use \"gpt-3.5-turbo\" <code>model.temperature</code> Temperature parameter 0.7 <code>model.max_tokens</code> Maximum tokens to generate 1024 <code>model.top_p</code> Top-p sampling parameter 0.9"},{"location":"user-guide/configuration/#paths","title":"Paths","text":"Option Description Default <code>paths.output_dir</code> Output directory \"./generated\" <code>paths.templates_dir</code> Templates directory \"./templates\" <code>paths.cache_dir</code> Cache directory \"./.cache\""},{"location":"user-guide/configuration/#logging","title":"Logging","text":"Option Description Default <code>logging.level</code> Logging level \"INFO\" <code>logging.file</code> Log file path \"./logs/codegen.log\" <code>logging.rotation</code> Log rotation \"daily\""},{"location":"user-guide/configuration/#environment-variables","title":"Environment Variables","text":"<p>Configuration can also be specified using environment variables. Environment variables take precedence over config file settings.</p> Environment Variable Config Equivalent Description <code>CODEGEN_MODEL_NAME</code> <code>model.name</code> Model to use <code>CODEGEN_MODEL_TEMP</code> <code>model.temperature</code> Temperature parameter <code>CODEGEN_DEBUG</code> <code>environment.debug_mode</code> Enable debug mode <code>CODEGEN_OUTPUT_DIR</code> <code>paths.output_dir</code> Output directory <code>CODEGEN_LOG_LEVEL</code> <code>logging.level</code> Logging level"},{"location":"user-guide/configuration/#command-line-arguments","title":"Command Line Arguments","text":"<p>Most configuration options can also be set via command line arguments. Command line arguments take precedence over both environment variables and config file settings.</p> <pre><code>python -m codegen_lab --model gpt-4 --temperature 0.8 --debug --output-dir ./custom_output\n</code></pre>"},{"location":"user-guide/docs-automation/","title":"Documentation Automation","text":"<p>This guide explains how Codegen Lab's documentation server is automated to prevent port conflicts and simplify the development workflow.</p>"},{"location":"user-guide/docs-automation/#automatic-port-management","title":"Automatic Port Management","text":"<p>The <code>make docs-serve</code> command now includes automatic port management, featuring:</p> <ol> <li>Automatic Process Detection: The system automatically detects if a MkDocs server is already running on port 8000</li> <li>Process Termination: If requested (with the <code>--kill-existing</code> flag), it automatically terminates existing MkDocs processes</li> <li>Alternative Port Selection: If killing is not possible or not requested, it finds an available port automatically</li> <li>Clear Status Messages: The system provides clear messages about what it's doing and which port it's using</li> </ol>"},{"location":"user-guide/docs-automation/#usage","title":"Usage","text":""},{"location":"user-guide/docs-automation/#basic-usage","title":"Basic Usage","text":"<p>To start the documentation server with automatic port management:</p> <pre><code>make docs-serve\n</code></pre> <p>This will: - Use port 8000 if available - Kill any existing MkDocs processes on port 8000 if found - Fall back to an alternative port if needed</p>"},{"location":"user-guide/docs-automation/#custom-options","title":"Custom Options","text":"<p>You can customize the behavior by running the script directly:</p> <pre><code>uv run python scripts/serve_docs.py --no-kill-existing --port 8080\n</code></pre> <p>Available options: - <code>--port PORT</code>: Specify a custom port (default: 8000) - <code>--kill-existing</code>: Kill existing MkDocs processes on the port (default) - <code>--no-kill-existing</code>: Don't kill existing processes, use an alternative port instead - <code>--no-gh-deploy-url</code>: Don't use GitHub Pages URL in configuration (useful for local development) - <code>--clean</code>: Clean the build directory before building - <code>--build-only</code>: Only build the documentation, don't serve it</p>"},{"location":"user-guide/docs-automation/#how-it-works","title":"How It Works","text":"<p>The automation script (<code>scripts/serve_docs.py</code>) performs the following steps:</p> <ol> <li>Checks if the requested port is already in use</li> <li>Identifies any MkDocs processes running on that port</li> <li>If <code>--kill-existing</code> is set, attempts to terminate those processes</li> <li>If the port is still unavailable, scans for an available port</li> <li>Starts the MkDocs server with the appropriate configuration</li> <li>Provides clear terminal output about what's happening</li> </ol>"},{"location":"user-guide/docs-automation/#graceful-termination","title":"Graceful Termination","text":"<p>The script also handles interruption gracefully. When you press Ctrl+C:</p> <ol> <li>The script catches the keyboard interrupt</li> <li>It sends a graceful termination signal to the MkDocs process</li> <li>It ensures clean exit of all processes</li> </ol> <p>This prevents orphaned processes that might cause port conflicts in the future.</p>"},{"location":"user-guide/installation/","title":"Installation","text":"<p>This page provides detailed installation instructions for Codegen Lab.</p>"},{"location":"user-guide/installation/#system-requirements","title":"System Requirements","text":"<ul> <li>Operating System: macOS, Linux, or Windows</li> <li>Python: Version 3.10 or higher</li> <li>Disk Space: At least 500MB of free disk space</li> <li>Memory: Minimum 4GB RAM recommended</li> </ul>"},{"location":"user-guide/installation/#installation-methods","title":"Installation Methods","text":""},{"location":"user-guide/installation/#method-1-using-uv-recommended","title":"Method 1: Using UV (Recommended)","text":"<p>UV is the preferred package manager for Codegen Lab.</p> <pre><code># Clone the repository\ngit clone https://github.com/bossjones/codegen-lab.git\ncd codegen-lab\n\n# Create and activate virtual environment\nuv venv --python 3.12.0\nsource .venv/bin/activate  # On Windows: .venv\\Scripts\\activate\n\n# Install dependencies\nuv sync --frozen\n</code></pre>"},{"location":"user-guide/installation/#method-2-using-pip","title":"Method 2: Using pip","text":"<p>While UV is recommended, you can also use pip for installation.</p> <pre><code># Clone the repository\ngit clone https://github.com/bossjones/codegen-lab.git\ncd codegen-lab\n\n# Create and activate virtual environment\npython -m venv .venv\nsource .venv/bin/activate  # On Windows: .venv\\Scripts\\activate\n\n# Install dependencies\npip install -e .\n</code></pre>"},{"location":"user-guide/installation/#method-3-docker","title":"Method 3: Docker","text":"<p>For containerized deployment, you can use Docker.</p> <pre><code># Build the Docker image\ndocker build -t codegen-lab .\n\n# Run the container\ndocker run -it codegen-lab\n</code></pre>"},{"location":"user-guide/installation/#troubleshooting","title":"Troubleshooting","text":""},{"location":"user-guide/installation/#common-issues","title":"Common Issues","text":""},{"location":"user-guide/installation/#issue-1-dependency-conflict","title":"Issue 1: Dependency Conflict","text":"<p>If you encounter dependency conflicts during installation, try:</p> <pre><code>uv sync --frozen --reinstall\n</code></pre>"},{"location":"user-guide/installation/#issue-2-python-version","title":"Issue 2: Python Version","text":"<p>If your Python version is too old, update your Python installation or use a tool like pyenv to manage multiple Python versions.</p>"},{"location":"user-guide/installation/#getting-help","title":"Getting Help","text":"<p>If you encounter any issues during installation, please:</p> <ol> <li>Check the Troubleshooting Guide</li> <li>Open an issue on the GitHub repository</li> </ol>"}]}
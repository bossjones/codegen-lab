{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Codegen Lab","text":"<p>This is the documentation for the Codegen Lab project.</p>"},{"location":"#overview","title":"Overview","text":"<p>Codegen Lab is a project focused on code generation and AI-assisted development tools. This documentation will guide you through the installation, configuration, and usage of Codegen Lab.</p>"},{"location":"#features","title":"Features","text":"<ul> <li>Model Context Protocol (MCP) Server: FastAPI-based server implementation for efficient AI model interactions</li> <li>Multi-Model AI Integration: Seamless integration with Anthropic and OpenAI models for diverse AI capabilities</li> <li>Repository Analysis Tools: Utilities for analyzing codebases and extracting relevant context for AI processing</li> <li>Discord Bot Integration: Built-in Discord bot functionality for automated interactions and notifications</li> <li>Cursor Rules: Custom workflow automations for iterative development in existing codebases</li> <li>UV Workspace: Efficient management of multiple packages within a single repository using UV package manager</li> <li>Development Tools: Comprehensive suite including Makefile automation, pre-commit hooks, and CI/CD workflows</li> </ul>"},{"location":"#quick-start","title":"Quick Start","text":"<pre><code># Clone the repository\ngit clone https://github.com/bossjones/codegen-lab.git\ncd codegen-lab\n\n# Install dependencies\nuv sync --frozen\n</code></pre>"},{"location":"#documentation-structure","title":"Documentation Structure","text":"<ul> <li>Getting Started: Basic introduction and setup</li> <li>User Guide: Detailed usage instructions</li> <li>Installation: Step-by-step installation guide</li> <li>Configuration: Detailed configuration options</li> <li>Development Tools: Tools and workflows for effective development</li> <li>Cursor Rules: Workflow automations for iterative development</li> <li>UV Workspace: Package management within a monorepo structure</li> <li>API Reference: Technical reference for APIs</li> <li>Contributing: Guidelines for contributors</li> <li>Changelog: Project version history and updates</li> </ul>"},{"location":"#local-development","title":"Local Development","text":"<p>To work on the documentation locally:</p> <ol> <li>Install documentation dependencies:</li> </ol> <pre><code>uv add --dev mkdocs mkdocs-material\n</code></pre> <ol> <li>Serve the documentation locally:</li> </ol> <pre><code>uv run mkdocs serve\n</code></pre> <p>This will start a local server at http://127.0.0.1:8000/ where you can preview the documentation.</p>"},{"location":"#writing-style-guide","title":"Writing Style Guide","text":"<p>When contributing to the documentation:</p> <ul> <li>Use clear, concise language</li> <li>Provide examples where appropriate</li> <li>Use proper Markdown formatting</li> <li>Use headings to structure content</li> <li>Add appropriate links to other documentation pages</li> <li>Use admonitions for notes, warnings, etc.</li> </ul>"},{"location":"#building-and-deployment","title":"Building and Deployment","text":"<p>The documentation is automatically deployed to GitHub Pages when changes are pushed to the <code>main</code> branch. For manual deployment, you can run:</p> <pre><code>uv run mkdocs build   # Build static site\nuv run mkdocs gh-deploy   # Deploy to GitHub Pages\n</code></pre>"},{"location":"api-reference/","title":"API Reference","text":"<p>This page provides detailed documentation for the Codegen Lab API.</p>"},{"location":"api-reference/#core-api","title":"Core API","text":""},{"location":"api-reference/#codegen_labgenerate","title":"<code>codegen_lab.generate</code>","text":"<p>Main function for generating code based on a prompt.</p> <pre><code>from codegen_lab import generate\n\ncode = generate(\n    prompt=\"Create a Python function to calculate the Fibonacci sequence\",\n    model=\"gpt-4\",\n    temperature=0.7,\n    max_tokens=1024\n)\n\nprint(code)\n</code></pre>"},{"location":"api-reference/#parameters","title":"Parameters","text":"Parameter Type Description Default <code>prompt</code> <code>str</code> The prompt to generate code from Required <code>model</code> <code>str</code> Model to use \"gpt-3.5-turbo\" <code>temperature</code> <code>float</code> Temperature parameter (0.0-1.0) 0.7 <code>max_tokens</code> <code>int</code> Maximum tokens to generate 1024 <code>top_p</code> <code>float</code> Top-p sampling parameter 0.9 <code>stop</code> <code>list[str]</code> Sequences where generation should stop None"},{"location":"api-reference/#returns","title":"Returns","text":"<p><code>str</code>: The generated code.</p>"},{"location":"api-reference/#exceptions","title":"Exceptions","text":"<ul> <li><code>ValueError</code>: If prompt is empty or parameters are invalid</li> <li><code>ConnectionError</code>: If there's an issue connecting to the model API</li> <li><code>AuthenticationError</code>: If API credentials are invalid</li> </ul>"},{"location":"api-reference/#codegen_labenhance","title":"<code>codegen_lab.enhance</code>","text":"<p>Enhance existing code with improvements, documentation, or tests.</p> <pre><code>from codegen_lab import enhance\n\noriginal_code = \"\"\"\ndef fibonacci(n):\n    if n &lt;= 0:\n        return []\n    if n == 1:\n        return [0]\n    sequence = [0, 1]\n    for i in range(2, n):\n        sequence.append(sequence[i-1] + sequence[i-2])\n    return sequence\n\"\"\"\n\nenhanced_code = enhance(\n    code=original_code,\n    enhancement_type=\"documentation\",\n    language=\"python\"\n)\n\nprint(enhanced_code)\n</code></pre>"},{"location":"api-reference/#parameters_1","title":"Parameters","text":"Parameter Type Description Default <code>code</code> <code>str</code> The code to enhance Required <code>enhancement_type</code> <code>str</code> Type of enhancement (\"documentation\", \"performance\", \"tests\", \"all\") \"all\" <code>language</code> <code>str</code> Programming language of the code \"python\" <code>model</code> <code>str</code> Model to use \"gpt-3.5-turbo\" <code>temperature</code> <code>float</code> Temperature parameter (0.0-1.0) 0.7"},{"location":"api-reference/#returns_1","title":"Returns","text":"<p><code>str</code>: The enhanced code.</p>"},{"location":"api-reference/#utility-functions","title":"Utility Functions","text":""},{"location":"api-reference/#codegen_labutilsvalidate_code","title":"<code>codegen_lab.utils.validate_code</code>","text":"<p>Validate generated code for syntax errors and other issues.</p> <pre><code>from codegen_lab.utils import validate_code\n\ncode = \"\"\"\ndef hello_world():\n    print(\"Hello, world!\")\n\"\"\"\n\nis_valid, issues = validate_code(code, language=\"python\")\n\nif is_valid:\n    print(\"Code is valid!\")\nelse:\n    print(\"Issues found:\", issues)\n</code></pre>"},{"location":"api-reference/#parameters_2","title":"Parameters","text":"Parameter Type Description Default <code>code</code> <code>str</code> The code to validate Required <code>language</code> <code>str</code> Programming language of the code \"python\" <code>strict</code> <code>bool</code> Enable strict validation False"},{"location":"api-reference/#returns_2","title":"Returns","text":"<ul> <li><code>bool</code>: Whether the code is valid</li> <li><code>list[str]</code>: List of issues found, empty if code is valid</li> </ul>"},{"location":"changelog/","title":"Changelog","text":"<p>All notable changes to this project will be documented in this file.</p> <p>The format is based on Keep a Changelog, and this project adheres to Semantic Versioning.</p>"},{"location":"changelog/#unreleased","title":"Unreleased","text":""},{"location":"changelog/#added","title":"Added","text":"<ul> <li>Bboxes: Add autocrop functionality for tweet and object detection Enhance image processing capabilities by introducing:</li> <li>Bboxes: Add comprehensive image processing with directory support Enhance the bounding box script with robust directory and file processing capabilities:</li> <li>Bboxes: Add Gemini model temperature control Enhance image processing with configurable Gemini model temperature:</li> <li>Bboxes: Add image resizing with primary color background Enhance image processing capabilities by introducing:</li> <li>Bboxes: Add robust retry mechanism for Gemini API calls Enhance Gemini API interaction reliability with:</li> <li>Bboxes: Enhance AI-powered image bounding box detection Improve tweet and object detection with advanced coordinate handling:</li> <li>Cheatsheets: Add Taskfile cheatsheet and repomix cheatsheet</li> <li>Cursor: Add cheatsheet creation best practices documentation - Comprehensive guidelines for creating well-structured command cheatsheets</li> <li>Cursor: Add MCP server configuration for memory file path - Configure the Cursor MCP server with a memory file path</li> <li>Cursor: Add MCP server development guidelines and best practices - Comprehensive documentation for developing Model Context Protocol (MCP) servers in Python</li> <li>Dependencies: Add Google Generative AI and supporting libraries Update project dependencies to include:</li> <li>Dependencies: Add tenacity library for retry and resilience Add tenacity library to project dependencies to support robust retry mechanisms and improve error handling for network and API interactions. This addition provides advanced retry strategies and can enhance the reliability of external service calls.</li> <li>Makefile: Update Taskfile copy destination path - Modify the <code>copy-global-taskfile</code> target to use <code>~/Taskfile.yml</code> instead of <code>~/.taskfile.yml</code></li> <li>Taskfile: Add empty line in Taskfile.yml - Minor whitespace adjustment to improve readability</li> <li>VSCode: Add VSCode settings and Taskfile schema integration</li> <li>Basic API functionality</li> <li>Basic documentation</li> <li>Command-line interface</li> <li>Core code generation functionality</li> <li>Documentation structure</li> <li>Initial project setup</li> <li>Initial release</li> </ul>"},{"location":"changelog/#changed","title":"Changed","text":"<ul> <li>Cursor: Add output.txt context extraction guidelines - Enhanced documentation for working with output.txt files</li> <li>Fastmcp: Add comprehensive FastMCP server development examples - Expanded documentation with detailed usage examples</li> <li>Fastmcp: Add comprehensive FastMCP server testing guidelines Enhance FastMCP documentation with detailed testing guidelines, including:</li> <li>Fastmcp: Enhance server development guidelines with examples - Detailed server type selection and implementation guidelines</li> <li>Fastmcp: Expand documentation with advanced MCP server examples - Comprehensive usage examples and demonstrations</li> <li>Taskfile: Update Taskfile schema and improve organization</li> <li>N/A</li> </ul>"},{"location":"changelog/#removed","title":"Removed","text":"<ul> <li>N/A</li> </ul>"},{"location":"changelog/#fixed","title":"Fixed","text":"<ul> <li>Bboxes: Update PIL image resizing method to use Resampling enum Replace deprecated LANCZOS constant with the recommended Resampling.LANCZOS enum in image resizing to ensure compatibility with newer Pillow versions. This change maintains the high-quality resizing behavior while adhering to the latest PIL API guidelines.</li> <li>N/A</li> </ul>"},{"location":"changelog/#020-2025-03-02","title":"0.2.0 - 2025-03-02","text":""},{"location":"changelog/#added_1","title":"Added","text":"<ul> <li>Cheatsheets: Add Taskfile cheatsheet and repomix cheatsheet</li> <li>Cursor: Add cheatsheet creation best practices documentation - Comprehensive guidelines for creating well-structured command cheatsheets</li> <li>Cursor: Add MCP server configuration for memory file path - Configure the Cursor MCP server with a memory file path</li> <li>Cursor: Add MCP server development guidelines and best practices - Comprehensive documentation for developing Model Context Protocol (MCP) servers in Python</li> <li>Makefile: Update Taskfile copy destination path - Modify the <code>copy-global-taskfile</code> target to use <code>~/Taskfile.yml</code> instead of <code>~/.taskfile.yml</code></li> <li>Taskfile: Add empty line in Taskfile.yml - Minor whitespace adjustment to improve readability</li> <li>VSCode: Add VSCode settings and Taskfile schema integration</li> </ul>"},{"location":"changelog/#changed_1","title":"Changed","text":"<ul> <li>Cursor: Add output.txt context extraction guidelines - Enhanced documentation for working with output.txt files</li> <li>Fastmcp: Add comprehensive FastMCP server development examples - Expanded documentation with detailed usage examples</li> <li>Fastmcp: Enhance server development guidelines with examples - Detailed server type selection and implementation guidelines</li> <li>Fastmcp: Expand documentation with advanced MCP server examples - Comprehensive usage examples and demonstrations</li> <li>Taskfile: Update Taskfile schema and improve organization</li> </ul>"},{"location":"changelog/#010-2025-02-15","title":"0.1.0 - 2025-02-15","text":""},{"location":"changelog/#added_2","title":"Added","text":"<ul> <li>Initial release</li> <li>Core code generation functionality</li> <li>Basic API functionality</li> <li>Command-line interface</li> <li>Basic documentation</li> <li>Documentation structure</li> <li>Initial project setup</li> </ul>"},{"location":"changelog/#fixed_1","title":"Fixed","text":"<ul> <li>N/A</li> </ul>"},{"location":"changelog/#changed_2","title":"Changed","text":"<ul> <li>N/A</li> </ul>"},{"location":"changelog/#removed_1","title":"Removed","text":"<ul> <li>N/A</li> </ul>"},{"location":"changelog/#how-to-update-the-changelog","title":"How to Update the Changelog","text":"<ol> <li>Always add new entries at the top under the <code>[Unreleased]</code> section</li> <li>Group changes by type: Added, Changed, Deprecated, Removed, Fixed, Security</li> <li>When releasing a new version, rename the <code>[Unreleased]</code> section to the new version number and date</li> <li>Create a new <code>[Unreleased]</code> section at the top</li> <li>Use link references at the bottom of the file for version comparisons</li> </ol>"},{"location":"comitizen/","title":"Commitizen Configuration Guide","text":"<p>This document explains the Commitizen configuration options used in our project's <code>pyproject.toml</code> file.</p>"},{"location":"comitizen/#configuration-options","title":"Configuration Options","text":""},{"location":"comitizen/#name-cz_conventional_commits","title":"<code>name = \"cz_conventional_commits\"</code>","text":"<ul> <li>Purpose: Specifies which Commitizen plugin to use for creating conventional commits</li> <li>Description: The <code>cz_conventional_commits</code> plugin implements the Conventional Commits specification</li> <li>Impact: Enforces a standardized commit message format that makes commit history more readable and enables automated versioning</li> </ul>"},{"location":"comitizen/#tag_format-vversion","title":"<code>tag_format = \"v$version\"</code>","text":"<ul> <li>Purpose: Defines the format for version tags</li> <li>Description: When Commitizen creates a new version, it will create a git tag using this format</li> <li>Example: For version 1.2.3, it will create a tag named <code>v1.2.3</code></li> <li>Variables:</li> <li><code>$version</code>: The version number (e.g., 1.2.3)</li> <li><code>$major</code>: Major version number</li> <li><code>$minor</code>: Minor version number</li> <li><code>$patch</code>: Patch version number</li> </ul>"},{"location":"comitizen/#version_scheme-pep440","title":"<code>version_scheme = \"pep440\"</code>","text":"<ul> <li>Purpose: Declares the versioning scheme to follow</li> <li>Description: Uses PEP 440 versioning scheme, which is the standard version identification scheme for Python packages</li> <li>Impact: Ensures version numbers are compliant with Python packaging standards</li> <li>Examples of valid versions:</li> <li><code>1.2.3</code></li> <li><code>2.0.0a1</code> (alpha release)</li> <li><code>1.3.0b2</code> (beta release)</li> <li><code>1.4.0rc1</code> (release candidate)</li> </ul>"},{"location":"comitizen/#version_provider-pep621","title":"<code>version_provider = \"pep621\"</code>","text":"<ul> <li>Purpose: Specifies where Commitizen should look for and update the version number</li> <li>Description: Uses the PEP 621 standard, which means the version is defined in <code>pyproject.toml</code> under the <code>[project]</code> section</li> <li>Impact: Ensures version management is compliant with modern Python packaging standards</li> </ul>"},{"location":"comitizen/#changelog_start_rev-v100","title":"<code>changelog_start_rev = \"v1.0.0\"</code>","text":"<ul> <li>Purpose: Indicates the starting point for changelog generation</li> <li>Description: When generating changelogs, Commitizen will only include commits after this version tag</li> <li>Use case: Useful for starting fresh changelog generation from a specific version, ignoring older history</li> </ul>"},{"location":"comitizen/#update_changelog_on_bump-true","title":"<code>update_changelog_on_bump = true</code>","text":"<ul> <li>Purpose: Controls automatic changelog updates during version bumps</li> <li>Description: When set to <code>true</code>, Commitizen will automatically update the changelog file when running version bump commands</li> <li>Impact: Maintains an up-to-date changelog without manual intervention</li> <li>Generated content:</li> <li>Groups changes by type (feat, fix, etc.)</li> <li>Includes commit messages and references</li> <li>Organizes by version number</li> </ul>"},{"location":"comitizen/#usage-examples","title":"Usage Examples","text":""},{"location":"comitizen/#bumping-versions","title":"Bumping Versions","text":"<pre><code># Automatically determine and bump version based on commits\ncz bump\n\n# Bump to a specific version\ncz bump --version 1.2.3\n</code></pre>"},{"location":"comitizen/#creating-commits","title":"Creating Commits","text":"<pre><code># Interactive commit creation\ncz commit\n\n# Direct commit with message\ncz commit -m \"feat: add new feature\"\n</code></pre>"},{"location":"comitizen/#generating-changelog","title":"Generating Changelog","text":"<pre><code># Generate or update changelog\ncz changelog\n</code></pre>"},{"location":"comitizen/#best-practices","title":"Best Practices","text":"<ol> <li> <p>Commit Messages: Follow the Conventional Commits format:    <pre><code>type(scope): description\n\n[optional body]\n\n[optional footer(s)]\n</code></pre></p> </li> <li> <p>Version Bumping: Let Commitizen determine the version bump based on commit types:</p> </li> <li><code>feat</code>: Minor version bump</li> <li><code>fix</code>: Patch version bump</li> <li> <p><code>BREAKING CHANGE</code>: Major version bump</p> </li> <li> <p>Changelog Management:</p> </li> <li>Keep changelogs up to date using <code>cz changelog</code></li> <li>Review generated changelogs for accuracy</li> <li>Commit changelog updates along with version bumps</li> </ol>"},{"location":"comitizen/#additional-resources","title":"Additional Resources","text":"<ul> <li>Commitizen Documentation</li> <li>Conventional Commits</li> <li>PEP 440 -- Version Identification and Dependency Specification</li> <li>PEP 621 -- Storing project metadata in pyproject.toml</li> </ul>"},{"location":"contributing/","title":"Contributing to Codegen Lab","text":"<p>Thank you for your interest in contributing to Codegen Lab! This document provides guidelines and instructions for contributors.</p>"},{"location":"contributing/#code-of-conduct","title":"Code of Conduct","text":"<p>Please read and follow our Code of Conduct before contributing.</p>"},{"location":"contributing/#how-to-contribute","title":"How to Contribute","text":"<p>There are many ways to contribute to Codegen Lab:</p> <ol> <li>Reporting Bugs: Report bugs by opening an issue on the GitHub repository.</li> <li>Suggesting Enhancements: Suggest new features or improvements by opening an issue.</li> <li>Pull Requests: Submit pull requests with bug fixes, improvements, or new features.</li> <li>Documentation: Help improve documentation or fix typos.</li> <li>Answering Questions: Help answer questions in issues or discussions.</li> </ol>"},{"location":"contributing/#development-setup","title":"Development Setup","text":"<ol> <li>Fork the repository on GitHub.</li> <li>Clone your fork to your local machine:</li> </ol> <pre><code>git clone https://github.com/YOUR_USERNAME/codegen-lab.git\ncd codegen-lab\n</code></pre> <ol> <li>Create a new branch for your changes:</li> </ol> <pre><code>git checkout -b feature/your-feature-name\n</code></pre> <ol> <li>Set up the development environment:</li> </ol> <pre><code>uv venv --python 3.12.0\nsource .venv/bin/activate  # On Windows: .venv\\Scripts\\activate\nuv sync --frozen --dev\n</code></pre> <ol> <li>Make your changes and commit them with a clear, descriptive commit message.</li> </ol>"},{"location":"contributing/#pull-request-process","title":"Pull Request Process","text":"<ol> <li>Ensure your code follows the project's style guidelines.</li> <li>Update documentation if necessary.</li> <li>Add tests for your changes.</li> <li>Make sure all tests pass:</li> </ol> <pre><code>uv run pytest tests/\n</code></pre> <ol> <li>Push your changes to your fork:</li> </ol> <pre><code>git push origin feature/your-feature-name\n</code></pre> <ol> <li>Submit a pull request to the main repository.</li> <li>The maintainers will review your pull request and provide feedback.</li> </ol>"},{"location":"contributing/#code-style","title":"Code Style","text":"<ul> <li>Follow PEP 8 for Python code.</li> <li>Add type hints to functions and methods.</li> <li>Write clear, descriptive docstrings following PEP 257.</li> <li>Use meaningful variable and function names.</li> </ul>"},{"location":"contributing/#testing","title":"Testing","text":"<ul> <li>Write tests for all new features and bug fixes.</li> <li>Use pytest for testing.</li> <li>Aim for high test coverage.</li> </ul>"},{"location":"contributing/#documentation","title":"Documentation","text":"<ul> <li>Update documentation for any changes to the API or behavior.</li> <li>Use clear, concise language.</li> <li>Provide examples for API usage.</li> </ul>"},{"location":"contributing/#license","title":"License","text":"<p>By contributing to Codegen Lab, you agree that your contributions will be licensed under the project's license.</p>"},{"location":"contributing/#changes","title":"Changes","text":"<p>Changes are recorded using Towncrier. Once a new release is created, towncrier is used to create the file <code>CHANGES.rst</code>.</p> <p>To create a new change run:</p> <pre><code>towncrier create &lt;pr-number&gt;.&lt;change type&gt;\n</code></pre> <p>A change type can be one of:</p> <ul> <li>feature: Signifying a new feature.</li> <li>bugfix: Signifying a bug fix.</li> <li>doc: Signifying a documentation improvement.</li> <li>removal: Signifying a deprecation or removal of public API.</li> <li>misc: A ticket has been closed, but it is not of interest to users.</li> </ul> <p>A new file is then created in the <code>changes</code> directory. Add a short description of the change to that file.</p>"},{"location":"contributing/#releasing","title":"Releasing","text":"<p>Steps for releasing:</p> <ol> <li>Switch to main: <code>git checkout main</code></li> <li>Do a pull: <code>git pull</code></li> <li>Run towncrier: <code>towncrier build --version &lt;version&gt;</code></li> <li>Commit towncrier results: <code>git commit -m \"Towncrier\"</code></li> <li>Run bump2version (note that this creates a new commit + tag): <code>bump2version --tag major/minor/patch</code></li> <li>Push to github: <code>git push &amp;&amp; git push --tags</code></li> </ol>"},{"location":"cursor-rules-styles/","title":"Cursor Rules: Style Guide and Migration","text":"<p>This document outlines the two styles of cursor rules (v1 and v2) and provides guidance for migrating between them.</p>"},{"location":"cursor-rules-styles/#v1-style-legacy-format","title":"V1 Style (Legacy Format)","text":"<p>The original cursor rule format uses XML-style tags and a more complex structure:</p> <pre><code>---\ndescription: TypeScript Standards\nglobs: \"*.ts,*.tsx\"\nalwaysApply: false\n---\n&lt;rule&gt;\nname: typescript_standards\ndescription: TypeScript coding standards\nfilters:\n  - type: file_extension\n    pattern: \"\\\\.tsx?$\"\nactions:\n  - type: suggest\n    message: \"Follow TypeScript standards...\"\n&lt;/rule&gt;\n</code></pre>"},{"location":"cursor-rules-styles/#characteristics","title":"Characteristics","text":"<ul> <li>Uses <code>&lt;rule&gt;</code> XML tags to wrap rule content</li> <li>Requires <code>name</code> and <code>description</code> fields inside <code>&lt;rule&gt;</code> tag</li> <li>Uses nested <code>filters</code> and <code>actions</code> structure</li> <li>Allows quoted glob patterns and brace expansions</li> <li>Files use <code>.mdc.md</code> extension</li> <li>No strict organization structure for rule files</li> </ul>"},{"location":"cursor-rules-styles/#v2-style-current-format","title":"V2 Style (Current Format)","text":"<p>The new cursor rule format uses a cleaner, pure Markdown structure with standardized sections:</p> <pre><code>---\ndescription:\nglobs: *.ts, *.tsx\nalwaysApply: false\n---\n# TypeScript Standards\n\n## Context\n- Enforces TypeScript best practices\n- Applies to all TypeScript/TSX files\n- Ensures consistent code quality\n\n## Critical Rules\n- Use strict type checking\n- Prefer interfaces over type aliases\n- Enforce explicit return types\n\n## Examples\n&lt;example&gt;\n// Valid TypeScript usage...\n&lt;/example&gt;\n\n&lt;example type=\"invalid\"&gt;\n// Invalid TypeScript usage...\n&lt;/example&gt;\n</code></pre>"},{"location":"cursor-rules-styles/#characteristics_1","title":"Characteristics","text":"<ul> <li>Uses pure Markdown structure without XML tags</li> <li>Has standardized sections: Context, Critical Rules, Examples</li> <li>Requires both valid and invalid examples</li> <li>Uses unquoted glob patterns with proper spacing</li> <li>Files use <code>.mdc</code> extension only</li> <li>Follows specific naming pattern: <code>rule-name-{type}.mdc</code></li> <li>Strict organizational folder structure under <code>.cursor/rules/</code></li> </ul>"},{"location":"cursor-rules-styles/#rule-types","title":"Rule Types","text":"<p>V2 introduces four distinct rule types, each with specific naming and frontmatter requirements:</p> <ol> <li>Agent Selected (<code>-agent.mdc</code>)</li> <li>AI decides when to apply based on description</li> <li>Description field is critical</li> <li>Blank globs</li> <li> <p><code>alwaysApply: false</code></p> </li> <li> <p>Always (<code>-always.mdc</code>)</p> </li> <li>Applied to every chat and cmd-k request</li> <li>Blank description</li> <li>Blank globs</li> <li> <p><code>alwaysApply: true</code></p> </li> <li> <p>Auto Select (<code>-auto.mdc</code>)</p> </li> <li>Applied to matching files based on glob pattern</li> <li>Blank description</li> <li>Critical glob pattern</li> <li> <p><code>alwaysApply: false</code></p> </li> <li> <p>Manual (<code>-manual.mdc</code>)</p> </li> <li>User must explicitly reference in chat</li> <li>Blank description</li> <li>Blank globs</li> <li><code>alwaysApply: false</code></li> </ol>"},{"location":"cursor-rules-styles/#directory-structure","title":"Directory Structure","text":"<p>V2 enforces a strict organizational structure under <code>.cursor/rules/</code>:</p> <pre><code>.cursor/rules/\n\u251c\u2500\u2500 core-rules/       # Rules for cursor agent behavior\n\u251c\u2500\u2500 my-rules/         # Private rules (gitignored)\n\u251c\u2500\u2500 global-rules/     # Always applied rules\n\u251c\u2500\u2500 testing-rules/    # Testing standards\n\u251c\u2500\u2500 tool-rules/       # Tool-specific rules\n\u251c\u2500\u2500 ts-rules/         # TypeScript-specific rules\n\u251c\u2500\u2500 py-rules/         # Python-specific rules\n\u251c\u2500\u2500 ui-rules/         # UI/UX related rules\n\u2514\u2500\u2500 workflows/        # Workflow implementation rules\n</code></pre>"},{"location":"cursor-rules-styles/#migration-process","title":"Migration Process","text":"<p>To migrate from v1 to v2 format:</p> <ol> <li>Move Files</li> <li>From: <code>hack/drafts/cursor_rules/*.mdc.md</code></li> <li> <p>To: <code>.cursor/rules/{appropriate-subdirectory}/</code></p> </li> <li> <p>Update File Names</p> </li> <li>Remove <code>.md</code> extension</li> <li> <p>Add appropriate type suffix: <code>-{auto|agent|manual|always}.mdc</code></p> </li> <li> <p>Fix Frontmatter</p> </li> <li>Remove quotes from glob patterns</li> <li>Add spaces after commas in glob lists</li> <li>Set appropriate <code>alwaysApply</code> value based on rule type</li> <li> <p>Clear or set description based on rule type</p> </li> <li> <p>Convert Content</p> </li> <li>Remove <code>&lt;rule&gt;</code> tags and nested structure</li> <li>Add required sections: Context, Critical Rules, Examples</li> <li>Include both valid and invalid examples</li> <li> <p>Keep content concise (under 50 lines preferred)</p> </li> <li> <p>Verify Migration</p> </li> <li>Check file location and name</li> <li>Validate frontmatter format</li> <li>Ensure all required sections are present</li> <li>Test rule functionality</li> </ol>"},{"location":"cursor-rules-styles/#best-practices","title":"Best Practices","text":"<ol> <li>Keep Rules Concise</li> <li>Target under 25 lines</li> <li>Maximum 50 lines</li> <li> <p>Split large rules into smaller, focused rules</p> </li> <li> <p>Use Clear Examples</p> </li> <li>Always include both valid and invalid examples</li> <li>Make examples realistic and practical</li> <li> <p>Use proper code formatting</p> </li> <li> <p>Maintain Organization</p> </li> <li>Place rules in appropriate subdirectories</li> <li>Use descriptive filenames</li> <li> <p>Follow naming conventions strictly</p> </li> <li> <p>Update Documentation</p> </li> <li>Document rule purpose in Context section</li> <li>Keep Critical Rules clear and actionable</li> <li>Update examples when rules change</li> </ol>"},{"location":"environment/","title":"Environment","text":""},{"location":"environment/#macros-plugin-environment","title":"Macros Plugin Environment","text":""},{"location":"environment/#general-list","title":"General List","text":"<p>All available variables and filters within the macros plugin:</p> Variable Type Content extra dict social = [{'icon': 'fontawesome/brands/github', 'link': 'https://github.com/bossjones/codegen-lab'}] config MkDocsConfig {'config_file_path': '/home/runner/work/codegen-lab/codegen-lab/mkdocs.yml', 'site_name': 'Codegen Lab', 'nav': None, 'pages': None, 'exclude_docs': None, 'draft_docs': None, 'not_in_nav': None, 'site_url': 'https://bossjones.github.io/codegen-lab/docs/', 'site_description': 'AI-powered code generation tooling for efficient software development', 'site_author': 'Malcolm Jones', 'theme': Theme(name='material', dirs=['/home/runner/work/codegen-lab/codegen-lab/true/lib/python3.12/site-packages/material/templates', '/home/runner/work/codegen-lab/codegen-lab/true/lib/python3.12/site-packages/mkdocs/templates'], static_templates={'sitemap.xml', '404.html'}, name='material', locale=Locale('en'), language='en', direction=None, features=['content.action.edit', 'content.action.view', 'content.code.copy', 'content.code.select', 'content.tooltips', 'navigation.footer', 'search.share'], font={'text': 'Roboto', 'code': 'Roboto Mono'}, icon=None, favicon='assets/images/favicon.png', palette={'primary': 'indigo', 'accent': 'indigo'}), 'docs_dir': '/home/runner/work/codegen-lab/codegen-lab/docs', 'site_dir': '/home/runner/work/codegen-lab/codegen-lab/site', 'copyright': 'Copyright \u00a9 2023 - 2025 Malcolm Jones', 'google_analytics': None, 'dev_addr': _IpAddressValue(host='127.0.0.1', port=8000), 'use_directory_urls': True, 'repo_url': 'https://github.com/bossjones/codegen-lab', 'repo_name': 'bossjones/codegen-lab', 'edit_uri_template': None, 'edit_uri': 'edit/main/docs/', 'extra_css': ['assets/_mkdocstrings.css'], 'extra_javascript': [], 'extra_templates': [], 'markdown_extensions': ['toc', 'tables', 'fenced_code', 'abbr', 'admonition', 'attr_list', 'neoteroi.cards', 'pymdownx.details', 'pymdownx.emoji', 'pymdownx.highlight', 'pymdownx.inlinehilite', 'pymdownx.magiclink', 'pymdownx.snippets', 'pymdownx.superfences', 'pymdownx.tabbed', , ], 'mdx_configs': {'toc': {'permalink': True}, 'pymdownx.emoji': {'emoji_index': , 'emoji_generator': }, 'pymdownx.superfences': {'custom_fences': [{'name': 'mermaid', 'class': 'mermaid', 'format': functools.partial(, custom=True)}]}, 'pymdownx.tabbed': {'alternate_style': True}}, 'strict': False, 'remote_branch': 'gh-pages', 'remote_name': 'origin', 'extra': {'social': [{'icon': 'fontawesome/brands/github', 'link': 'https://github.com/bossjones/codegen-lab'}]}, 'plugins': {'autorefs': , 'awesome-pages': , 'git-revision-date-localized': , 'git-authors': , 'macros': , 'mermaid2': , 'mkdocstrings': , 'material/search': , 'material/tags': , 'ezlinks': }, 'hooks': {}, 'watch': ['/home/runner/work/codegen-lab/codegen-lab/mkdocs_macro_plugin.py', '/home/runner/work/codegen-lab/codegen-lab/docs_templates'], 'validation': {'nav': {'omitted_files': 20, 'not_found': 30, 'absolute_links': 20}, 'links': {'not_found': 30, 'absolute_links': 20, 'unrecognized_links': 20, 'anchors': 20}}} environment dict system = 'Linux', system_version = '6.8.0-1021-azure', python_version = '3.12.9', mkdocs_version = '1.6.1', macros_plugin_version = '1.3.7', jinja2_version = '3.1.5' plugin LegacyConfig {'module_name': 'mkdocs_macro_plugin', 'modules': [], 'render_by_default': True, 'force_render_paths': '', 'include_dir': '', 'include_yaml': [], 'j2_block_start_string': '', 'j2_block_end_string': '', 'j2_variable_start_string': '', 'j2_variable_end_string': '', 'j2_comment_start_string': '', 'j2_comment_end_string': '', 'on_undefined': 'keep', 'on_error_fail': False, 'verbose': True} git dict status = True, date [datetime], short_commit = '8566747', commit = '8566747de893ad96d4c2ef05fbfd2610eeab4f9d', tag = 'v0.1.0-8-g8566747', short_tag = 'v0.1.0', author = 'Malcolm Jones', author_email = 'bossjones@theblacktonystark.com', committer = 'Malcolm Jones', committer_email = 'bossjones@theblacktonystark.com', date_ISO = 'Tue Apr 1 22:04:34 2025 -0400', message = 'chore: Update documentation deployment workflow in GitHub Actions\\n\\n- Modified the `docs.yml` workflow to skip commitizen checks for gh-pages.\\n- Configured Git credentials for the GitHub Actions bot.\\n- Added environment variable for GITHUB_TOKEN during deployment.\\n- Commented out unused steps for caching and documentation building for clarity.', raw = 'commit 8566747de893ad96d4c2ef05fbfd2610eeab4f9d\\nAuthor: Malcolm Jones \\nDate:   Tue Apr 1 22:04:34 2025 -0400\\n\\n    chore: Update documentation deployment workflow in GitHub Actions\\n    \\n    - Modified the `docs.yml` workflow to skip commitizen checks for gh-pages.\\n    - Configured Git credentials for the GitHub Actions bot.\\n    - Added environment variable for GITHUB_TOKEN during deployment.\\n    - Commented out unused steps for caching and documentation building for clarity.', root_dir = '/home/runner/work/codegen-lab/codegen-lab' social SuperList [{'icon': 'fontawesome/brands/github', 'link': 'https://github.com/bossjones/codegen-lab'}] macros SuperDict context [function], macros_info [function], now [function], fix_url [function], include_file [function], doc_env [function], render_with_page_template [function] filters dict pretty [function], relative_url [function] filters_builtin dict abs [builtin_function_or_method], attr [function], batch [function], capitalize [function], center [function], count [builtin_function_or_method], d [function], default [function], dictsort [function], e [function], escape [function], filesizeformat [function], first [function], float [function], forceescape [function], format [function], groupby [function], indent [function], int [function], join [function], last [function], length [builtin_function_or_method], list [function], lower [function], items [function], map [function], min [function], max [function], pprint [function], random [function], reject [function], rejectattr [function], replace [function], reverse [function], round [function], safe [function], select [function], selectattr [function], slice [function], sort [function], string [function], striptags [function], sum [function], title [function], trim [function], truncate [function], unique [function], upper [function], urlencode [function], urlize [function], wordcount [function], wordwrap [function], xmlattr [function], tojson [function] navigation Navigation files Files page Page Page(title='Environment', url='/codegen-lab/docs/environment/')"},{"location":"environment/#config-information","title":"Config Information","text":"<p>Standard MkDocs configuration information. Do not try to modify.</p> <p>e.g. <code>{{ config.docs_dir }}</code></p> <p>See also the MkDocs documentation on the config object.</p> Variable Type Content config_file_path str '/home/runner/work/codegen-lab/codegen-lab/mkdocs.yml' site_name str 'Codegen Lab' nav NoneType None pages NoneType None exclude_docs NoneType None draft_docs NoneType None not_in_nav NoneType None site_url str 'https://bossjones.github.io/codegen-lab/docs/' site_description str 'AI-powered code generation tooling for efficient software development' site_author str 'Malcolm Jones' theme Theme Theme(name='material', dirs=['/home/runner/work/codegen-lab/codegen-lab/true/lib/python3.12/site-packages/material/templates', '/home/runner/work/codegen-lab/codegen-lab/true/lib/python3.12/site-packages/mkdocs/templates'], static_templates={'sitemap.xml', '404.html'}, name='material', locale=Locale('en'), language='en', direction=None, features=['content.action.edit', 'content.action.view', 'content.code.copy', 'content.code.select', 'content.tooltips', 'navigation.footer', 'search.share'], font={'text': 'Roboto', 'code': 'Roboto Mono'}, icon=None, favicon='assets/images/favicon.png', palette={'primary': 'indigo', 'accent': 'indigo'}) docs_dir str '/home/runner/work/codegen-lab/codegen-lab/docs' site_dir str '/home/runner/work/codegen-lab/codegen-lab/site' copyright str 'Copyright \u00a9 2023 - 2025 Malcolm Jones' google_analytics NoneType None dev_addr _IpAddressValue _IpAddressValue(host='127.0.0.1', port=8000) use_directory_urls bool True repo_url str 'https://github.com/bossjones/codegen-lab' repo_name str 'bossjones/codegen-lab' edit_uri_template NoneType None edit_uri str 'edit/main/docs/' extra_css list ['assets/_mkdocstrings.css'] extra_javascript list [] extra_templates list [] markdown_extensions list ['toc', 'tables', 'fenced_code', 'abbr', 'admonition', 'attr_list', 'neoteroi.cards', 'pymdownx.details', 'pymdownx.emoji', 'pymdownx.highlight', 'pymdownx.inlinehilite', 'pymdownx.magiclink', 'pymdownx.snippets', 'pymdownx.superfences', 'pymdownx.tabbed', , ] mdx_configs dict toc [dict], pymdownx.emoji [dict], pymdownx.superfences [dict], pymdownx.tabbed [dict] strict bool False remote_branch str 'gh-pages' remote_name str 'origin' extra LegacyConfig {'social': [{'icon': 'fontawesome/brands/github', 'link': 'https://github.com/bossjones/codegen-lab'}]} plugins PluginCollection autorefs [AutorefsPlugin], awesome-pages [AwesomePagesPlugin], git-revision-date-localized [GitRevisionDateLocalizedPlugin], git-authors [GitAuthorsPlugin], macros [MacrosPlugin], mermaid2 [MarkdownMermaidPlugin], mkdocstrings [MkdocstringsPlugin], material/search [SearchPlugin], material/tags [TagsPlugin], ezlinks [EzLinksPlugin] hooks dict watch list ['/home/runner/work/codegen-lab/codegen-lab/mkdocs_macro_plugin.py', '/home/runner/work/codegen-lab/codegen-lab/docs_templates'] validation Validation {'nav': {'omitted_files': 20, 'not_found': 30, 'absolute_links': 20}, 'links': {'not_found': 30, 'absolute_links': 20, 'unrecognized_links': 20, 'anchors': 20}}"},{"location":"environment/#macros","title":"Macros","text":"<p>These macros have been defined programmatically for this environment (module or pluglets). </p> Variable Type Content context function (obj, var, value, e) <p>Default Mkdocs-Macro: List an object         (by default the variables)</p> macros_info function () <p>Test/debug function:         list useful documentation on the mkdocs_macro environment.</p> now function () <p>Default Mkdocs-Macro:         Get the current time (at the moment of the project build).         It returns a datetime object.          Used alone, it provides a timestamp.         To get the year use <code>now().year</code>, for the month number          <code>now().month</code>, etc.</p> fix_url function (url, r) <p>If url is relative, fix it so that it points to the docs directory.     This is necessary because relative links in markdown must be adapted     in html ('img/foo.png' =&gt; '../img/img.png').</p> include_file function (filename, start_line, end_line, full_filename, f, lines, line_range) <p>Include a file's contents with optional line range selection.</p> doc_env function (name) <p>Document the environment by returning visible attributes.</p> render_with_page_template function (page_template, template_file) <p>Render a page using a template from the templates directory.</p>"},{"location":"environment/#git-information","title":"Git Information","text":"<p>Information available on the last commit and the git repository containing the documentation project:</p> <p>e.g. <code>{{ git.message }}</code></p> Variable Type Content status bool True date datetime datetime.datetime(2025, 4, 1, 22, 4, 34, tzinfo=tzoffset(None, -14400)) short_commit str '8566747' commit str '8566747de893ad96d4c2ef05fbfd2610eeab4f9d' tag str 'v0.1.0-8-g8566747' short_tag str 'v0.1.0' author str 'Malcolm Jones' author_email str 'bossjones@theblacktonystark.com' committer str 'Malcolm Jones' committer_email str 'bossjones@theblacktonystark.com' date_ISO str 'Tue Apr 1 22:04:34 2025 -0400' message str 'chore: Update documentation deployment workflow in GitHub Actions\\n\\n- Modified the `docs.yml` workflow to skip commitizen checks for gh-pages.\\n- Configured Git credentials for the GitHub Actions bot.\\n- Added environment variable for GITHUB_TOKEN during deployment.\\n- Commented out unused steps for caching and documentation building for clarity.' raw str 'commit 8566747de893ad96d4c2ef05fbfd2610eeab4f9d\\nAuthor: Malcolm Jones \\nDate:   Tue Apr 1 22:04:34 2025 -0400\\n\\n    chore: Update documentation deployment workflow in GitHub Actions\\n    \\n    - Modified the `docs.yml` workflow to skip commitizen checks for gh-pages.\\n    - Configured Git credentials for the GitHub Actions bot.\\n    - Added environment variable for GITHUB_TOKEN during deployment.\\n    - Commented out unused steps for caching and documentation building for clarity.' root_dir str '/home/runner/work/codegen-lab/codegen-lab'"},{"location":"environment/#page-attributes","title":"Page Attributes","text":"<p>Provided by MkDocs. These attributes change for every page (the attributes shown are for this page).</p> <p>e.g. <code>{{ page.title }}</code></p> <p>See also the MkDocs documentation on the page object.</p> Variable Type Content file File src_uri = 'environment.md', src_dir = '/home/runner/work/codegen-lab/codegen-lab/docs', dest_dir = '/home/runner/work/codegen-lab/codegen-lab/site', use_directory_urls = True, inclusion [InclusionLevel], name = 'environment', dest_uri = 'environment/index.html', abs_src_path = '/home/runner/work/codegen-lab/codegen-lab/docs/environment.md', page [Page], url = 'environment/' children NoneType None previous_page Page Page(title='Cursor Rules: Style Guide and Migration', url='/codegen-lab/docs/cursor-rules-styles/') next_page Page Page(title=[blank], url='/codegen-lab/docs/getting-started/') _Page__active bool False update_date str '2025-04-02' canonical_url str 'https://bossjones.github.io/codegen-lab/docs/environment/' abs_url str '/codegen-lab/docs/environment/' edit_url str 'https://github.com/bossjones/codegen-lab/edit/main/docs/environment.md' markdown str \"# Environment\\n\\n{{ macros_info() }}\\n\\n\\n## Updates\\n{% for page in navigation.pages %}\\n1. {{ page.title }} ({{ page.update_date }})\\n{% endfor %}\\n\\n\\n## Mkdocs.yal file (portion)\\n\\n```\\n{{ include_file('mkdocs.yml', 0, 5)}}\\n```\\n\\n## List env object\\n\\n```\\n{{ doc_env() | pprint }}\\n```\\n\" _title_from_render NoneType None content NoneType None toc list [] meta dict foo = 'Hello world', bar [dict], bingo = 'Hello', git_revision_date_localized = 'April 2, 2025 01:14:46', git_revision_date_localized_hash = '34ceecf7712b1bd2e4fa9162e38b540576821e78', git_revision_date_localized_tag = '', git_revision_date_localized_raw_date = 'April 2, 2025', git_revision_date_localized_raw_datetime = 'April 2, 2025 01:14:46', git_revision_date_localized_raw_iso_date = '2025-04-02', git_revision_date_localized_raw_iso_datetime = '2025-04-02 01:14:46', git_revision_date_localized_raw_timeago = '', git_revision_date_localized_raw_custom = '02. April 2025', git_site_revision_date_localized_hash = 'ef79734f9ceebb4157704b61728496bf2f8b7ed3', git_site_revision_date_localized_tag = '', git_site_revision_date_localized = 'April 2, 2025 01:45:52', git_site_revision_date_localized_raw_date = 'April 2, 2025', git_site_revision_date_localized_raw_datetime = 'April 2, 2025 01:45:52', git_site_revision_date_localized_raw_iso_date = '2025-04-02', git_site_revision_date_localized_raw_iso_datetime = '2025-04-02 01:45:52', git_site_revision_date_localized_raw_timeago = '', git_site_revision_date_localized_raw_custom = '02. April 2025', git_creation_date_localized_hash = '', git_creation_date_localized_tag = '', git_creation_date_localized = 'April 2, 2025 01:14:46', git_creation_date_localized_raw_date = 'April 2, 2025', git_creation_date_localized_raw_datetime = 'April 2, 2025 01:14:46', git_creation_date_localized_raw_iso_date = '2025-04-02', git_creation_date_localized_raw_iso_datetime = '2025-04-02 01:14:46', git_creation_date_localized_raw_timeago = '', git_creation_date_localized_raw_custom = '02. April 2025' <p>To have all titles of all pages, use:</p> <pre><code>{% for page in navigation.pages %}\n- {{ page.title }}\n{% endfor %}\n</code></pre>"},{"location":"environment/#plugin-filters","title":"Plugin Filters","text":"<p>These filters are provided as a standard by the macros plugin.</p> Variable Type Content pretty function (var_list, var, var_type, content, rows, header, e) <p>Default Mkdocs-Macro: Prettify a dictionary or object          (used for environment documentation, or debugging).</p> relative_url function (path) <p>Default Mkdocs-Macro:         convert the path of any page according to MkDoc's internal logic,         into a URL relative to the current page         (implements the <code>normalize_url()</code> function from <code>mkdocs.util</code>).         Typically used to manage custom navigation:         <code>{{ page.url | relative_url }}</code>.</p>"},{"location":"environment/#builtin-jinja2-filters","title":"Builtin Jinja2 Filters","text":"<p>These filters are provided by Jinja2 as a standard.</p> <p>See also the Jinja2 documentation on builtin filters.</p> Variable Type Content abs builtin_function_or_method <p>Return the absolute value of the argument.</p> attr function (environment, obj, name, value) <p>Get an attribute of an object.  <code>foo|attr(\"bar\")</code> works like     <code>foo.bar</code> just that always an attribute is returned and items are not     looked up.</p> batch function (value, linecount, fill_with, tmp, item) <p>A filter that batches items. It works pretty much like <code>slice</code>     just the other way round. It returns a list of lists with the     given number of items. If you provide a second parameter this     is used to fill up missing items. See this example.</p> capitalize function (s) <p>Capitalize a value. The first character will be uppercase, all others     lowercase.</p> center function (value, width) <p>Centers the value in a field of a given width.</p> count builtin_function_or_method <p>Return the number of items in a container.</p> d function (value, default_value, boolean) <p>If the value is undefined it will return the passed default value,     otherwise the value of the variable.</p> default function (value, default_value, boolean) <p>If the value is undefined it will return the passed default value,     otherwise the value of the variable.</p> dictsort function (value, case_sensitive, by, reverse, sort_func) <p>Sort a dict and yield (key, value) pairs. Python dicts may not     be in the order you want to display them in, so sort them first.</p> e function (s) <p>Replace the characters <code>&amp;</code>, <code>&lt;</code>, <code>&gt;</code>, <code>'</code>, and <code>\"</code> in     the string with HTML-safe sequences. Use this if you need to display     text that might contain such characters in HTML.</p> escape function (s) <p>Replace the characters <code>&amp;</code>, <code>&lt;</code>, <code>&gt;</code>, <code>'</code>, and <code>\"</code> in     the string with HTML-safe sequences. Use this if you need to display     text that might contain such characters in HTML.</p> filesizeformat function (value, binary, bytes, base, prefixes, i, prefix, unit) <p>Format the value like a 'human-readable' file size (i.e. 13 kB,     4.1 MB, 102 Bytes, etc).  Per default decimal prefixes are used (Mega,     Giga, etc.), if the second parameter is set to <code>True</code> the binary     prefixes are used (Mebi, Gibi).</p> first function (args, kwargs, b) <p>Return the first item of a sequence.</p> float function (value, default) <p>Convert the value into a floating point number. If the     conversion doesn't work it will return <code>0.0</code>. You can     override this default using the first parameter.</p> forceescape function (value) <p>Enforce HTML escaping.  This will probably double escape variables.</p> format function (value, args, kwargs) <p>Apply the given values to a <code>printf-style</code>_ format string, like     <code>string % values</code>.</p> groupby function (args, kwargs, b) <p>Group a sequence of objects by an attribute using Python's     :func:<code>itertools.groupby</code>. The attribute can use dot notation for     nested access, like <code>\"address.city\"</code>. Unlike Python's <code>groupby</code>,     the values are sorted first so only one group is returned for each     unique value.</p> indent function (s, width, first, blank, newline, rv, lines) <p>Return a copy of the string with each line indented by 4 spaces. The     first line and blank lines are not indented by default.</p> int function (value, default, base) <p>Convert the value into an integer. If the     conversion doesn't work it will return <code>0</code>. You can     override this default using the first parameter. You     can also override the default base (10) in the second     parameter, which handles input with prefixes such as     0b, 0o and 0x for bases 2, 8 and 16 respectively.     The base is ignored for decimal numbers and non-string values.</p> join function (args, kwargs, b) <p>Return a string which is the concatenation of the strings in the     sequence. The separator between elements is an empty string per     default, you can define it with the optional parameter.</p> last function (environment, seq) <p>Return the last item of a sequence.</p> length builtin_function_or_method <p>Return the number of items in a container.</p> list function (args, kwargs, b) <p>Convert the value into a list.  If it was a string the returned list     will be a list of characters.</p> lower function (s) <p>Convert a value to lowercase.</p> items function (value) <p>Return an iterator over the <code>(key, value)</code> items of a mapping.</p> map function (args, kwargs, b) <p>Applies a filter on a sequence of objects or looks up an attribute.     This is useful when dealing with lists of objects but you are really     only interested in a certain value of it.</p> min function (environment, value, case_sensitive, attribute) <p>Return the smallest item from the sequence.</p> max function (environment, value, case_sensitive, attribute) <p>Return the largest item from the sequence.</p> pprint function (value) <p>Pretty print a variable. Useful for debugging.</p> random function (context, seq) <p>Return a random item from the sequence.</p> reject function (args, kwargs, b) <p>Filters a sequence of objects by applying a test to each object,     and rejecting the objects with the test succeeding.</p> rejectattr function (args, kwargs, b) <p>Filters a sequence of objects by applying a test to the specified     attribute of each object, and rejecting the objects with the test     succeeding.</p> replace function (eval_ctx, s, old, new, count) <p>Return a copy of the value with all occurrences of a substring     replaced with a new one. The first argument is the substring     that should be replaced, the second is the replacement string.     If the optional third argument <code>count</code> is given, only the first     <code>count</code> occurrences are replaced.</p> reverse function (value, rv, e) <p>Reverse the object or return an iterator that iterates over it the other     way round.</p> round function (value, precision, method, func) <p>Round the number to a given precision. The first     parameter specifies the precision (default is <code>0</code>), the     second the rounding method.</p> safe function (value) <p>Mark the value as safe which means that in an environment with automatic     escaping enabled this variable will not be escaped.</p> select function (args, kwargs, b) <p>Filters a sequence of objects by applying a test to each object,     and only selecting the objects with the test succeeding.</p> selectattr function (args, kwargs, b) <p>Filters a sequence of objects by applying a test to the specified     attribute of each object, and only selecting the objects with the     test succeeding.</p> slice function (args, kwargs, b) <p>Slice an iterator and return a list of lists containing     those items. Useful if you want to create a div containing     three ul tags that represent columns.</p> sort function (environment, value, reverse, case_sensitive, attribute, key_func) <p>Sort an iterable using Python's :func:<code>sorted</code>.</p> string function (s) <p>Convert an object to a string if it isn't already. This preserves     a :class:<code>Markup</code> string rather than converting it back to a basic     string, so it will still be marked as safe and won't be escaped     again.</p> striptags function (value) <p>Strip SGML/XML tags and replace adjacent whitespace by one space.</p> sum function (args, kwargs, b) <p>Returns the sum of a sequence of numbers plus the value of parameter     'start' (which defaults to 0).  When the sequence is empty it returns     start.</p> title function (s, item) <p>Return a titlecased version of the value. I.e. words will start with     uppercase letters, all remaining characters are lowercase.</p> trim function (value, chars) <p>Strip leading and trailing characters, by default whitespace.</p> truncate function (env, s, length, killwords, end, leeway, result) <p>Return a truncated copy of the string. The length is specified     with the first parameter which defaults to <code>255</code>. If the second     parameter is <code>true</code> the filter will cut the text at length. Otherwise     it will discard the last word. If the text was in fact     truncated it will append an ellipsis sign (<code>\"...\"</code>). If you want a     different ellipsis sign than <code>\"...\"</code> you can specify it using the     third parameter. Strings that only exceed the length by the tolerance     margin given in the fourth parameter will not be truncated.</p> unique function (args, kwargs, b) <p>Returns a list of unique items from the given iterable.</p> upper function (s) <p>Convert a value to uppercase.</p> urlencode function (value, items) <p>Quote data for use in a URL path or query using UTF-8.</p> urlize function (eval_ctx, value, trim_url_limit, nofollow, target, rel, extra_schemes, policies, rel_parts, scheme, rv) <p>Convert URLs in text into clickable links.</p> wordcount function (s) <p>Count the words in that string.</p> wordwrap function (environment, s, width, break_long_words, wrapstring, break_on_hyphens, textwrap, line) <p>Wrap a string to the given width. Existing newlines are treated     as paragraphs to be wrapped separately.</p> xmlattr function (eval_ctx, d, autospace, items, key, value, rv) <p>Create an SGML/XML attribute string based on the items in a dict.</p> tojson function (eval_ctx, value, indent, policies, dumps, kwargs) <p>Serialize an object to a string of JSON, and mark it safe to     render in HTML. This filter is only for use in HTML documents.</p>"},{"location":"environment/#updates","title":"Updates","text":"<ol> <li> <p>Codegen Lab (2025-04-02)</p> </li> <li> <p>API Reference (2025-04-02)</p> </li> <li> <p>Changelog (2025-04-02)</p> </li> <li> <p>Commitizen Configuration Guide (2025-04-02)</p> </li> <li> <p>Contributing to Codegen Lab (2025-04-02)</p> </li> <li> <p>Cursor Rules: Style Guide and Migration (2025-04-02)</p> </li> <li> <p>Environment (2025-04-02)</p> </li> <li> <p>None (2025-04-02)</p> </li> <li> <p>None (2025-04-02)</p> </li> <li> <p>None (2025-04-02)</p> </li> <li> <p>None (2025-04-02)</p> </li> <li> <p>None (2025-04-02)</p> </li> <li> <p>None (2025-04-02)</p> </li> <li> <p>None (2025-04-02)</p> </li> <li> <p>None (2025-04-02)</p> </li> <li> <p>None (2025-04-02)</p> </li> <li> <p>None (2025-04-02)</p> </li> <li> <p>None (2025-04-02)</p> </li> <li> <p>None (2025-04-02)</p> </li> <li> <p>None (2025-04-02)</p> </li> <li> <p>None (2025-04-02)</p> </li> <li> <p>None (2025-04-02)</p> </li> <li> <p>None (2025-04-02)</p> </li> <li> <p>None (2025-04-02)</p> </li> <li> <p>None (2025-04-02)</p> </li> <li> <p>None (2025-04-02)</p> </li> <li> <p>None (2025-04-02)</p> </li> <li> <p>None (2025-04-02)</p> </li> <li> <p>None (2025-04-02)</p> </li> <li> <p>None (2025-04-02)</p> </li> <li> <p>None (2025-04-02)</p> </li> <li> <p>None (2025-04-02)</p> </li> <li> <p>None (2025-04-02)</p> </li> <li> <p>None (2025-04-02)</p> </li> <li> <p>None (2025-04-02)</p> </li> <li> <p>None (2025-04-02)</p> </li> </ol>"},{"location":"environment/#mkdocsyal-file-portion","title":"Mkdocs.yal file (portion)","text":"<pre><code># Basic site information\n\nsite_name: Codegen Lab # The name of your documentation site that appears in the header\n\nsite_description: AI-powered code generation tooling for efficient software development # Meta description for SEO\n\nsite_author: Malcolm Jones # Site author information\n\n# For GitHub Pages deployment\n</code></pre>"},{"location":"environment/#list-env-object","title":"List env object","text":"<pre><code>{'J2_STRING': &lt;mkdocs.config.config_options.Type object at 0x7f4f390c7f50&gt;,\n 'conf': {'config_file_path': '/home/runner/work/codegen-lab/codegen-lab/mkdocs.yml',\n          'copyright': 'Copyright &amp;copy; 2023 - 2025 Malcolm Jones',\n          'dev_addr': _IpAddressValue(host='127.0.0.1', port=8000),\n          'docs_dir': '/home/runner/work/codegen-lab/codegen-lab/docs',\n          'draft_docs': None,\n          'edit_uri': 'edit/main/docs/',\n          'edit_uri_template': None,\n          'exclude_docs': None,\n          'extra': {'social': [{'icon': 'fontawesome/brands/github',\n                                'link': 'https://github.com/bossjones/codegen-lab'}]},\n          'extra_css': ['assets/_mkdocstrings.css'],\n          'extra_javascript': [],\n          'extra_templates': [],\n          'google_analytics': None,\n          'hooks': {},\n          'markdown_extensions': ['toc',\n                                  'tables',\n                                  'fenced_code',\n                                  'abbr',\n                                  'admonition',\n                                  'attr_list',\n                                  'neoteroi.cards',\n                                  'pymdownx.details',\n                                  'pymdownx.emoji',\n                                  'pymdownx.highlight',\n                                  'pymdownx.inlinehilite',\n                                  'pymdownx.magiclink',\n                                  'pymdownx.snippets',\n                                  'pymdownx.superfences',\n                                  'pymdownx.tabbed',\n                                  &lt;mkdocs_autorefs._internal.references.AutorefsExtension object at 0x7f4f3a05d070&gt;,\n                                  &lt;mkdocstrings._internal.extension.MkdocstringsExtension object at 0x7f4f38db6210&gt;],\n          'mdx_configs': {'pymdownx.emoji': {'emoji_generator': &lt;function to_svg at 0x7f4f3a6b9620&gt;,\n                                             'emoji_index': &lt;function twemoji at 0x7f4f3a647e20&gt;},\n                          'pymdownx.superfences': {'custom_fences': [{'class': 'mermaid',\n                                                                      'format': functools.partial(&lt;function fence_mermaid at 0x7f4f3a1e5620&gt;, custom=True),\n                                                                      'name': 'mermaid'}]},\n                          'pymdownx.tabbed': {'alternate_style': True},\n                          'toc': {'permalink': True}},\n          'nav': None,\n          'not_in_nav': None,\n          'pages': None,\n          'plugins': {'autorefs': &lt;mkdocs_autorefs._internal.plugin.AutorefsPlugin object at 0x7f4f39cdcb00&gt;,\n                      'awesome-pages': &lt;mkdocs_awesome_pages_plugin.plugin.AwesomePagesPlugin object at 0x7f4f3a8ee1b0&gt;,\n                      'ezlinks': &lt;mkdocs_ezlinks_plugin.plugin.EzLinksPlugin object at 0x7f4f39ac7740&gt;,\n                      'git-authors': &lt;mkdocs_git_authors_plugin.plugin.GitAuthorsPlugin object at 0x7f4f39318440&gt;,\n                      'git-revision-date-localized': &lt;mkdocs_git_revision_date_localized_plugin.plugin.GitRevisionDateLocalizedPlugin object at 0x7f4f39bd2180&gt;,\n                      'macros': &lt;mkdocs_macros.plugin.MacrosPlugin object at 0x7f4f391cdd30&gt;,\n                      'material/search': &lt;material.plugins.search.plugin.SearchPlugin object at 0x7f4f38db7830&gt;,\n                      'material/tags': &lt;material.plugins.tags.plugin.TagsPlugin object at 0x7f4f38cf1b80&gt;,\n                      'mermaid2': &lt;mermaid2.plugin.MarkdownMermaidPlugin object at 0x7f4f3912dfd0&gt;,\n                      'mkdocstrings': &lt;mkdocstrings._internal.plugin.MkdocstringsPlugin object at 0x7f4f38f79670&gt;},\n          'remote_branch': 'gh-pages',\n          'remote_name': 'origin',\n          'repo_name': 'bossjones/codegen-lab',\n          'repo_url': 'https://github.com/bossjones/codegen-lab',\n          'site_author': 'Malcolm Jones',\n          'site_description': 'AI-powered code generation tooling for '\n                              'efficient software development',\n          'site_dir': '/home/runner/work/codegen-lab/codegen-lab/site',\n          'site_name': 'Codegen Lab',\n          'site_url': 'https://bossjones.github.io/codegen-lab/docs/',\n          'strict': False,\n          'theme': Theme(name='material', dirs=['/home/runner/work/codegen-lab/codegen-lab/true/lib/python3.12/site-packages/material/templates', '/home/runner/work/codegen-lab/codegen-lab/true/lib/python3.12/site-packages/mkdocs/templates'], static_templates={'sitemap.xml', '404.html'}, name='material', locale=Locale('en'), language='en', direction=None, features=['content.action.edit', 'content.action.view', 'content.code.copy', 'content.code.select', 'content.tooltips', 'navigation.footer', 'search.share'], font={'text': 'Roboto', 'code': 'Roboto Mono'}, icon=None, favicon='assets/images/favicon.png', palette={'primary': 'indigo', 'accent': 'indigo'}),\n          'use_directory_urls': True,\n          'validation': {'links': {'absolute_links': 20,\n                                   'anchors': 20,\n                                   'not_found': 30,\n                                   'unrecognized_links': 20},\n                         'nav': {'absolute_links': 20,\n                                 'not_found': 30,\n                                 'omitted_files': 20}},\n          'watch': ['/home/runner/work/codegen-lab/codegen-lab/mkdocs_macro_plugin.py',\n                    '/home/runner/work/codegen-lab/codegen-lab/docs_templates']},\n 'config': {'force_render_paths': '',\n            'include_dir': '',\n            'include_yaml': [],\n            'j2_block_end_string': '',\n            'j2_block_start_string': '',\n            'j2_comment_end_string': '',\n            'j2_comment_start_string': '',\n            'j2_variable_end_string': '',\n            'j2_variable_start_string': '',\n            'module_name': 'mkdocs_macro_plugin',\n            'modules': [],\n            'on_error_fail': False,\n            'on_undefined': 'keep',\n            'render_by_default': True,\n            'verbose': True},\n 'config_class': &lt;class 'mkdocs.config.base.LegacyConfig'&gt;,\n 'config_scheme': (('module_name',\n                    &lt;mkdocs.config.config_options.Type object at 0x7f4f391b26c0&gt;),\n                   ('modules',\n                    &lt;mkdocs.config.config_options.Type object at 0x7f4f38f7b050&gt;),\n                   ('render_by_default',\n                    &lt;mkdocs.config.config_options.Type object at 0x7f4f38f79d90&gt;),\n                   ('force_render_paths',\n                    &lt;mkdocs.config.config_options.Type object at 0x7f4f390c7f50&gt;),\n                   ('include_dir',\n                    &lt;mkdocs.config.config_options.Type object at 0x7f4f390c7f50&gt;),\n                   ('include_yaml',\n                    &lt;mkdocs.config.config_options.Type object at 0x7f4f38f79dc0&gt;),\n                   ('j2_block_start_string',\n                    &lt;mkdocs.config.config_options.Type object at 0x7f4f390c7f50&gt;),\n                   ('j2_block_end_string',\n                    &lt;mkdocs.config.config_options.Type object at 0x7f4f390c7f50&gt;),\n                   ('j2_variable_start_string',\n                    &lt;mkdocs.config.config_options.Type object at 0x7f4f390c7f50&gt;),\n                   ('j2_variable_end_string',\n                    &lt;mkdocs.config.config_options.Type object at 0x7f4f390c7f50&gt;),\n                   ('j2_comment_start_string',\n                    &lt;mkdocs.config.config_options.Type object at 0x7f4f390c7f50&gt;),\n                   ('j2_comment_end_string',\n                    &lt;mkdocs.config.config_options.Type object at 0x7f4f390c7f50&gt;),\n                   ('on_undefined',\n                    &lt;mkdocs.config.config_options.Type object at 0x7f4f38f79e80&gt;),\n                   ('on_error_fail',\n                    &lt;mkdocs.config.config_options.Type object at 0x7f4f38f9e120&gt;),\n                   ('verbose',\n                    &lt;mkdocs.config.config_options.Type object at 0x7f4f38f9ec90&gt;)),\n 'env': &lt;jinja2.environment.Environment object at 0x7f4f38a820c0&gt;,\n 'filter': &lt;bound method MacrosPlugin.filter of &lt;mkdocs_macros.plugin.MacrosPlugin object at 0x7f4f391cdd30&gt;&gt;,\n 'filters': {'pretty': &lt;function define_env.&lt;locals&gt;.pretty at 0x7f4f38a8b1a0&gt;,\n             'relative_url': &lt;function define_env.&lt;locals&gt;.relative_url at 0x7f4f38a8b420&gt;},\n 'force_page_rendering': &lt;bound method MacrosPlugin.force_page_rendering of &lt;mkdocs_macros.plugin.MacrosPlugin object at 0x7f4f391cdd30&gt;&gt;,\n 'load_config': &lt;bound method BasePlugin.load_config of &lt;mkdocs_macros.plugin.MacrosPlugin object at 0x7f4f391cdd30&gt;&gt;,\n 'macro': &lt;bound method MacrosPlugin.macro of &lt;mkdocs_macros.plugin.MacrosPlugin object at 0x7f4f391cdd30&gt;&gt;,\n 'macros': {'context': &lt;function define_env.&lt;locals&gt;.context at 0x7f4f38a8b240&gt;,\n            'doc_env': &lt;function define_env.&lt;locals&gt;.doc_env at 0x7f4f38a8b740&gt;,\n            'fix_url': &lt;function fix_url at 0x7f4f38f84400&gt;,\n            'include_file': &lt;function define_env.&lt;locals&gt;.include_file at 0x7f4f38a8b6a0&gt;,\n            'macros_info': &lt;function define_env.&lt;locals&gt;.macros_info at 0x7f4f38a8b2e0&gt;,\n            'now': &lt;function define_env.&lt;locals&gt;.now at 0x7f4f38a8b380&gt;,\n            'render_with_page_template': &lt;function define_env.&lt;locals&gt;.render_with_page_template at 0x7f4f38a8b7e0&gt;},\n 'markdown': '# Environment\\n'\n             '\\n'\n             '{{ macros_info() }}\\n'\n             '\\n'\n             '\\n'\n             '## Updates\\n'\n             '{% for page in navigation.pages %}\\n'\n             '1. {{ page.title }} ({{ page.update_date }})\\n'\n             '{% endfor %}\\n'\n             '\\n'\n             '\\n'\n             '## Mkdocs.yal file (portion)\\n'\n             '\\n'\n             '```\\n'\n             \"{{ include_file('mkdocs.yml', 0, 5)}}\\n\"\n             '```\\n'\n             '\\n'\n             '## List env object\\n'\n             '\\n'\n             '```\\n'\n             '{{ doc_env() | pprint }}\\n'\n             '```\\n',\n 'on_config': &lt;bound method MacrosPlugin.on_config of &lt;mkdocs_macros.plugin.MacrosPlugin object at 0x7f4f391cdd30&gt;&gt;,\n 'on_nav': &lt;bound method MacrosPlugin.on_nav of &lt;mkdocs_macros.plugin.MacrosPlugin object at 0x7f4f391cdd30&gt;&gt;,\n 'on_page_markdown': &lt;bound method MacrosPlugin.on_page_markdown of &lt;mkdocs_macros.plugin.MacrosPlugin object at 0x7f4f391cdd30&gt;&gt;,\n 'on_post_build': &lt;bound method MacrosPlugin.on_post_build of &lt;mkdocs_macros.plugin.MacrosPlugin object at 0x7f4f391cdd30&gt;&gt;,\n 'on_pre_build': &lt;bound method MacrosPlugin.on_pre_build of &lt;mkdocs_macros.plugin.MacrosPlugin object at 0x7f4f391cdd30&gt;&gt;,\n 'on_serve': &lt;bound method MacrosPlugin.on_serve of &lt;mkdocs_macros.plugin.MacrosPlugin object at 0x7f4f391cdd30&gt;&gt;,\n 'page': Page(title='Environment', url='/codegen-lab/docs/environment/'),\n 'post_build_functions': [&lt;function on_post_build at 0x7f4f38a8b600&gt;],\n 'post_macro_functions': [],\n 'pre_macro_functions': [],\n 'project_dir': '/home/runner/work/codegen-lab/codegen-lab',\n 'raw_markdown': '# Environment\\n'\n                 '\\n'\n                 '{{ macros_info() }}\\n'\n                 '\\n'\n                 '\\n'\n                 '## Updates\\n'\n                 '{% for page in navigation.pages %}\\n'\n                 '1. {{ page.title }} ({{ page.update_date }})\\n'\n                 '{% endfor %}\\n'\n                 '\\n'\n                 '\\n'\n                 '## Mkdocs.yal file (portion)\\n'\n                 '\\n'\n                 '```\\n'\n                 \"{{ include_file('mkdocs.yml', 0, 5)}}\\n\"\n                 '```\\n'\n                 '\\n'\n                 '## List env object\\n'\n                 '\\n'\n                 '```\\n'\n                 '{{ doc_env() | pprint }}\\n'\n                 '```\\n',\n 'render': &lt;bound method MacrosPlugin.render of &lt;mkdocs_macros.plugin.MacrosPlugin object at 0x7f4f391cdd30&gt;&gt;,\n 'start_chatting': &lt;bound method MacrosPlugin.start_chatting of &lt;mkdocs_macros.plugin.MacrosPlugin object at 0x7f4f391cdd30&gt;&gt;,\n 'supports_multiple_instances': False,\n 'variables': {'config': {'config_file_path': '/home/runner/work/codegen-lab/codegen-lab/mkdocs.yml',\n                          'copyright': 'Copyright &amp;copy; 2023 - 2025 Malcolm '\n                                       'Jones',\n                          'dev_addr': _IpAddressValue(host='127.0.0.1', port=8000),\n                          'docs_dir': '/home/runner/work/codegen-lab/codegen-lab/docs',\n                          'draft_docs': None,\n                          'edit_uri': 'edit/main/docs/',\n                          'edit_uri_template': None,\n                          'exclude_docs': None,\n                          'extra': {'social': [{'icon': 'fontawesome/brands/github',\n                                                'link': 'https://github.com/bossjones/codegen-lab'}]},\n                          'extra_css': ['assets/_mkdocstrings.css'],\n                          'extra_javascript': [],\n                          'extra_templates': [],\n                          'google_analytics': None,\n                          'hooks': {},\n                          'markdown_extensions': ['toc',\n                                                  'tables',\n                                                  'fenced_code',\n                                                  'abbr',\n                                                  'admonition',\n                                                  'attr_list',\n                                                  'neoteroi.cards',\n                                                  'pymdownx.details',\n                                                  'pymdownx.emoji',\n                                                  'pymdownx.highlight',\n                                                  'pymdownx.inlinehilite',\n                                                  'pymdownx.magiclink',\n                                                  'pymdownx.snippets',\n                                                  'pymdownx.superfences',\n                                                  'pymdownx.tabbed',\n                                                  &lt;mkdocs_autorefs._internal.references.AutorefsExtension object at 0x7f4f3a05d070&gt;,\n                                                  &lt;mkdocstrings._internal.extension.MkdocstringsExtension object at 0x7f4f38db6210&gt;],\n                          'mdx_configs': {'pymdownx.emoji': {'emoji_generator': &lt;function to_svg at 0x7f4f3a6b9620&gt;,\n                                                             'emoji_index': &lt;function twemoji at 0x7f4f3a647e20&gt;},\n                                          'pymdownx.superfences': {'custom_fences': [{'class': 'mermaid',\n                                                                                      'format': functools.partial(&lt;function fence_mermaid at 0x7f4f3a1e5620&gt;, custom=True),\n                                                                                      'name': 'mermaid'}]},\n                                          'pymdownx.tabbed': {'alternate_style': True},\n                                          'toc': {'permalink': True}},\n                          'nav': None,\n                          'not_in_nav': None,\n                          'pages': None,\n                          'plugins': {'autorefs': &lt;mkdocs_autorefs._internal.plugin.AutorefsPlugin object at 0x7f4f39cdcb00&gt;,\n                                      'awesome-pages': &lt;mkdocs_awesome_pages_plugin.plugin.AwesomePagesPlugin object at 0x7f4f3a8ee1b0&gt;,\n                                      'ezlinks': &lt;mkdocs_ezlinks_plugin.plugin.EzLinksPlugin object at 0x7f4f39ac7740&gt;,\n                                      'git-authors': &lt;mkdocs_git_authors_plugin.plugin.GitAuthorsPlugin object at 0x7f4f39318440&gt;,\n                                      'git-revision-date-localized': &lt;mkdocs_git_revision_date_localized_plugin.plugin.GitRevisionDateLocalizedPlugin object at 0x7f4f39bd2180&gt;,\n                                      'macros': &lt;mkdocs_macros.plugin.MacrosPlugin object at 0x7f4f391cdd30&gt;,\n                                      'material/search': &lt;material.plugins.search.plugin.SearchPlugin object at 0x7f4f38db7830&gt;,\n                                      'material/tags': &lt;material.plugins.tags.plugin.TagsPlugin object at 0x7f4f38cf1b80&gt;,\n                                      'mermaid2': &lt;mermaid2.plugin.MarkdownMermaidPlugin object at 0x7f4f3912dfd0&gt;,\n                                      'mkdocstrings': &lt;mkdocstrings._internal.plugin.MkdocstringsPlugin object at 0x7f4f38f79670&gt;},\n                          'remote_branch': 'gh-pages',\n                          'remote_name': 'origin',\n                          'repo_name': 'bossjones/codegen-lab',\n                          'repo_url': 'https://github.com/bossjones/codegen-lab',\n                          'site_author': 'Malcolm Jones',\n                          'site_description': 'AI-powered code generation '\n                                              'tooling for efficient software '\n                                              'development',\n                          'site_dir': '/home/runner/work/codegen-lab/codegen-lab/site',\n                          'site_name': 'Codegen Lab',\n                          'site_url': 'https://bossjones.github.io/codegen-lab/docs/',\n                          'strict': False,\n                          'theme': Theme(name='material', dirs=['/home/runner/work/codegen-lab/codegen-lab/true/lib/python3.12/site-packages/material/templates', '/home/runner/work/codegen-lab/codegen-lab/true/lib/python3.12/site-packages/mkdocs/templates'], static_templates={'sitemap.xml', '404.html'}, name='material', locale=Locale('en'), language='en', direction=None, features=['content.action.edit', 'content.action.view', 'content.code.copy', 'content.code.select', 'content.tooltips', 'navigation.footer', 'search.share'], font={'text': 'Roboto', 'code': 'Roboto Mono'}, icon=None, favicon='assets/images/favicon.png', palette={'primary': 'indigo', 'accent': 'indigo'}),\n                          'use_directory_urls': True,\n                          'validation': {'links': {'absolute_links': 20,\n                                                   'anchors': 20,\n                                                   'not_found': 30,\n                                                   'unrecognized_links': 20},\n                                         'nav': {'absolute_links': 20,\n                                                 'not_found': 30,\n                                                 'omitted_files': 20}},\n                          'watch': ['/home/runner/work/codegen-lab/codegen-lab/mkdocs_macro_plugin.py',\n                                    '/home/runner/work/codegen-lab/codegen-lab/docs_templates']},\n               'environment': {'jinja2_version': '3.1.5',\n                               'macros_plugin_version': '1.3.7',\n                               'mkdocs_version': '1.6.1',\n                               'python_version': '3.12.9',\n                               'system': 'Linux',\n                               'system_version': '6.8.0-1021-azure'},\n               'extra': {'social': [{'icon': 'fontawesome/brands/github',\n                                     'link': 'https://github.com/bossjones/codegen-lab'}]},\n               'files': &lt;mkdocs.structure.files.Files object at 0x7f4f38a81250&gt;,\n               'filters': {'pretty': &lt;function define_env.&lt;locals&gt;.pretty at 0x7f4f38a8b1a0&gt;,\n                           'relative_url': &lt;function define_env.&lt;locals&gt;.relative_url at 0x7f4f38a8b420&gt;},\n               'filters_builtin': {'abs': &lt;built-in function abs&gt;,\n                                   'attr': &lt;function do_attr at 0x7f4f3b00d260&gt;,\n                                   'batch': &lt;function do_batch at 0x7f4f3b007f60&gt;,\n                                   'capitalize': &lt;function do_capitalize at 0x7f4f3b0068e0&gt;,\n                                   'center': &lt;function do_center at 0x7f4f3b007100&gt;,\n                                   'count': &lt;built-in function len&gt;,\n                                   'd': &lt;function do_default at 0x7f4f3b006fc0&gt;,\n                                   'default': &lt;function do_default at 0x7f4f3b006fc0&gt;,\n                                   'dictsort': &lt;function do_dictsort at 0x7f4f3b006a20&gt;,\n                                   'e': &lt;function escape at 0x7f4f3b1c1300&gt;,\n                                   'escape': &lt;function escape at 0x7f4f3b1c1300&gt;,\n                                   'filesizeformat': &lt;function do_filesizeformat at 0x7f4f3b007740&gt;,\n                                   'first': &lt;function do_first at 0x7f4f3b007600&gt;,\n                                   'float': &lt;function do_float at 0x7f4f3b007c40&gt;,\n                                   'forceescape': &lt;function do_forceescape at 0x7f4f3b006480&gt;,\n                                   'format': &lt;function do_format at 0x7f4f3b007ce0&gt;,\n                                   'groupby': &lt;function do_groupby at 0x7f4f3b00c9a0&gt;,\n                                   'indent': &lt;function do_indent at 0x7f4f3b007920&gt;,\n                                   'int': &lt;function do_int at 0x7f4f3b007ba0&gt;,\n                                   'items': &lt;function do_items at 0x7f4f3b0067a0&gt;,\n                                   'join': &lt;function do_join at 0x7f4f3b0072e0&gt;,\n                                   'last': &lt;function do_last at 0x7f4f3b007420&gt;,\n                                   'length': &lt;built-in function len&gt;,\n                                   'list': &lt;function do_list at 0x7f4f3b00cea0&gt;,\n                                   'lower': &lt;function do_lower at 0x7f4f3b006700&gt;,\n                                   'map': &lt;function do_map at 0x7f4f3b00d940&gt;,\n                                   'max': &lt;function do_max at 0x7f4f3b006f20&gt;,\n                                   'min': &lt;function do_min at 0x7f4f3b006e80&gt;,\n                                   'pprint': &lt;function do_pprint at 0x7f4f3b0077e0&gt;,\n                                   'random': &lt;function do_random at 0x7f4f3b0076a0&gt;,\n                                   'reject': &lt;function do_reject at 0x7f4f3b00de40&gt;,\n                                   'rejectattr': &lt;function do_rejectattr at 0x7f4f3b00e340&gt;,\n                                   'replace': &lt;function do_replace at 0x7f4f3b0065c0&gt;,\n                                   'reverse': &lt;function do_reverse at 0x7f4f3b00d1c0&gt;,\n                                   'round': &lt;function do_round at 0x7f4f3b00c220&gt;,\n                                   'safe': &lt;function do_mark_safe at 0x7f4f3b00ccc0&gt;,\n                                   'select': &lt;function do_select at 0x7f4f3b00dbc0&gt;,\n                                   'selectattr': &lt;function do_selectattr at 0x7f4f3b00e0c0&gt;,\n                                   'slice': &lt;function do_slice at 0x7f4f3b00c180&gt;,\n                                   'sort': &lt;function do_sort at 0x7f4f3b006ac0&gt;,\n                                   'string': &lt;function soft_str at 0x7f4f3b1c1580&gt;,\n                                   'striptags': &lt;function do_striptags at 0x7f4f3b007e20&gt;,\n                                   'sum': &lt;function do_sum at 0x7f4f3b00cc20&gt;,\n                                   'title': &lt;function do_title at 0x7f4f3b006980&gt;,\n                                   'tojson': &lt;function do_tojson at 0x7f4f3b00e160&gt;,\n                                   'trim': &lt;function do_trim at 0x7f4f3b007d80&gt;,\n                                   'truncate': &lt;function do_truncate at 0x7f4f3b0079c0&gt;,\n                                   'unique': &lt;function do_unique at 0x7f4f3b006de0&gt;,\n                                   'upper': &lt;function do_upper at 0x7f4f3b006660&gt;,\n                                   'urlencode': &lt;function do_urlencode at 0x7f4f3b006520&gt;,\n                                   'urlize': &lt;function do_urlize at 0x7f4f3b007880&gt;,\n                                   'wordcount': &lt;function do_wordcount at 0x7f4f3b007b00&gt;,\n                                   'wordwrap': &lt;function do_wordwrap at 0x7f4f3b007a60&gt;,\n                                   'xmlattr': &lt;function do_xmlattr at 0x7f4f3b006840&gt;},\n               'git': {'author': 'Malcolm Jones',\n                       'author_email': 'bossjones@theblacktonystark.com',\n                       'commit': '8566747de893ad96d4c2ef05fbfd2610eeab4f9d',\n                       'committer': 'Malcolm Jones',\n                       'committer_email': 'bossjones@theblacktonystark.com',\n                       'date': datetime.datetime(2025, 4, 1, 22, 4, 34, tzinfo=tzoffset(None, -14400)),\n                       'date_ISO': 'Tue Apr 1 22:04:34 2025 -0400',\n                       'message': 'chore: Update documentation deployment '\n                                  'workflow in GitHub Actions\\n'\n                                  '\\n'\n                                  '- Modified the `docs.yml` workflow to skip '\n                                  'commitizen checks for gh-pages.\\n'\n                                  '- Configured Git credentials for the GitHub '\n                                  'Actions bot.\\n'\n                                  '- Added environment variable for '\n                                  'GITHUB_TOKEN during deployment.\\n'\n                                  '- Commented out unused steps for caching '\n                                  'and documentation building for clarity.',\n                       'raw': 'commit '\n                              '8566747de893ad96d4c2ef05fbfd2610eeab4f9d\\n'\n                              'Author: Malcolm Jones '\n                              '&lt;bossjones@theblacktonystark.com&gt;\\n'\n                              'Date:   Tue Apr 1 22:04:34 2025 -0400\\n'\n                              '\\n'\n                              '    chore: Update documentation deployment '\n                              'workflow in GitHub Actions\\n'\n                              '    \\n'\n                              '    - Modified the `docs.yml` workflow to skip '\n                              'commitizen checks for gh-pages.\\n'\n                              '    - Configured Git credentials for the GitHub '\n                              'Actions bot.\\n'\n                              '    - Added environment variable for '\n                              'GITHUB_TOKEN during deployment.\\n'\n                              '    - Commented out unused steps for caching '\n                              'and documentation building for clarity.',\n                       'root_dir': '/home/runner/work/codegen-lab/codegen-lab',\n                       'short_commit': '8566747',\n                       'short_tag': 'v0.1.0',\n                       'status': True,\n                       'tag': 'v0.1.0-8-g8566747'},\n               'macros': {'context': &lt;function define_env.&lt;locals&gt;.context at 0x7f4f38a8b240&gt;,\n                          'doc_env': &lt;function define_env.&lt;locals&gt;.doc_env at 0x7f4f38a8b740&gt;,\n                          'fix_url': &lt;function fix_url at 0x7f4f38f84400&gt;,\n                          'include_file': &lt;function define_env.&lt;locals&gt;.include_file at 0x7f4f38a8b6a0&gt;,\n                          'macros_info': &lt;function define_env.&lt;locals&gt;.macros_info at 0x7f4f38a8b2e0&gt;,\n                          'now': &lt;function define_env.&lt;locals&gt;.now at 0x7f4f38a8b380&gt;,\n                          'render_with_page_template': &lt;function define_env.&lt;locals&gt;.render_with_page_template at 0x7f4f38a8b7e0&gt;},\n               'navigation': &lt;mkdocs.structure.nav.Navigation object at 0x7f4f37e571a0&gt;,\n               'page': Page(title='Environment', url='/codegen-lab/docs/environment/'),\n               'plugin': {'force_render_paths': '',\n                          'include_dir': '',\n                          'include_yaml': [],\n                          'j2_block_end_string': '',\n                          'j2_block_start_string': '',\n                          'j2_comment_end_string': '',\n                          'j2_comment_start_string': '',\n                          'j2_variable_end_string': '',\n                          'j2_variable_start_string': '',\n                          'module_name': 'mkdocs_macro_plugin',\n                          'modules': [],\n                          'on_error_fail': False,\n                          'on_undefined': 'keep',\n                          'render_by_default': True,\n                          'verbose': True},\n               'social': [{'icon': 'fontawesome/brands/github',\n                           'link': 'https://github.com/bossjones/codegen-lab'}]}}\n</code></pre>"},{"location":"getting-started/","title":"Getting Started","text":"<p>This guide will help you get started with Codegen Lab.</p>"},{"location":"getting-started/#prerequisites","title":"Prerequisites","text":"<p>Before you begin, ensure you have the following installed:</p> <ul> <li>Python 3.10 or higher</li> <li>UV package manager</li> <li>Git</li> </ul>"},{"location":"getting-started/#installation","title":"Installation","text":"<ol> <li>Clone the repository:</li> </ol> <pre><code>git clone https://github.com/bossjones/codegen-lab.git\ncd codegen-lab\n</code></pre> <ol> <li>Set up a virtual environment:</li> </ol> <pre><code>uv venv --python 3.12.0\n</code></pre> <ol> <li>Activate the virtual environment:</li> </ol> <pre><code># On Unix or MacOS\nsource .venv/bin/activate\n\n# On Windows\n.venv\\Scripts\\activate\n</code></pre> <ol> <li>Install dependencies:</li> </ol> <pre><code>uv sync --frozen\n</code></pre>"},{"location":"getting-started/#verification","title":"Verification","text":"<p>Verify the installation by running:</p> <pre><code>python -m codegen_lab --version\n</code></pre>"},{"location":"getting-started/#next-steps","title":"Next Steps","text":"<p>Now that you have Codegen Lab installed, you can:</p> <ol> <li>Explore the User Guide for detailed usage instructions</li> <li>Check the API Reference for technical details</li> <li>Start using Codegen Lab in your projects</li> </ol>"},{"location":"inspiration/","title":"inspiration","text":"<ul> <li>bmadcode/cursor-auto-rules-agile-workflow</li> </ul>"},{"location":"pre_commit/","title":"pre-commit install hook-types","text":"<p>The commands <code>uv run pre-commit install --hook-type=pre-push</code> and <code>uv run pre-commit install --hook-type=commit-msg</code> are used to install specific Git hooks provided by the <code>pre-commit</code> framework.</p> <ol> <li><code>uv run pre-commit install --hook-type=pre-push</code>:</li> <li>Installs the <code>pre-push</code> Git hook.</li> <li> <p>This hook runs automatically before a <code>git push</code> operation. It is typically used for checks that may take longer to execute, such as linting, running tests, or ensuring compliance with project standards before code is pushed to a remote repository[1][5][8].</p> </li> <li> <p><code>uv run pre-commit install --hook-type=commit-msg</code>:</p> </li> <li>Installs the <code>commit-msg</code> Git hook.</li> <li>This hook runs automatically when a commit message is created. It is often used to enforce commit message formatting standards (e.g., conventional commits) or validate the content of the commit message[1][7][8].</li> </ol> <p>By using these commands, developers can ensure automated quality checks at different stages of the Git workflow, improving code consistency and reducing errors.</p>"},{"location":"prompt_library_mcp_server/","title":"Cursor Rules Prompt Library","text":"<p>This FastMCP server exposes cursor rules as resources and provides a prompt endpoint for creating custom cursor rules based on user input.</p>"},{"location":"prompt_library_mcp_server/#features","title":"Features","text":"<ul> <li>Resource Endpoints:</li> <li><code>cursor-rules://list</code> - List all available cursor rules</li> <li><code>cursor-rule://{name}</code> - Get a cursor rule by name (parsed structure)</li> <li> <p><code>cursor-rule-raw://{name}</code> - Get the raw content of a cursor rule by name</p> </li> <li> <p>Prompt Endpoints:</p> </li> <li><code>repo-analysis</code> - Analyze a repository to gather information for cursor rule creation</li> <li> <p><code>generate-cursor-rule</code> - Generate a custom cursor rule based on repository information</p> </li> <li> <p>Tool Endpoints:</p> </li> <li><code>save_cursor_rule</code> - Save a cursor rule to the cursor rules directory</li> </ul>"},{"location":"prompt_library_mcp_server/#usage","title":"Usage","text":""},{"location":"prompt_library_mcp_server/#running-the-server","title":"Running the Server","text":"<pre><code>python -m examples.fastmcp.prompt_library\n</code></pre>"},{"location":"prompt_library_mcp_server/#listing-cursor-rules","title":"Listing Cursor Rules","text":"<pre><code>from mcp.client import Client\nfrom pydantic import AnyUrl\n\nasync with Client() as client:\n    result = await client.read_resource(AnyUrl(\"cursor-rules://list\"))\n    rules = json.loads(result.contents[0].text)\n    for rule in rules:\n        print(f\"{rule['name']}: {rule['description']}\")\n</code></pre>"},{"location":"prompt_library_mcp_server/#getting-a-cursor-rule","title":"Getting a Cursor Rule","text":"<pre><code>from mcp.client import Client\nfrom pydantic import AnyUrl\n\nasync with Client() as client:\n    result = await client.read_resource(AnyUrl(\"cursor-rule://anthropic-chain-of-thought\"))\n    rule = json.loads(result.contents[0].text)\n    print(f\"Title: {rule['title']}\")\n    print(f\"Description: {rule['description']}\")\n    print(f\"Rule: {rule['rule']['name']}\")\n</code></pre>"},{"location":"prompt_library_mcp_server/#analyzing-a-repository","title":"Analyzing a Repository","text":"<pre><code>from mcp.client import Client\n\nasync with Client() as client:\n    result = await client.get_prompt(\"repo-analysis\", {\n        \"repo_description\": \"A Python web application using FastAPI and SQLAlchemy\",\n        \"main_languages\": \"Python\",\n        \"file_patterns\": \"*.py\",\n        \"key_features\": \"API, Database, Authentication\"\n    })\n\n    # Send the prompt to an LLM for completion\n    completion = await client.create_message(result.messages)\n    print(completion.content[0].text)\n</code></pre>"},{"location":"prompt_library_mcp_server/#generating-a-custom-cursor-rule","title":"Generating a Custom Cursor Rule","text":"<pre><code>from mcp.client import Client\nimport json\n\nasync with Client() as client:\n    result = await client.get_prompt(\"generate-cursor-rule\", {\n        \"rule_name\": \"fastapi-best-practices\",\n        \"description\": \"Best practices for FastAPI applications\",\n        \"file_patterns\": \"*.py\",\n        \"content_patterns\": \"fastapi, APIRouter, Depends\",\n        \"action_message\": \"When using FastAPI, follow these best practices:\\n\\n1. Use dependency injection\\n2. Validate input with Pydantic models\\n3. Use proper status codes\\n4. Document your endpoints\",\n        \"examples\": json.dumps([\n            {\n                \"input\": \"# Bad: No input validation\\n@app.post('/users')\\ndef create_user(user_data: dict):\\n    return db.create_user(user_data)\\n\\n# Good: Proper input validation\\n@app.post('/users', status_code=201)\\ndef create_user(user: UserCreate):\\n    return db.create_user(user.dict())\",\n                \"output\": \"Using Pydantic models for input validation\"\n            }\n        ]),\n        \"tags\": \"fastapi, best-practices, web-development\",\n        \"priority\": \"high\"\n    })\n\n    # Send the prompt to an LLM for completion\n    completion = await client.create_message(result.messages)\n    print(completion.content[0].text)\n\n    # Save the generated rule\n    rule_content = completion.content[0].text.split(\"```markdown\\n\")[1].split(\"```\")[0]\n    result = await client.call_tool(\"save_cursor_rule\", {\n        \"rule_name\": \"fastapi-best-practices\",\n        \"rule_content\": rule_content\n    })\n    print(result.content[0].text)\n</code></pre>"},{"location":"prompt_library_mcp_server/#development","title":"Development","text":""},{"location":"prompt_library_mcp_server/#running-tests","title":"Running Tests","text":"<pre><code>pytest tests/unittests/test_prompt_library.py -v\n</code></pre>"},{"location":"prompt_library_mcp_server/#adding-new-features","title":"Adding New Features","text":"<ul> <li>To add a new resource endpoint, use the <code>@mcp.resource()</code> decorator</li> <li>To add a new prompt endpoint, use the <code>@mcp.prompt()</code> decorator</li> <li>To add a new tool endpoint, use the <code>@mcp.tool()</code> decorator</li> </ul>"},{"location":"prompt_library_mcp_server/#project-structure","title":"Project Structure","text":"<ul> <li><code>examples/fastmcp/prompt_library.py</code> - Main FastMCP server implementation</li> <li><code>tests/unittests/test_prompt_library.py</code> - Tests for the FastMCP server</li> <li><code>hack/drafts/cursor_rules/</code> - Directory containing cursor rule files</li> </ul>"},{"location":"rule-deps/","title":"Cursor Rules Dependency Graph","text":"<p>This document visualizes the relationships and dependencies between cursor rules in the project.</p>"},{"location":"rule-deps/#rule-relationships","title":"Rule Relationships","text":"<pre><code>graph TD\n    %% Core Rules\n    core_rules[Core Rules]\n    core_rules --&gt; rule_gen[Rule Generating Agent]\n    core_rules --&gt; prd_gen[PRD Prompt Generator]\n    core_rules --&gt; rules_mig[Rules Migration Agent]\n\n    %% Development Workflow\n    greenfield[Greenfield Development]\n    greenfield --&gt; greenfield_doc[Documentation Standards]\n    greenfield --&gt; greenfield_exec[Execution Best Practices]\n    greenfield --&gt; greenfield_idx[Greenfield Index]\n    greenfield --&gt; tdd[Test-Driven Development]\n\n    %% Testing Rules\n    testing[Testing Framework]\n    testing --&gt; pytest_loop[Pytest Loop]\n    testing --&gt; pytest_suggest[Pytest Suggest 3 Fixes]\n    testing --&gt; test_gen[Test Generator]\n    testing --&gt; fastmcp_testing[FastMCP Testing]\n\n    %% Code Analysis &amp; Modification\n    code_analysis[Code Analysis]\n    code_analysis --&gt; code_context[Code Context Gatherer]\n    code_analysis --&gt; repo_analyzer[Repository Analyzer]\n    code_analysis --&gt; repomix[Repomix Tool]\n    code_analysis --&gt; explain_code_mod[Explain Code Modification]\n\n    %% Development Tools\n    dev_tools[Development Tools]\n    dev_tools --&gt; iterative_dev[Iterative Development]\n    dev_tools --&gt; iterative_debug[Iterative Debug Fix]\n    dev_tools --&gt; incremental_task[Incremental Task Planner]\n    dev_tools --&gt; avoid_debug_loops[Avoid Debug Loops]\n\n    %% Documentation\n    docs[Documentation]\n    docs --&gt; changelog[Changelog Management]\n    docs --&gt; cheatsheet[Cheatsheet Creation]\n    docs --&gt; markdown_auto[Markdown Auto-formatting]\n    docs --&gt; update_md_lists[Update Markdown Lists]\n\n    %% MCP Related\n    mcp[MCP Framework]\n    mcp --&gt; mcp_spec[MCP Specification]\n    mcp --&gt; mcpclient[MCP Client]\n    mcp --&gt; fastmcp[FastMCP]\n    mcp --&gt; fastmcp_tools[FastMCP Tools]\n    mcp --&gt; fastmcp_audit[FastMCP Audit Args]\n    mcp --&gt; fastmcp_fixer[FastMCP Fixer]\n\n    %% Package Management\n    pkg_mgmt[Package Management]\n    pkg_mgmt --&gt; uv[UV Package Manager]\n    pkg_mgmt --&gt; uv_workspace[UV Workspace]\n\n    %% Project Organization\n    proj_org[Project Organization]\n    proj_org --&gt; project_layout[Project Layout]\n    proj_org --&gt; python_rules[Python Rules]\n    proj_org --&gt; python_refactor[Python Refactor]\n\n    %% Tool Integration\n    tools[Tool Integration]\n    tools --&gt; chezmoi[Chezmoi]\n    tools --&gt; sheldon[Sheldon]\n    tools --&gt; gh_action_security[GitHub Action Security]\n    tools --&gt; ruff[Ruff]\n\n    %% Thinking Patterns\n    thinking[Thinking Patterns]\n    thinking --&gt; anthropic_cot[Anthropic Chain of Thought]\n    thinking --&gt; tree_of_thought[Tree of Thought]\n\n    %% Dependencies\n    greenfield --&gt; tdd\n    test_gen --&gt; pytest_loop\n    iterative_dev --&gt; tdd\n    python_refactor --&gt; tdd\n    fastmcp_testing --&gt; pytest_loop\n    code_context --&gt; repo_analyzer\n    repomix --&gt; code_context\n    iterative_debug --&gt; avoid_debug_loops\n    markdown_auto --&gt; update_md_lists\n    mcpclient --&gt; mcp_spec\n    fastmcp --&gt; mcp_spec\n    fastmcp_tools --&gt; fastmcp\n    fastmcp_audit --&gt; fastmcp\n    fastmcp_fixer --&gt; fastmcp\n    uv_workspace --&gt; uv\n    python_rules --&gt; tdd\n    gh_action_security --&gt; project_layout\n</code></pre>"},{"location":"rule-deps/#key-relationships","title":"Key Relationships","text":"<ol> <li>Core Rules: Form the foundation for rule generation and management</li> <li>Development Workflow: Centers around Greenfield development and TDD practices</li> <li>Testing Framework: Interconnected testing tools and practices</li> <li>Code Analysis: Tools for understanding and modifying code</li> <li>Development Tools: Iterative development and debugging utilities</li> <li>Documentation: Standards and tools for maintaining documentation</li> <li>MCP Framework: Model Context Protocol implementation and tools</li> <li>Package Management: UV package manager and workspace organization</li> <li>Project Organization: Overall project structure and standards</li> <li>Tool Integration: External tool configuration and security</li> <li>Thinking Patterns: Cognitive frameworks for problem-solving</li> </ol>"},{"location":"rule-deps/#notes","title":"Notes","text":"<ul> <li>All rules ultimately contribute to maintaining code quality and development efficiency</li> <li>Testing rules have strong dependencies on TDD practices</li> <li>Documentation rules ensure consistent standards across the project</li> <li>MCP-related rules form a cohesive framework for model interaction</li> <li>Package management rules handle dependency organization</li> <li>Security rules integrate with various aspects of the project</li> </ul>"},{"location":"troubleshooting/","title":"Troubleshooting","text":"<p>This page provides solutions to common issues you might encounter when using Codegen Lab.</p>"},{"location":"troubleshooting/#installation-issues","title":"Installation Issues","text":""},{"location":"troubleshooting/#python-version-compatibility","title":"Python Version Compatibility","text":"<p>Issue: Error indicating an incompatible Python version.</p> <p>Solution: Codegen Lab requires Python 3.10 or higher. Upgrade your Python installation or use a tool like pyenv to manage multiple Python versions.</p> <pre><code># Install pyenv (macOS)\nbrew install pyenv\n\n# Install Python 3.12 with pyenv\npyenv install 3.12.0\n\n# Set Python 3.12 as the local version for this project\npyenv local 3.12.0\n</code></pre>"},{"location":"troubleshooting/#dependency-conflicts","title":"Dependency Conflicts","text":"<p>Issue: Dependency resolution failures or conflicts during installation.</p> <p>Solution: Try reinstalling with the <code>--reinstall</code> flag or in a fresh virtual environment.</p> <pre><code># Using UV (recommended)\nuv sync --frozen --reinstall\n\n# Alternative: Create a fresh environment\nrm -rf .venv\nuv venv --python 3.12.0\nsource .venv/bin/activate\nuv sync --frozen\n</code></pre>"},{"location":"troubleshooting/#runtime-issues","title":"Runtime Issues","text":""},{"location":"troubleshooting/#import-errors","title":"Import Errors","text":"<p>Issue: <code>ModuleNotFoundError</code> or similar import errors when running Codegen Lab.</p> <p>Solution: Ensure you've activated the virtual environment and installed all dependencies.</p> <pre><code># Activate virtual environment\nsource .venv/bin/activate  # On Windows: .venv\\Scripts\\activate\n\n# Verify installation\nuv pip list\n</code></pre>"},{"location":"troubleshooting/#performance-issues","title":"Performance Issues","text":"<p>Issue: Code generation is slow or unstable.</p> <p>Solution:</p> <ol> <li>Check your internet connection if using cloud-based models</li> <li>Verify system resources (RAM, CPU) are sufficient</li> <li>Try reducing model complexity or batch size</li> <li>Update to the latest version of Codegen Lab</li> </ol> <pre><code># Update to latest version\nuv add --upgrade codegen-lab\n</code></pre>"},{"location":"troubleshooting/#model-specific-issues","title":"Model-Specific Issues","text":""},{"location":"troubleshooting/#api-rate-limits","title":"API Rate Limits","text":"<p>Issue: Encountering rate limits when using external API-based models.</p> <p>Solution: Implement exponential backoff retry logic or upgrade your API subscription tier.</p>"},{"location":"troubleshooting/#model-output-quality","title":"Model Output Quality","text":"<p>Issue: Poor quality code generation results.</p> <p>Solution:</p> <ol> <li>Improve your prompts with more context and examples</li> <li>Try a different model or adjust temperature settings</li> <li>Fine-tune the model on your specific use case (if applicable)</li> </ol>"},{"location":"troubleshooting/#environment-and-configuration-issues","title":"Environment and Configuration Issues","text":""},{"location":"troubleshooting/#configuration-file-not-found","title":"Configuration File Not Found","text":"<p>Issue: Codegen Lab can't find your configuration file.</p> <p>Solution: Ensure your configuration file is in the correct location or explicitly specify the path.</p> <pre><code>python -m codegen_lab --config path/to/config.yaml\n</code></pre>"},{"location":"troubleshooting/#environment-variables-not-applied","title":"Environment Variables Not Applied","text":"<p>Issue: Environment variable configurations aren't being applied.</p> <p>Solution: Verify environment variables are correctly set and take precedence over config files.</p> <pre><code># Set environment variables\nexport CODEGEN_MODEL_NAME=\"gpt-4\"\nexport CODEGEN_DEBUG=true\n\n# Verify environment variables\necho $CODEGEN_MODEL_NAME\n</code></pre>"},{"location":"troubleshooting/#getting-further-help","title":"Getting Further Help","text":"<p>If you encounter issues not covered in this guide:</p> <ol> <li>Check the GitHub Issues for similar problems and solutions</li> <li>Open a new issue with detailed information about your problem</li> <li>Join the community discussion in Discussions</li> </ol>"},{"location":"workflow-rules/","title":"Cursor Workflow Rules","text":"<p>This project has been updated to use the auto rule generator from cursor-auto-rules-agile-workflow.</p> <p>Note: This script can be safely re-run at any time to update the template rules to their latest versions. It will not impact or overwrite any custom rules you've created.</p>"},{"location":"workflow-rules/#core-features","title":"Core Features","text":"<ul> <li>Automated rule generation</li> <li>Standardized documentation formats</li> <li>Supports all 4 Note Types automatically</li> <li>AI behavior control and optimization</li> <li>Flexible workflow integration options</li> </ul>"},{"location":"workflow-rules/#getting-started","title":"Getting Started","text":"<ol> <li>Review the templates in `xnotes/`</li> <li>Choose your preferred workflow approach</li> <li>Start using the AI with confidence!</li> </ol> <p>For demos and tutorials, visit: BMad Code Videos</p>"},{"location":"cursor-auto-rules-agile-workflow/","title":"Cursor Auto Rules Agile Workflow","text":"<p>Welcome to the documentation for integrating <code>cursor-auto-rules-agile-workflow</code> with your projects. This guide will help you implement a structured, AI-assisted agile development workflow in both greenfield (new) and brownfield (existing) projects using Cursor.</p>"},{"location":"cursor-auto-rules-agile-workflow/#documentation-structure","title":"\ud83d\udcda Documentation Structure","text":"<p>This documentation is organized into several sections for easy navigation:</p> <ul> <li>Agile Workflow Guide - Comprehensive guide to the agile workflow system</li> <li>Cursor Rules Guide - Details about cursor rules implementation</li> <li>Templates Guide - Information about available templates</li> <li>Workflows Guide - Specific workflow implementations</li> <li>Notes Guide - Flexible notepad-based implementation</li> </ul>"},{"location":"cursor-auto-rules-agile-workflow/#quick-start","title":"\ud83d\ude80 Quick Start","text":""},{"location":"cursor-auto-rules-agile-workflow/#for-greenfield-projects","title":"For Greenfield Projects","text":"<ol> <li> <p>Clone the repository:    <pre><code>gh repo clone bmadcode/cursor-auto-rules-agile-workflow\n</code></pre></p> </li> <li> <p>Initialize the workflow:    <pre><code># Copy the rules and templates to your project\ncp -r cursor-auto-rules-agile-workflow/.cursor/* your-project/.cursor/\n</code></pre></p> </li> <li> <p>Start with the Product Requirements Document (PRD):</p> </li> <li>Create <code>.ai/prd.md</code> using Cursor's AI assistance</li> <li>Follow the structured workflow in Agile Workflow Guide</li> </ol>"},{"location":"cursor-auto-rules-agile-workflow/#for-brownfield-projects","title":"For Brownfield Projects","text":"<ol> <li> <p>Clone and initialize as above</p> </li> <li> <p>Additional setup:    <pre><code># Create initial project analysis\nmkdir -p .ai/analysis\n# Use Cursor's AI to analyze existing codebase\n</code></pre></p> </li> <li> <p>Integration steps:</p> </li> <li>Review existing architecture</li> <li>Create migration plan</li> <li>Follow brownfield-specific guidelines in documentation</li> </ol>"},{"location":"cursor-auto-rules-agile-workflow/#implementation-options","title":"\ud83d\udd27 Implementation Options","text":"<ol> <li>Rule-Based Implementation (Recommended)</li> <li>Automatic standards enforcement</li> <li>Consistent structure</li> <li> <p>Located in <code>.cursor/rules/workflows/workflow-agile-manual</code></p> </li> <li> <p>Notepad-Based Implementation</p> </li> <li>Flexible and lightweight</li> <li>Ideal for focused sessions</li> <li>Uses <code>xnotes/</code> templates</li> </ol>"},{"location":"cursor-auto-rules-agile-workflow/#key-features","title":"\ud83d\udccb Key Features","text":"<ul> <li>Structured Agile workflow with AI assistance</li> <li>Seamless integration with Cursor's AI capabilities</li> <li>Comprehensive documentation and templates</li> <li>Support for both new and existing projects</li> <li>Test-Driven Development (TDD) integration</li> <li>Automated documentation maintenance</li> </ul>"},{"location":"cursor-auto-rules-agile-workflow/#best-practices","title":"\ud83c\udfaf Best Practices","text":"<ol> <li>Documentation</li> <li>Keep PRD and Architecture documents updated</li> <li>Document significant decisions</li> <li> <p>Maintain clear implementation notes</p> </li> <li> <p>Development</p> </li> <li>Follow Test-Driven Development</li> <li>Regular status updates</li> <li> <p>Consistent commit messages</p> </li> <li> <p>AI Integration</p> </li> <li>Leverage AI for planning and implementation</li> <li>Use appropriate context levels</li> <li>Regular progress tracking</li> </ol>"},{"location":"cursor-auto-rules-agile-workflow/#detailed-documentation","title":"\ud83d\udcd6 Detailed Documentation","text":"<p>For more detailed information about specific aspects of the workflow, please refer to the individual documentation files linked above.</p>"},{"location":"cursor-auto-rules-agile-workflow/#contributing","title":"\ud83e\udd1d Contributing","text":"<p>Contributions are welcome! Please read our Contributing Guidelines for details on how to submit pull requests.</p>"},{"location":"cursor-auto-rules-agile-workflow/#license","title":"\ud83d\udcc4 License","text":"<p>This project is licensed under the MIT License - see the LICENSE file for details.</p>"},{"location":"cursor-auto-rules-agile-workflow/agile-readme/","title":"Cursor Agile Workflow Documentation","text":"<p>This document provides comprehensive documentation for the Agile workflow system integrated with Cursor's AI capabilities. The workflow is designed to maintain project focus and memory and ensure consistent progress through a structured approach to development.</p>"},{"location":"cursor-auto-rules-agile-workflow/agile-readme/#overview","title":"Overview","text":"<p>The Agile-Cursor workflow combines traditional Agile methodologies with AI-assisted development to create a powerful, efficient development process. It can be utilized in two primary ways:</p> <ol> <li> <p>Rule-Based Implementation (Automatic)</p> </li> <li> <p>Uses <code>.cursor/rules/workflows/workflow-agile-manual</code> and <code>.cursor/templates</code></p> </li> <li>Automatically applies standards to matching files</li> <li> <p>Provides consistent structure enforcement</p> </li> <li> <p>Notepad-Based Implementation (Flexible)</p> </li> <li>Uses <code>xnotes/</code> templates</li> <li>Lighter weight and more adaptable</li> <li>Ideal for focused development sessions</li> </ol>"},{"location":"cursor-auto-rules-agile-workflow/agile-readme/#work-item-hierarchy","title":"Work Item Hierarchy","text":"<pre><code>graph TD\n    E[Epic] --&gt; S[Story]\n    S --&gt; T[Task]\n    T --&gt; ST[Subtask]\n\n    style E fill:#f9f,stroke:#333,stroke-width:2px\n    style S fill:#dfd,stroke:#333,stroke-width:2px\n    style T fill:#bbf,stroke:#333,stroke-width:2px\n    style ST fill:#ffd,stroke:#333,stroke-width:2px\n</code></pre> <ol> <li> <p>Epics</p> </li> <li> <p>Large, self-contained features</p> </li> <li>Only one active at a time</li> <li> <p>Example: \"Online Matchmaking System\"</p> </li> <li> <p>Stories</p> </li> <li> <p>Smaller, implementable work units</p> </li> <li>Must belong to an Epic</li> <li> <p>Example: \"User Profile Creation\"</p> </li> <li> <p>Tasks</p> </li> <li> <p>Technical implementation steps</p> </li> <li>Clear completion criteria</li> <li> <p>Example: \"Implement Database Schema\"</p> </li> <li> <p>Subtasks</p> </li> <li>Granular work items</li> <li>Often includes test requirements</li> <li>Example: \"Write Unit Tests\"</li> </ol>"},{"location":"cursor-auto-rules-agile-workflow/agile-readme/#ai-project-plan-and-memory-structure-the-workflow-will-result-in","title":"AI Project Plan and Memory Structure the Workflow will result in","text":"<pre><code>.ai/\n\u251c\u2500\u2500 prd.md                 # Product Requirements Document\n\u251c\u2500\u2500 arch.md               # Architecture Decision Record\n\u251c\u2500\u2500 epic-1/              # Current Epic directory\n\u2502   \u251c\u2500\u2500 story-1.story.md  # Story files for Epic 1\n\u2502   \u251c\u2500\u2500 story-2.story.md\n\u2502   \u2514\u2500\u2500 story-3.story.md\n\u251c\u2500\u2500 epic-2/              # Future Epic directory\n\u2502   \u2514\u2500\u2500 ...\n\u2514\u2500\u2500 epic-3/              # Future Epic directory\n    \u2514\u2500\u2500 ...\n</code></pre>"},{"location":"cursor-auto-rules-agile-workflow/agile-readme/#workflow-phases","title":"Workflow Phases","text":""},{"location":"cursor-auto-rules-agile-workflow/agile-readme/#1-initial-planning","title":"1. Initial Planning","text":"<ul> <li>Focus on documentation and planning</li> <li>Only modify <code>.ai/</code>, docs, readme, and rules</li> <li>Required approvals for PRD and then the Architecture</li> </ul>"},{"location":"cursor-auto-rules-agile-workflow/agile-readme/#2-development-phase","title":"2. Development Phase","text":"<ul> <li>Generates the first or next story and waits on approval</li> <li>Implementation of approved in progress story</li> <li>Task-by-task story execution</li> <li>Continuous testing and validation</li> </ul> <pre><code>graph LR\n    subgraph PLAN Phase\n        A[Project Idea] --&gt; B[PRD Creation]\n        B --&gt; C[Architecture Design]\n        C --&gt; D[Epic Planning]\n        D --&gt; E[Story Definition]\n    end\n\n    subgraph ACT Phase\n        E --&gt; F[Story Implementation]\n        F --&gt; G[Testing &amp; Validation]\n        G --&gt; H[Story Completion]\n    end\n\n    subgraph Iteration\n        H --&gt; |Next Story|E\n        H --&gt; |Epic Complete|I[Epic Completion]\n        I --&gt; |Next Epic|D\n        I --&gt; |Project Complete|J[Release]\n    end\n\n    style A fill:#f9f,stroke:#333,stroke-width:2px\n    style B fill:#dfd,stroke:#333,stroke-width:2px\n    style C fill:#dfd,stroke:#333,stroke-width:2px\n    style D fill:#f9f,stroke:#333,stroke-width:2px\n    style E fill:#bbf,stroke:#333,stroke-width:2px\n    style F fill:#bbf,stroke:#333,stroke-width:2px\n    style G fill:#bbf,stroke:#333,stroke-width:2px\n    style H fill:#bbf,stroke:#333,stroke-width:2px\n    style I fill:#f9f,stroke:#333,stroke-width:2px\n    style J fill:#f9f,stroke:#333,stroke-width:2px\n</code></pre>"},{"location":"cursor-auto-rules-agile-workflow/agile-readme/#implementation-guidelines","title":"Implementation Guidelines","text":""},{"location":"cursor-auto-rules-agile-workflow/agile-readme/#story-implementation-process","title":"Story Implementation Process","text":"<ol> <li> <p>Initialization</p> </li> <li> <p>Verify <code>.ai</code> directory exists</p> </li> <li>Locate approved architecture and current story</li> <li> <p>Ensure story is properly marked as in-progress</p> </li> <li> <p>Development Flow</p> </li> <li> <p>Follow Test-Driven Development (TDD)</p> </li> <li>Update task/subtask status regularly</li> <li>Document all implementation notes</li> <li> <p>Record significant commands used</p> </li> <li> <p>Completion Requirements</p> </li> <li>All tests must pass</li> <li>Documentation must be updated</li> <li>User must approve completion</li> </ol>"},{"location":"cursor-auto-rules-agile-workflow/agile-readme/#critical-rules","title":"Critical Rules","text":"<p>\ud83d\udea8 Critical Rules:</p> <ul> <li>Never creates first story without PRD and Architecture approval</li> <li>Only one Epic can be in-progress at a time</li> <li>Only one Story can be in-progress at a time</li> <li>Stories must be implemented in PRD-specified order</li> <li>Never implement without story approval from user (marked as in progress on the story file)</li> </ul>"},{"location":"cursor-auto-rules-agile-workflow/agile-readme/#using-the-workflow","title":"Using the Workflow","text":"<p>The best way post 0.47.x+ of cursor is to use the rules based approach, with either manual, agent selection or always on rules. I prefer manual selection type rule for the workflows, so that they will not be in a context if I do not need it (explanation to follow).</p> <p>If I am starting a brand new project (with our without an existing code template) I have a few options:</p> <ul> <li>Use an external tool to generate the PRD (Such as ChatGPT Canvas or o3 mini Web UI or Google AI Studio)</li> <li>Use the workflow and agent in cursor to generate the PRD   (This comes down to personal preference and consideration of token burn within cursor)</li> </ul> <p>If I am doing this in cursor, I will start a new Agent chat with Claude 3.7 Thinking (or choose a different model if concerned about credit burn) and type something like:</p> <p><code>Lets follow the @workflow-agile-manual to create a PRD for a new project I want to create that will do XYZ, have the following features etc etc. Lets focus on just the MVP feature first will be to deliver X minimally, but lets also plan to have some epics for fast follows or future enhancements such as A B and C.</code></p> <p>As this can be quite lengthy, I will many times craft this prompt in the xnotes folder, and then paste it into the chat, ensuring that the @workflow is still properly added.</p> <p>Note: you can also modify the workflow-agile-manual to be Agent auto-selectable, this work reliably well also - you will just need to ensure the description you give it in the front matter will ensure its used when needed (PRD story and work implementation phases) - or potentially just make it an always rule. When starting out, its fine to make it an always rule, until your project grows to a very significant size, then I suggest turning it off manually, as at that point you might be just going in and making very targeted updates to specific files or features - and do not need the whole workflow as overhead - or you might want to instead select a different workflow (maybe a refactor workflow, a test workflow, an external MCP agent, etc...)</p> <p>The agent should generate a draft prd.md file in a .ai folder.</p> <p>I suggest at this point, you do not approve and jump right in - either in cursor with the agent, or an external tool - engage further with the agent to refine the document, have the agent ask you questions on holes in the document that it might want to know the answer to, ask the agent if it needs any clarifications that will allow for a very jr agent developer to understand and implement the stories, ask the agent if the sequencing of the stories make sense etc...</p> <p>Once you feel its in a good spot - you can mark the file as status: approved.</p> <p>At this point, I would start another chat and with the workflow - the agent will first check for the prd, and then if its approved, will offer to create (if not already existing and approved) the architecture file - and similar a new chat window with the workflow will search for the new first or in progress story.</p> <p>Once a story is in progress and approved by the user - the agent can be told to execute the story. Once a story or part of a story is completed and the story file is updated with progress by the agent, commit often (I use my manual gitpush.mdc manual rule macro). After this, I might start a new chat window with a fresh context and the workflow again loaded. Once a story is complete (status: complete) and tested and pushed, I always will start a new chat window with the workflow, and ask the agent to 'Create the next story draft' - or just ask it what it thinks it should do next, it should recognize what is next story to do from the prd and what story was last marked completed, and generate a draft for the next story, and then stop and ask for my approval before doing any further coding.</p> <p>A more detailed example, up to date repo and video coming soon, but this should give the main ideas...</p> <p>NOTE: Some models (Sonnet 3.7 thinking) have gotten a bit overly aggressive, so the rules might need to be tuned to further ensure the agent does not start updating code until the story is approved.</p>"},{"location":"cursor-auto-rules-agile-workflow/agile-readme/#best-practices","title":"Best Practices","text":"<ol> <li> <p>Documentation and tips</p> </li> <li> <p>AI will keep PRD and Architecture documents updated - sometimes you will need to tell it to update the prd and arch files as needed.</p> </li> <li>Document all significant decisions</li> <li>Maintain clear implementation notes</li> <li> <p>Have the AI create readme.md files in each src subfolder to help give it direction</p> </li> <li> <p>Testing</p> </li> <li> <p>Have the AI Write tests before implementation - a fun excercise in TDD</p> </li> <li>Maintain high test coverage</li> <li> <p>Verify all tests pass before completion</p> </li> <li> <p>Progress Tracking</p> </li> <li> <p>Have the AI (or you) update story status regularly</p> </li> <li>Record all implementation notes</li> <li> <p>Document command history</p> </li> <li> <p>Context Management</p> </li> <li>Start fresh composer instance per story or after significant recorded progress (recorded in task completion updates)</li> <li>Use appropriate context level</li> <li>Minimize context overhead</li> <li>Consider making a leaner workflow when you are in story execution mode - that does not need all of the templates and overhead of how to create a prd and a architecture. But you will need to consider what other files or parts of other files it might need reference to to retain the plot. This is why currently I still use the full workflow.</li> </ol>"},{"location":"cursor-auto-rules-agile-workflow/agile-readme/#status-progression","title":"Status Progression","text":"<p>Stories follow a strict status progression:</p> <pre><code>Draft -&gt; In Progress -&gt; Complete\n</code></pre> <p>Epics follow a similar progression:</p> <pre><code>Future -&gt; Current -&gt; Complete\n</code></pre>"},{"location":"cursor-auto-rules-agile-workflow/agile-readme/#integration-with-cursor-ai","title":"Integration with Cursor AI","text":"<p>The workflow is designed to work seamlessly with Cursor's AI capabilities:</p> <ol> <li> <p>AI-Assisted Planning</p> </li> <li> <p>AI helps create and refine PRD</p> </li> <li>AI suggests architecture improvements</li> <li> <p>AI assists in story breakdown</p> </li> <li> <p>AI-Assisted Implementation</p> </li> <li> <p>AI implements story tasks</p> </li> <li>AI maintains test coverage</li> <li> <p>AI updates documentation</p> </li> <li> <p>AI-Assisted Review</p> </li> <li>AI verifies completion criteria</li> <li>AI suggests improvements</li> <li>AI maintains consistency</li> </ol>"},{"location":"cursor-auto-rules-agile-workflow/agile-readme/#cost-savings","title":"Cost Savings","text":"<ul> <li>LLMs outside of Cursor, if you have them available, such as ChatGPT, Claude, Gemini, etc. are also great to generate the initial PRD and architecture, and really iterate on them.</li> <li>Within Cursor, currently you can use DeepSeek R1 for example which seems to be free and also decent and udpating PRD and architecture - but I have found it to be a bit less reliable than using Claude to follow the format I want - but much cheaper, if trying to do it all in cursor planning.</li> </ul>"},{"location":"cursor-auto-rules-agile-workflow/cursor-rules-readme/","title":"Cursor Rules System Documentation","text":""},{"location":"cursor-auto-rules-agile-workflow/cursor-rules-readme/#overview","title":"Overview","text":"<p>The Cursor Rules system is a powerful mechanism that enables consistent AI behavior by providing structured instructions for AI assistants. Rules serve as a form of memory and guidance, ensuring that AI follows specific patterns and practices throughout a project.</p>"},{"location":"cursor-auto-rules-agile-workflow/cursor-rules-readme/#what-are-cursor-rules","title":"What Are Cursor Rules?","text":"<p>Cursor rules are specialized Markdown files with the <code>.mdc</code> extension that contain structured instructions for AI assistants. They include:</p> <ol> <li>Frontmatter - YAML configuration at the top of the file that determines how and when the rule is applied</li> <li>Contextual information - Explains when and why to apply the rule</li> <li>Critical rules - Specific instructions the AI must follow</li> <li>Examples - Valid and invalid implementations to guide the AI</li> </ol>"},{"location":"cursor-auto-rules-agile-workflow/cursor-rules-readme/#rule-types","title":"Rule Types","text":"<p>The system supports four distinct rule types, each with specific use cases:</p> Rule Type Usage Description Field Globs Field AlwaysApply Field Filename Pattern Agent Selected Agent sees description and chooses when to apply Critical Blank False *-agent.mdc Always Applied to every chat and cmd-k request Blank Blank True *-always.mdc Auto Select Applied to matching existing files Blank Critical glob pattern False *-auto.mdc Manual User must reference in chat Blank Blank False *-manual.mdc"},{"location":"cursor-auto-rules-agile-workflow/cursor-rules-readme/#agent-selected-rules","title":"Agent Selected Rules","text":"<ul> <li>Used when the AI should decide when to apply the rule based on context</li> <li>The description field must clearly indicate when the rule should be applied</li> <li>Example: A rule for generating TypeScript interfaces that the AI applies when it detects interface creation</li> </ul>"},{"location":"cursor-auto-rules-agile-workflow/cursor-rules-readme/#always-rules","title":"Always Rules","text":"<ul> <li>Applied to every conversation, regardless of context</li> <li>Used for fundamental behaviors that should be consistent across all interactions</li> <li>Example: A rule for maintaining a specific communication style or error handling approach</li> </ul>"},{"location":"cursor-auto-rules-agile-workflow/cursor-rules-readme/#auto-select-rules","title":"Auto Select Rules","text":"<ul> <li>Automatically applied when working with files matching the specified glob pattern</li> <li>Perfect for language-specific conventions or file type standards</li> <li>Example: A rule that enforces TypeScript best practices when editing .ts files</li> </ul>"},{"location":"cursor-auto-rules-agile-workflow/cursor-rules-readme/#manual-rules","title":"Manual Rules","text":"<ul> <li>Only applied when explicitly referenced by the user with the @ symbol</li> <li>Useful for specific workflows or processes that are only needed occasionally</li> <li>Example: A rule for generating documentation that's invoked with \"@documentation-generator\"</li> </ul>"},{"location":"cursor-auto-rules-agile-workflow/cursor-rules-readme/#folder-structure","title":"Folder Structure","text":"<p>Rules are organized in subdirectories under <code>.cursor/rules/</code> based on their purpose:</p> <pre><code>.cursor/rules/\n\u251c\u2500\u2500 core-rules/       # Rules for cursor agent behavior or rule generation\n\u251c\u2500\u2500 my-rules/         # Private rules (gitignored in shared repos)\n\u251c\u2500\u2500 global-rules/     # Rules that apply to every interaction\n\u251c\u2500\u2500 testing-rules/    # Rules for testing standards\n\u251c\u2500\u2500 tool-rules/       # Rules for specific tools (git, Linux commands)\n\u251c\u2500\u2500 ts-rules/         # TypeScript-specific rules\n\u251c\u2500\u2500 py-rules/         # Python-specific rules\n\u251c\u2500\u2500 ui-rules/         # Rules for HTML, CSS, React\n\u2514\u2500\u2500 workflows/        # Workflow implementation rules\n</code></pre> <p>This organization makes it easy to: - Find rules related to specific domains - Separate shared rules from private ones - Manage rules for different programming languages</p>"},{"location":"cursor-auto-rules-agile-workflow/cursor-rules-readme/#rule-generation","title":"Rule Generation","text":"<p>The system includes an automated rule generation capability that allows:</p> <ol> <li>Creating new rules through natural language requests</li> <li>Updating existing rules as needs evolve</li> <li>Ensuring consistent rule formatting and organization</li> </ol> <p>Rules can be generated directly through conversation with the AI. The process is managed by the rule-generating-agent rule, which:</p> <ul> <li>Determines the appropriate rule type based on the request</li> <li>Creates or updates the rule file with proper frontmatter</li> <li>Places the rule in the correct subfolder</li> <li>Provides a summary of the action taken</li> </ul>"},{"location":"cursor-auto-rules-agile-workflow/cursor-rules-readme/#example-requests","title":"Example Requests","text":"<p>To generate a rule, simply describe the desired behavior:</p> <ul> <li>\"Create a typescript file commenting standard that balances thoroughness with brevity\"</li> <li>\"Never create JS files again, you will only create TS or JSON files!\"</li> <li>\"Ensure proper error handling in all TypeScript files\"</li> </ul>"},{"location":"cursor-auto-rules-agile-workflow/cursor-rules-readme/#rule-structure","title":"Rule Structure","text":"<p>Each rule file follows a consistent structure:</p> <pre><code>---\ndescription: Concise description or blank\nglobs: Pattern to match files or blank\nalwaysApply: true or false\n---\n\n# Rule Title\n\n## Context\n\n- When to apply this rule\n- Prerequisites or conditions\n- Why the rule exists\n\n## Critical Rules\n\n- Specific instructions for the AI\n- Clear, actionable guidance\n- Implementation requirements\n\n## Examples\n\n&lt;example&gt;\nValid rule application example\n&lt;/example&gt;\n\n&lt;example type=\"invalid\"&gt;\nInvalid rule application example\n&lt;/example&gt;\n</code></pre>"},{"location":"cursor-auto-rules-agile-workflow/cursor-rules-readme/#best-practices","title":"Best Practices","text":"<ol> <li>Keep rules concise - Target under 25 lines, maximum 50 lines</li> <li>Include both valid and invalid examples - Helps the AI understand boundaries</li> <li>Use specific descriptions - Especially important for agent-selected rules</li> <li>Organize logically - Place rules in the appropriate subfolder</li> <li>Use descriptive filenames - Names should indicate purpose and rule type</li> <li>Avoid redundancy - Don't repeat information across rules</li> <li>Update as needed - Rules should evolve with your project</li> <li>Use glob patterns effectively - Be specific about which files a rule applies to</li> </ol>"},{"location":"cursor-auto-rules-agile-workflow/cursor-rules-readme/#private-vs-shared-rules","title":"Private vs. Shared Rules","text":"<p>For team projects, consider:</p> <ul> <li>Placing team-wide rules in shared folders</li> <li>Using <code>.cursor/rules/my-rules/</code> for personal preferences</li> <li>Adding personal rule folders to <code>.gitignore</code></li> </ul>"},{"location":"cursor-auto-rules-agile-workflow/cursor-rules-readme/#rule-removal","title":"Rule Removal","text":"<p>As projects mature:</p> <ul> <li>Some rules become unnecessary as code conventions solidify</li> <li>The AI will naturally follow patterns in the codebase</li> <li>Remove redundant rules to reduce complexity</li> <li>Focus on rules that provide unique value</li> </ul>"},{"location":"cursor-auto-rules-agile-workflow/templates-readme/","title":"Cursor Templates System Documentation","text":""},{"location":"cursor-auto-rules-agile-workflow/templates-readme/#overview","title":"Overview","text":"<p>The Cursor Templates system provides standardized document structures that work in tandem with the Agile workflow and rules systems. Templates ensure consistency across project documentation and enable AI assistants to generate properly formatted documents with all required sections.</p>"},{"location":"cursor-auto-rules-agile-workflow/templates-readme/#what-are-cursor-templates","title":"What Are Cursor Templates?","text":"<p>Cursor templates are Markdown files stored in the <code>.cursor/templates/</code> directory that define the structure and content requirements for various project documents. They serve as blueprints that:</p> <ol> <li>Establish consistent document formats</li> <li>Ensure all required sections are included</li> <li>Provide examples of proper document structure</li> <li>Guide AI assistants in document generation</li> </ol>"},{"location":"cursor-auto-rules-agile-workflow/templates-readme/#core-templates","title":"Core Templates","text":"<p>The repository includes three essential templates for the Agile workflow:</p>"},{"location":"cursor-auto-rules-agile-workflow/templates-readme/#1-product-requirements-document-prd","title":"1. Product Requirements Document (PRD)","text":"<p>File: <code>.cursor/templates/template-prd.md</code></p> <p>The PRD template establishes the structure for defining project requirements, including:</p> <ul> <li>Project title and version</li> <li>Approval status tracking</li> <li>Introduction and goals</li> <li>Features and requirements</li> <li>Epic and story organization</li> <li>Technology stack</li> <li>Reference materials and diagrams</li> <li>Data models and API specifications</li> <li>Project structure</li> <li>Change log</li> </ul> <p>This template ensures all critical project information is captured and organized consistently.</p>"},{"location":"cursor-auto-rules-agile-workflow/templates-readme/#2-architecture-document","title":"2. Architecture Document","text":"<p>File: <code>.cursor/templates/template-arch.md</code></p> <p>The architecture template provides a framework for documenting technical design decisions:</p> <ul> <li>System overview</li> <li>Component architecture</li> <li>Data flow diagrams</li> <li>API specifications</li> <li>Security considerations</li> <li>Scalability plans</li> <li>Technology choices</li> <li>Integration points</li> <li>Development patterns</li> </ul> <p>This document serves as the technical blueprint for project implementation.</p>"},{"location":"cursor-auto-rules-agile-workflow/templates-readme/#3-story-template","title":"3. Story Template","text":"<p>File: <code>.cursor/templates/template-story.md</code></p> <p>The story template structures the implementation details for individual user stories:</p> <ul> <li>Story title and ID</li> <li>Status tracking (Draft, In Progress, Complete)</li> <li>Acceptance criteria</li> <li>Task breakdown with status tracking</li> <li>Implementation notes</li> <li>Testing requirements</li> <li>Completion checklist</li> <li>Chat log for context retention</li> </ul> <p>This template ensures consistent tracking of implementation progress and requirements.</p>"},{"location":"cursor-auto-rules-agile-workflow/templates-readme/#how-templates-are-used","title":"How Templates Are Used","text":"<p>Templates are referenced by the workflow rules to guide document creation:</p> <ol> <li>The workflow rule detects the need for a specific document</li> <li>The rule directs the AI to use the appropriate template</li> <li>The AI creates a new document following the template structure</li> <li>The document is populated with project-specific content</li> <li>The user reviews and approves the document</li> <li>The document serves as a reference for subsequent work</li> </ol>"},{"location":"cursor-auto-rules-agile-workflow/templates-readme/#template-system-benefits","title":"Template System Benefits","text":"<p>The templates system provides several key advantages:</p> <ol> <li>Consistency - All documents follow standardized formats</li> <li>Completeness - Templates ensure no critical sections are missed</li> <li>Efficiency - AI assistants can generate well-structured documents quickly</li> <li>Knowledge Retention - Templates capture institutional knowledge about document requirements</li> <li>Reduced Cognitive Load - Users don't need to remember document structure requirements</li> </ol>"},{"location":"cursor-auto-rules-agile-workflow/templates-readme/#integration-with-rules","title":"Integration with Rules","text":"<p>Templates work closely with the rules system:</p> <ul> <li>Workflow rules reference templates to guide document creation</li> <li>Templates include examples that help train AI behavior</li> <li>Both systems work together to maintain project consistency</li> </ul>"},{"location":"cursor-auto-rules-agile-workflow/templates-readme/#working-with-templates","title":"Working with Templates","text":""},{"location":"cursor-auto-rules-agile-workflow/templates-readme/#accessing-templates","title":"Accessing Templates","text":"<p>Templates are stored in the <code>.cursor/templates/</code> directory and can be:</p> <ul> <li>Referenced directly by the AI</li> <li>Modified by users to meet specific project needs</li> <li>Extended with additional templates as required</li> </ul>"},{"location":"cursor-auto-rules-agile-workflow/templates-readme/#customizing-templates","title":"Customizing Templates","text":"<p>While templates provide standardized structures, they can be customized:</p> <ol> <li>Add project-specific sections</li> <li>Adjust formatting to meet team preferences</li> <li>Extend examples to better illustrate requirements</li> <li>Modify language to match organizational terminology</li> </ol>"},{"location":"cursor-auto-rules-agile-workflow/templates-readme/#creating-new-templates","title":"Creating New Templates","text":"<p>To create additional templates:</p> <ol> <li>Create a new Markdown file in the <code>.cursor/templates/</code> directory</li> <li>Follow the existing template pattern with clear section headings</li> <li>Include examples where appropriate</li> <li>Add placeholders with curly braces for variable content</li> <li>Include any necessary explanatory comments</li> </ol>"},{"location":"cursor-auto-rules-agile-workflow/templates-readme/#best-practices","title":"Best Practices","text":"<ol> <li>Maintain Template Integrity - Keep core sections to ensure AI can properly follow them</li> <li>Use Clear Section Headings - Makes documents easier to navigate</li> <li>Include Examples - Helps both users and AI understand requirements</li> <li>Keep Templates Updated - Evolve templates as project needs change</li> <li>Balance Detail and Flexibility - Provide enough structure without being overly prescriptive</li> <li>Use Consistent Formatting - Establish patterns that are easy to follow</li> </ol>"},{"location":"cursor-auto-rules-agile-workflow/templates-readme/#conclusion","title":"Conclusion","text":"<p>The Templates system is a key component of the Agile workflow, providing structure and consistency to project documentation. By using templates effectively, teams can ensure that all critical information is captured and organized in a way that supports efficient development and clear communication.</p>"},{"location":"cursor-auto-rules-agile-workflow/workflows-readme/","title":"Cursor Workflows System Documentation","text":""},{"location":"cursor-auto-rules-agile-workflow/workflows-readme/#overview","title":"Overview","text":"<p>The Cursor Workflows system provides structured processes that guide AI assistants through complex development tasks. Workflows combine rules and templates to create repeatable, consistent development patterns that maintain project focus and context across multiple interactions.</p>"},{"location":"cursor-auto-rules-agile-workflow/workflows-readme/#what-are-cursor-workflows","title":"What Are Cursor Workflows?","text":"<p>Cursor workflows are rule-based processes that:</p> <ol> <li>Establish a sequence of development activities</li> <li>Enforce consistency across the development lifecycle</li> <li>Maintain context and project memory</li> <li>Guide AI assistants through complex tasks</li> <li>Ensure adherence to project standards</li> </ol>"},{"location":"cursor-auto-rules-agile-workflow/workflows-readme/#workflow-implementation","title":"Workflow Implementation","text":"<p>Workflows are implemented as specialized rule files in the <code>.cursor/rules/workflows/</code> directory. The primary workflow in this repository is:</p> <ul> <li>Agile Workflow - <code>.cursor/rules/workflows/workflow-agile-manual.mdc</code></li> </ul> <p>This rule file defines the sequence, requirements, and constraints for the Agile development process.</p>"},{"location":"cursor-auto-rules-agile-workflow/workflows-readme/#workflow-components","title":"Workflow Components","text":"<p>A complete workflow consists of multiple interconnected elements:</p> <ol> <li>Workflow Rule - The rule file that defines the process</li> <li>Templates - Document structures referenced by the workflow</li> <li>Directory Structure - Organized file locations for artifacts</li> <li>Status Tracking - Mechanisms to track progress</li> <li>Context Retention - Methods to maintain project memory</li> </ol>"},{"location":"cursor-auto-rules-agile-workflow/workflows-readme/#the-agile-workflow","title":"The Agile Workflow","text":"<p>The Agile workflow implements a structured development process with distinct phases:</p>"},{"location":"cursor-auto-rules-agile-workflow/workflows-readme/#1-initial-planning-phase","title":"1. Initial Planning Phase","text":"<ul> <li>PRD creation and approval</li> <li>Architecture design and approval</li> <li>Epic planning</li> <li>Story definition</li> </ul>"},{"location":"cursor-auto-rules-agile-workflow/workflows-readme/#2-development-phase","title":"2. Development Phase","text":"<ul> <li>Story implementation</li> <li>Task execution</li> <li>Testing and validation</li> <li>Story completion</li> </ul>"},{"location":"cursor-auto-rules-agile-workflow/workflows-readme/#3-iteration","title":"3. Iteration","text":"<ul> <li>Progression to next story</li> <li>Epic completion</li> <li>Project release</li> </ul>"},{"location":"cursor-auto-rules-agile-workflow/workflows-readme/#workflow-process","title":"Workflow Process","text":"<p>The Agile workflow follows a specific sequence:</p> <ol> <li>Project Initialization</li> <li>AI checks for .ai/prd.md existence</li> <li>If not present, assists user in creating one</li> <li> <p>Ensures PRD is comprehensive and approved</p> </li> <li> <p>Architecture Definition</p> </li> <li>Once PRD is approved, AI assists in architecture creation</li> <li>Architecture document (.ai/arch.md) is developed using the template</li> <li> <p>User reviews and approves architecture</p> </li> <li> <p>Story Development</p> </li> <li>AI generates first/next story from the PRD</li> <li>Story is marked as Draft until user approves</li> <li>Once approved and marked In Progress, implementation begins</li> <li>Tasks are completed and tracked in the story file</li> <li>Testing is performed to verify completion</li> <li> <p>Story is marked Complete when all tasks are done</p> </li> <li> <p>Project Progression</p> </li> <li>After completing a story, AI generates the next story</li> <li>Process repeats until all stories in the current Epic are complete</li> <li>When an Epic is complete, process moves to the next Epic</li> <li>Project is complete when all Epics are implemented</li> </ol>"},{"location":"cursor-auto-rules-agile-workflow/workflows-readme/#project-memory-structure","title":"Project Memory Structure","text":"<p>The workflow maintains project context through a structured file organization:</p> <pre><code>.ai/\n\u251c\u2500\u2500 prd.md                 # Product Requirements Document\n\u251c\u2500\u2500 arch.md                # Architecture Decision Record\n\u251c\u2500\u2500 epic-1/               # Current Epic directory\n\u2502   \u251c\u2500\u2500 story-1.story.md  # Story files for Epic 1\n\u2502   \u251c\u2500\u2500 story-2.story.md\n\u2502   \u2514\u2500\u2500 story-3.story.md\n\u251c\u2500\u2500 epic-2/               # Future Epic directory\n\u2502   \u2514\u2500\u2500 ...\n\u2514\u2500\u2500 epic-3/               # Future Epic directory\n    \u2514\u2500\u2500 ...\n</code></pre> <p>This structure serves as the AI's \"memory\" of the project, allowing it to maintain context across multiple sessions.</p>"},{"location":"cursor-auto-rules-agile-workflow/workflows-readme/#critical-workflow-rules","title":"Critical Workflow Rules","text":"<p>The Agile workflow enforces several critical rules:</p> <ol> <li>Never creates first story without PRD and Architecture approval</li> <li>Only one Epic can be in-progress at a time</li> <li>Only one Story can be in-progress at a time</li> <li>Stories must be implemented in PRD-specified order</li> <li>Never implement without story approval from user (marked as in progress)</li> </ol>"},{"location":"cursor-auto-rules-agile-workflow/workflows-readme/#how-to-use-the-workflow","title":"How to Use the Workflow","text":"<p>To use the Agile workflow:</p> <ol> <li>Start a new Agent chat with your preferred AI model</li> <li>Reference the workflow with <code>@workflow-agile-manual</code></li> <li>Describe your project needs and requirements</li> <li>Collaborate with the AI to create the PRD</li> <li>Approve the PRD by changing its status to \"Approved\"</li> <li>Continue the process following the workflow sequence</li> </ol> <p>Example prompt: <pre><code>Let's follow the @workflow-agile-manual to create a PRD for a new project that will [project description]. Let's focus on just the MVP features first, but also plan some epics for future enhancements.\n</code></pre></p>"},{"location":"cursor-auto-rules-agile-workflow/workflows-readme/#benefits-of-the-workflow-system","title":"Benefits of the Workflow System","text":"<p>Using structured workflows provides numerous advantages:</p> <ol> <li>Consistency - Development follows a predictable pattern</li> <li>Completeness - No critical steps are missed</li> <li>Context Retention - Project memory is maintained across sessions</li> <li>Quality Control - Testing and validation are built into the process</li> <li>Progress Tracking - Status is clearly visible at all times</li> <li>Knowledge Sharing - Process is documented and shareable</li> </ol>"},{"location":"cursor-auto-rules-agile-workflow/workflows-readme/#workflow-types","title":"Workflow Types","text":"<p>The system supports different workflow configurations:</p> <ol> <li>Rule-Based Implementation (Recommended)</li> <li>Uses <code>.cursor/rules/workflows/workflow-agile-manual.mdc</code></li> <li>Automatically applies standards to matching files</li> <li> <p>Provides consistent structure enforcement</p> </li> <li> <p>Notepad-Based Implementation (Alternative)</p> </li> <li>Uses templates in <code>xnotes/</code> directory</li> <li>Lighter weight and more adaptable</li> <li>Ideal for simpler projects</li> </ol>"},{"location":"cursor-auto-rules-agile-workflow/workflows-readme/#customizing-workflows","title":"Customizing Workflows","text":"<p>Workflows can be customized to meet specific project needs:</p> <ol> <li>Modify the workflow rule to adjust the process</li> <li>Create variations of workflows for different project types</li> <li>Adjust templates referenced by the workflow</li> <li>Extend the project structure as needed</li> </ol>"},{"location":"cursor-auto-rules-agile-workflow/workflows-readme/#best-practices","title":"Best Practices","text":"<ol> <li>Start Fresh Contexts - Begin a new chat session for each major workflow phase</li> <li>Regular Updates - Keep story status and notes current</li> <li>Commit Often - Save progress regularly with version control</li> <li>Clear Approvals - Explicitly mark documents as approved</li> <li>Maintain Documentation - Keep PRD and Architecture updated as the project evolves</li> <li>TDD Approach - Follow test-driven development practices</li> <li>Context Management - Be mindful of AI context limitations</li> </ol>"},{"location":"cursor-auto-rules-agile-workflow/workflows-readme/#conclusion","title":"Conclusion","text":"<p>The Workflows system provides a powerful framework for structured, consistent development with AI assistance. By following the defined processes, teams can maintain focus, preserve context, and deliver high-quality results efficiently.</p>"},{"location":"cursor-auto-rules-agile-workflow/xnotes-readme/","title":"XNotes System Documentation","text":""},{"location":"cursor-auto-rules-agile-workflow/xnotes-readme/#overview","title":"Overview","text":"<p>The XNotes system provides a flexible alternative to the rule-based workflows, offering lightweight templates and workspace organization for less structured development tasks. While the <code>.cursor/rules/</code> and <code>.cursor/templates/</code> approach is recommended for most projects, XNotes offers a complementary system for specific use cases.</p>"},{"location":"cursor-auto-rules-agile-workflow/xnotes-readme/#what-are-xnotes","title":"What Are XNotes?","text":"<p>XNotes are:</p> <ol> <li>A collection of template files stored in the <code>xnotes/</code> directory</li> <li>Excluded from Cursor's indexing via the <code>.cursorindexingignore</code> feature</li> <li>Available as reference material but not directly accessible to AI unless explicitly shared</li> <li>A lighter-weight alternative to rule-based workflows</li> </ol>"},{"location":"cursor-auto-rules-agile-workflow/xnotes-readme/#purpose-and-usage","title":"Purpose and Usage","text":"<p>XNotes serve several distinct purposes:</p> <ol> <li>Template Storage - Providing alternative templates for specific use cases</li> <li>Note-Taking - Capturing ideas or documentation outside the main codebase</li> <li>Draft Creation - Developing content before moving it into the main project</li> <li>Workflow Alternative - Offering a lighter approach to structured development</li> <li>Private Documentation - Storing personal notes excluded from version control</li> </ol>"},{"location":"cursor-auto-rules-agile-workflow/xnotes-readme/#xnotes-vs-rule-based-system","title":"XNotes vs. Rule-Based System","text":"<p>XNotes complements the rule-based system with some key differences:</p> Aspect Rule-Based System XNotes System Structure Highly structured Flexible AI Integration Automatic via rules Manual sharing Visibility Indexed by Cursor Excluded from indexing Use Case Full projects Focused sessions Implementation Rules and templates Template files Access Method Auto or @reference Explicit sharing Version Control Typically included Often excluded"},{"location":"cursor-auto-rules-agile-workflow/xnotes-readme/#working-with-xnotes","title":"Working with XNotes","text":""},{"location":"cursor-auto-rules-agile-workflow/xnotes-readme/#accessing-xnotes","title":"Accessing XNotes","text":"<p>To use XNotes in your workflow:</p> <ol> <li>Create or reference files in the <code>xnotes/</code> directory</li> <li>Share specific XNotes with AI by mentioning them in chat</li> <li>Copy content from XNotes for use in prompts or discussions</li> </ol>"},{"location":"cursor-auto-rules-agile-workflow/xnotes-readme/#creating-xnotes","title":"Creating XNotes","text":"<p>To create new XNotes:</p> <ol> <li>Add files to the <code>xnotes/</code> directory</li> <li>Follow naming conventions that indicate purpose</li> <li>Structure content for easy reference</li> <li>Add comments explaining usage</li> </ol>"},{"location":"cursor-auto-rules-agile-workflow/xnotes-readme/#xnotes-for-workflows","title":"XNotes for Workflows","text":"<p>When using XNotes for lightweight workflows:</p> <ol> <li>Create template files for each document type</li> <li>Reference these templates explicitly in chat</li> <li>Use a consistent naming convention</li> <li>Manually track progress and status</li> </ol>"},{"location":"cursor-auto-rules-agile-workflow/xnotes-readme/#integration-with-cursorindexingignore","title":"Integration with <code>.cursorindexingignore</code>","text":"<p>The <code>.cursorindexingignore</code> feature is key to the XNotes system:</p> <ol> <li>Files in <code>xnotes/</code> are added to <code>.cursorindexingignore</code></li> <li>This makes them accessible but excluded from Cursor's indexing</li> <li>AI won't automatically see or reference these files</li> <li>This prevents them from cluttering the AI's context</li> <li>Files remain available when explicitly referenced</li> </ol> <p>Example <code>.cursorindexingignore</code> entry: <pre><code>xnotes/\n.cursor/templates/\n</code></pre></p>"},{"location":"cursor-auto-rules-agile-workflow/xnotes-readme/#relationship-to-cursorignore","title":"Relationship to <code>.cursorignore</code>","text":"<p>There's an important distinction between the two ignore mechanisms:</p> <ul> <li><code>.cursorindexingignore</code> - Files are not indexed but are still accessible when explicitly referenced</li> <li><code>.cursorignore</code> - Files are completely ignored and inaccessible to Cursor</li> </ul> <p>XNotes use <code>.cursorindexingignore</code> to maintain accessibility while preventing automatic indexing.</p>"},{"location":"cursor-auto-rules-agile-workflow/xnotes-readme/#migration-path","title":"Migration Path","text":"<p>As projects mature, you may want to migrate from XNotes to the rule-based system:</p> <ol> <li>Start with XNotes for rapid prototyping</li> <li>Create formalized templates in <code>.cursor/templates/</code></li> <li>Develop appropriate rules in <code>.cursor/rules/</code></li> <li>Move key content from XNotes to the structured system</li> <li>Retain XNotes for personal reference or draft work</li> </ol>"},{"location":"cursor-auto-rules-agile-workflow/xnotes-readme/#best-practices","title":"Best Practices","text":"<ol> <li>Keep XNotes Organized - Use clear naming conventions</li> <li>Reference Explicitly - Don't assume AI can see XNotes without sharing</li> <li>Version Control Decisions - Decide whether XNotes should be committed</li> <li>Move to Rules When Ready - Transition to rules-based system for mature processes</li> <li>Document Usage - Note how XNotes should be used in your project</li> <li>Avoid Duplication - Don't repeat content between XNotes and rules</li> </ol>"},{"location":"cursor-auto-rules-agile-workflow/xnotes-readme/#use-cases","title":"Use Cases","text":"<p>XNotes are particularly useful for:</p> <ol> <li>Personal Workflows - Individual developers' preferred processes</li> <li>Draft Documentation - Content being developed before formalization</li> <li>Temporary Templates - Structures being tested before standardization</li> <li>Private Notes - Documentation not intended for the whole team</li> <li>Learning Resources - References for specific techniques or approaches</li> </ol>"},{"location":"cursor-auto-rules-agile-workflow/xnotes-readme/#conclusion","title":"Conclusion","text":"<p>The XNotes system provides a flexible complement to the more structured rule-based system, offering a lightweight approach for specific use cases. By understanding both systems and when to use each, you can maximize productivity while maintaining project consistency.</p>"},{"location":"external/software_development/might_be_interesting/minio/","title":"\ud83d\udea7 MinIO","text":"","tags":["MinIO","S3","under construction"]},{"location":"external/software_development/might_be_interesting/minio/#about","title":"About","text":"<p>MinIO is an object storage solution that provides an Amazon Web Services S3-compatible API and supports all core S3 features. MinIO is built to deploy anywhere - public or private cloud, baremetal infrastructure, orchestrated environments, and edge infrastructure.</p>","tags":["MinIO","S3","under construction"]},{"location":"external/software_development/might_be_interesting/minio/#setup-in-kubernetes-wip","title":"Setup in Kubernetes (WIP)","text":"","tags":["MinIO","S3","under construction"]},{"location":"external/software_development/might_be_interesting/minio/#create-pod","title":"Create pod","text":"<p>\ud83d\udea7 Todo: This is not in git yet!</p> <p>@bossjones has the manifest below in <code>minio-dev.yaml</code></p> Kubernetes manifest (<code>minio-dev.yaml</code>) <pre><code># Deploys a MinIO pod\napiVersion: v1\nkind: Pod\nmetadata:\nlabels:\n    app: minio\nname: minio\nspec:\ncontainers:\n- name: minio\n    image: quay.io/minio/minio:latest\n    command:\n    - /bin/bash\n    - -c\n    args:\n    - minio server /data --console-address :9090\n    resources:\n    limits:\n        cpu: \"1\"\n        memory: 2048Mi\n    requests:\n        cpu: 100m\n        memory: 256Mi\n</code></pre> <p>He runs this command to create a MinIO pod:</p> <pre><code>kubectl apply -f minio-dev.yaml\n</code></pre> <p>and now the pod is running:</p> <pre><code>$ kubectl config current-context\ngtw-paas-sandbox\n\n$ kubectl get pod/minio\nNAME    READY   STATUS    RESTARTS   AGE\nminio   1/1     Running   0          9h\n</code></pre>","tags":["MinIO","S3","under construction"]},{"location":"external/software_development/might_be_interesting/minio/#kubectl-port-forward","title":"<code>kubectl port-forward</code>","text":"<p>There's no <code>service</code> or <code>ingressroute</code> yet, so he's using a <code>port-forward</code>:</p> <pre><code>kubectl port-forward pod/minio 9000 9090\n</code></pre> <p>Note</p> <p>The <code>kubectl port-forward</code> command may exit from time to time, because of network connectivity problems. You will need to rerun it when that happens so that the localhost links work.</p> <p>That allows these links to work:</p> <ul> <li>http://localhost:9090/browser/boss-bucket</li> <li>http://localhost:9090/access-keys</li> </ul>","tags":["MinIO","S3","under construction"]},{"location":"external/software_development/might_be_interesting/minio/#access-using-aws-cli","title":"Access using AWS CLI","text":"CommandOutput <pre><code>export AWS_ACCESS_KEY_ID=theaccesskey\nexport AWS_SECRET_ACCESS_KEY=thesecretkey\naws --endpoint-url http://localhost:9000 s3 ls boss-bucket\n</code></pre> <pre><code>$ export AWS_ACCESS_KEY_ID=theaccesskey\nexport AWS_SECRET_ACCESS_KEY=thesecretkey\naws --endpoint-url http://localhost:9000 s3 ls boss-bucket\n                        PRE folder1/\n2024-02-13 23:03:45      26044 SmartHighlights_PlantUML_class_diagram.png\n</code></pre>","tags":["MinIO","S3","under construction"]},{"location":"external/software_development/might_be_interesting/minio/#links","title":"Links","text":"<ul> <li>Quickstart: MinIO for Kubernetes</li> <li>AWS CLI with MinIO Server</li> </ul>","tags":["MinIO","S3","under construction"]},{"location":"external/software_development/might_be_interesting/minio/#scratch-links","title":"Scratch links","text":"<p>These only work on @bossjones's machine (these are hitting a MinIO pod in Kubernetes but currently using a <code>kubectl port-forward</code> to access them) and should be removed soon:</p> <ul> <li>http://localhost:9090/browser/boss-bucket</li> <li>http://localhost:9090/access-keys</li> </ul>","tags":["MinIO","S3","under construction"]},{"location":"external/software_development/mkdocs_stuff/diagrams/","title":"Diagrams (Marc)","text":""},{"location":"external/software_development/mkdocs_stuff/diagrams/#mermaid","title":"Mermaid","text":"<p>This diagram was created by @bossjones using Mermaid (Editor link). It shows his idea for how AI feature development could work in the future.</p>"},{"location":"external/software_development/python/pyenv/","title":"pyenv","text":"<p>pyenv is a good tool to install and manage Python versions.</p>"},{"location":"external/software_development/python/pyenv/#install","title":"Install","text":"On a Mac with HomebrewWith curl and bash <pre><code>brew install pyenv\n</code></pre> <pre><code>curl https://pyenv.run | bash\n</code></pre> <p>More installation info here</p>"},{"location":"external/software_development/python/pyenv/#usage","title":"Usage","text":""},{"location":"external/software_development/python/pyenv/#install-version-of-python","title":"Install version of Python","text":"<pre><code>pyenv install 3.10.12\n</code></pre>"},{"location":"external/software_development/python/pyenv/#set-global-version","title":"Set global version","text":"<p>setting a version:</p> <pre><code>pyenv global 3.10.12\n</code></pre>"},{"location":"external/software_development/python/pyenv/#get-current-python-version","title":"Get current Python version","text":"<p>Get your current python version:</p> <pre><code>python --version\n</code></pre>"},{"location":"external/software_development/python/UV/00_index/","title":"Overview","text":"","tags":["UV","Python","Open source"]},{"location":"external/software_development/python/UV/00_index/#official-docs","title":"Official docs","text":"<p>The definitive source of info about UV is here.</p>","tags":["UV","Python","Open source"]},{"location":"external/software_development/python/UV/00_index/#install","title":"Install","text":"HomebrewpipxpipInstaller script (Linux/Mac) <pre><code>brew install uv\n</code></pre> <pre><code>pipx install uv\n</code></pre> <pre><code>pip install --user uv\n</code></pre> <pre><code>curl -LsSf https://astral.sh/uv/install.sh | sh\n</code></pre> <p>More info on Installation</p>","tags":["UV","Python","Open source"]},{"location":"external/software_development/python/UV/00_index/#tldr-its-like-npm-for-python-but-faster","title":"TL;DR \u2014 It's like npm for Python, but faster","text":"<p>UV is a modern Python package manager and environment management tool that's significantly faster than pip and other alternatives. If you are familiar with <code>npm</code> in Node.js, UV provides similar functionality but with blazing fast performance.</p> npm UV <code>npm install</code> <code>uv sync --frozen</code> <code>npm install &lt;package&gt;</code> <code>uv add &lt;package&gt;</code> <code>npm install --save-dev &lt;package&gt;</code> <code>uv add --dev &lt;package&gt;</code> <code>npm run &lt;script&gt;</code> <code>uv run &lt;script&gt;</code> <code>package.json</code> <code>pyproject.toml</code> <code>package-lock.json</code> <code>uv.lock</code>","tags":["UV","Python","Open source"]},{"location":"external/software_development/python/UV/00_index/#why-should-i-use-uv","title":"Why should I use UV?","text":"","tags":["UV","Python","Open source"]},{"location":"external/software_development/python/UV/00_index/#blazing-fast-package-management","title":"Blazing Fast Package Management","text":"<ul> <li>UV is written in Rust and is significantly faster than traditional Python package managers</li> <li>Parallel downloads and optimized dependency resolution</li> <li>Smart caching for improved performance</li> <li>Native support for modern Python packaging standards</li> </ul>","tags":["UV","Python","Open source"]},{"location":"external/software_development/python/UV/00_index/#nicer-management-of-dependencies-including-an-auto-generated-lock-file","title":"Nicer management of dependencies (including an auto-generated lock file)","text":"<ul> <li> <p>When you <code>git clone</code> a Python project that uses UV, your next step is to run <code>uv sync --frozen</code> to install dependencies from the lockfile.</p> </li> <li> <p>Adding dependencies is simple:</p> </li> <li>For production: <code>uv add &lt;package&gt;</code></li> <li> <p>For development: <code>uv add --dev &lt;package&gt;</code>   These commands install the package and update your <code>pyproject.toml</code> file.</p> </li> <li> <p>Dependencies are managed in two files:</p> </li> <li><code>pyproject.toml</code>: Your direct dependencies</li> <li><code>uv.lock</code>: Complete locked dependency tree with hashes   This replaces traditional <code>requirements.txt</code> files with a more robust solution.</li> </ul>","tags":["UV","Python","Open source"]},{"location":"external/software_development/python/UV/00_index/#python-environment-management","title":"Python Environment Management","text":"<p>UV can manage Python environments and installations directly:</p> <pre><code># Install specific Python versions\nuv python install 3.12.0  # Install specific version\nuv python install 3.11    # Install latest 3.11.x\nuv python install 3.12 --default  # Install and set as default\n\n# Installation options\nuv python install 3.12 --install-dir /custom/path  # Custom installation directory\nuv python install 3.12 --reinstall  # Reinstall existing version\nuv python install 3.12 --force  # Replace existing executables\n\n# Create virtual environments\nuv venv --python 3.12.0  # Create venv with specific version\nuv venv  # Create venv with default Python version\n\n# Install dependencies using lockfile\nuv sync --frozen\n</code></pre> <p>UV's Python installer supports: - Multiple Python versions side by side - Custom installation directories via <code>--install-dir</code> - Mirror configuration for downloads - Offline mode and caching options - PyPy installations with custom mirrors - Setting default Python versions</p> <p>For secure installations, UV provides options like: - <code>--native-tls</code> for platform certificate stores - <code>--offline</code> for air-gapped environments - <code>--allow-insecure-host</code> for specific trusted hosts - Cache control via <code>--no-cache</code> or <code>--cache-dir</code></p>","tags":["UV","Python","Open source"]},{"location":"external/software_development/python/UV/00_index/#running-python-code","title":"Running Python Code","text":"<p>UV provides a clean way to run Python code in your environment:</p> <pre><code># Run Python scripts\nuv run python script.py\n\n# Run modules\nuv run python -m pytest\n\n# Run specific commands\nuv run pytest tests/\n</code></pre>","tags":["UV","Python","Open source"]},{"location":"external/software_development/python/UV/00_index/#just-integration","title":"Just Integration","text":"<p>The project includes helpful just targets for common UV operations:</p> <pre><code># Install all dependencies (including dev)\njust install-project\n\n# Run Python commands through UV\njust run-python script.py\n\n# Run tests with UV\njust check-test\n\n# Format code\njust format\n\n# Check code quality, types, and tests\njust check\n\n# Clean all caches and build artifacts\njust clean\n\n# Package management\njust package-constraints  # Generate constraints.txt with hashes\njust package-build       # Build package with constraints\n</code></pre>","tags":["UV","Python","Open source"]},{"location":"external/software_development/python/UV/00_index/#package-management-operations","title":"Package Management Operations","text":"<p>UV manages dependencies through locking and syncing. Here are common operations:</p> <pre><code># Lock dependencies (creates/updates uv.lock)\njust uv-lock  # Basic lock\njust uv-lock-upgrade  # Upgrade all packages\njust uv-lock-upgrade-package requests  # Upgrade specific package\n\n# Sync environment from lockfile\njust uv-sync  # Sync all dependencies\njust uv-sync-dev  # Sync only dev dependencies\njust uv-sync-extras extra_name  # Sync with specific extras\n\n# Check lockfile status\njust uv-check-lock  # Check if lockfile is up to date\n\n# Add new packages\njust uv-add requests  # Add production dependency\njust uv-add-dev pytest  # Add development dependency\n\n# View dependency information\njust uv-outdated  # List outdated packages\njust uv-tree  # Show dependency tree\n</code></pre> <p>Advanced sync options are available:</p> <pre><code># Sync with specific options\njust uv-sync-inexact  # Keep existing packages\njust uv-sync-no-deps  # Skip dependencies\njust uv-sync-no-project  # Skip project installation\n\n# Group management\njust uv-sync-group group_name  # Sync specific group\njust uv-sync-all-groups  # Sync all groups\n</code></pre>","tags":["UV","Python","Open source"]},{"location":"external/software_development/python/UV/00_index/#common-issues-and-solutions","title":"Common Issues and Solutions","text":"","tags":["UV","Python","Open source"]},{"location":"external/software_development/python/UV/00_index/#environment-activation","title":"Environment Activation","text":"<p>Always ensure you're in the right environment:</p> <pre><code># Activate the virtual environment\nsource .venv/bin/activate\n\n# Verify activation\necho $VIRTUAL_ENV\n</code></pre>","tags":["UV","Python","Open source"]},{"location":"external/software_development/python/UV/00_index/#no-module-found-error","title":"No Module Found Error","text":"<p>If you encounter a \"module not found\" error after adding new dependencies:</p> <ol> <li>Ensure the package is in your <code>pyproject.toml</code></li> <li>Run <code>uv sync --frozen</code> to reinstall all dependencies</li> <li>If the issue persists, try <code>uv sync --reinstall --frozen</code></li> </ol>","tags":["UV","Python","Open source"]},{"location":"external/software_development/python/rapid_prototyping/dash/","title":"Overview","text":"<p>https://plotly.com/dash/</p>","tags":["Dash"]},{"location":"external/software_development/python/rapid_prototyping/gradio/","title":"Overview","text":"<p>https://www.gradio.app/</p>","tags":["Gradio"]},{"location":"external/software_development/python/rapid_prototyping/taipy/","title":"Overview","text":"<p>https://www.taipy.io/</p>","tags":["Taipy"]},{"location":"mcp-servers/prompt_library_mcp/","title":"Prompt library mcp","text":"<p>Ok, here's a breakdown of the <code>plan_and_execute_prompt_library_workflow</code> tool's actions, step by step, based on the provided code:</p> <ol> <li> <p>Initialization:</p> <ul> <li>The tool receives repository information (<code>repo_description</code>, <code>main_languages</code>, <code>file_patterns</code>, <code>key_features</code>), the current <code>phase</code> of the workflow (defaulting to 1), and the <code>workflow_state</code>.</li> <li>If <code>workflow_state</code> is not provided or is invalid, it initializes a new workflow state. This state stores repository information, recommended/created/deployed rules, and workspace preparation status. It also immediately calls <code>prep_workspace()</code> and stores the result.</li> </ul> </li> <li> <p>Phase Execution (Based on the <code>phase</code> input):</p> <ul> <li>The tool uses a conditional structure (<code>if/elif/else</code>) to determine which phase of the workflow to execute.  Each <code>execute_phase_X</code> function encapsulates the logic for a specific phase.</li> </ul> </li> <li> <p><code>execute_phase_1</code> (Repository Analysis):</p> <ul> <li>Workspace Check:  Verifies if the workspace is prepared (<code>workflow_state.get(\"workspace_prepared\")</code>). If not, it calls <code>prep_workspace()</code> to set up directories and updates the workflow state.</li> <li>Repo Analysis Prompt: Calls <code>repo_analysis_prompt</code> with repository information to get an analysis and rule suggestions.</li> <li>Results Processing: Parses the analysis results from <code>repo_analysis_prompt</code>'s output into a structured format, extracting repository type, common patterns, and recommended rules.</li> <li>State Update: Updates the <code>workflow_state</code> with the analysis results and marks <code>phase_1_complete</code> as <code>True</code>.</li> </ul> </li> <li> <p><code>execute_phase_2</code> (Rule Identification):</p> <ul> <li>Prerequisites Check: Checks if Phase 1 is complete.</li> <li>Repository Summary Creation: Creates a summary string from repository information to be used by the <code>recommend_cursor_rules</code> function.</li> <li>Rule Recommendation: Calls <code>recommend_cursor_rules</code> with the repository summary to get a list of recommended cursor rules.</li> <li>Rule Processing: Categorizes, prioritizes, and filters the recommended rules. It also attempts to identify dependencies between the rules.</li> <li>State Update: Updates the <code>workflow_state</code> with the recommended, categorized, and selected rules. Marks <code>phase_2_complete</code> as <code>True</code>.</li> </ul> </li> <li> <p><code>execute_phase_3</code> (Workspace Preparation):</p> <ul> <li>Prerequisites Check: Checks if Phase 2 is complete.</li> <li>Rule Name Processing: Extracts rule names from the selected rules, makes them filename-safe, and ensures uniqueness.</li> <li>Tool Execution:<ul> <li>Calls <code>ensure_makefile_task()</code> to ensure the Makefile has the <code>update-cursor-rules</code> task.</li> <li>Calls <code>update_dockerignore()</code> to exclude the cursor rules drafts directory from Docker builds.</li> <li>Calls <code>create_cursor_rule_files()</code> to create empty <code>.mdc.md</code> files for each rule in the <code>hack/drafts/cursor_rules</code> directory.</li> </ul> </li> <li>State Update:  Updates the <code>workflow_state</code> with the rule file names and marks <code>phase_3_complete</code> as <code>True</code>.</li> </ul> </li> <li> <p><code>execute_phase_4</code> (Rule Creation):</p> <ul> <li>Prerequisites Check: Checks if Phase 3 is complete.</li> <li>Rule Processing: Iterates through the rule file names and:<ul> <li>Extracts rule metadata (description, file patterns, content patterns, etc.) from <code>rule_file_mapping</code>.</li> <li>Calls <code>generate_cursor_rule()</code> to generate the content of the cursor rule in Markdown format.</li> <li>Calls <code>save_cursor_rule()</code> to save the generated content to a <code>.mdc.md</code> file in the <code>hack/drafts/cursor_rules</code> directory.</li> </ul> </li> <li>State Update: Updates the <code>workflow_state</code> with the created rules and any errors that occurred during rule creation. Marks <code>phase_4_complete</code> as <code>True</code> if any rules were successfully created.</li> </ul> </li> <li> <p><code>execute_phase_5</code> (Deployment and Testing):</p> <ul> <li>Prerequisites Check: Checks if Phase 4 is complete.</li> <li>Deployment: Calls <code>run_update_cursor_rules()</code> to execute the <code>update-cursor-rules</code> task in the Makefile, which copies the cursor rule files to the <code>.cursor/rules</code> directory.</li> <li>State Update: Updates the <code>workflow_state</code> with the deployed rules and marks <code>phase_5_complete</code> as <code>True</code>.</li> <li>Testing Instructions: Provides instructions for testing the deployed cursor rules.</li> </ul> </li> <li> <p>Return Value:</p> <ul> <li>Each <code>execute_phase_X</code> function returns a dictionary containing the status of the phase, a message, a checklist of completed tasks, relevant data (created rules, errors, etc.), the updated <code>workflow_state</code>, the <code>next_phase</code> to execute, and any <code>next_steps</code> for the user. The <code>plan_and_execute_prompt_library_workflow</code> tool returns this dictionary to the caller.</li> </ul> </li> </ol>"},{"location":"mcp-servers/prompt_library_mcp/#tool-calls","title":"Tool calls","text":""},{"location":"mcp-servers/prompt_library_mcp/#get_static_cursor_rules","title":"get_static_cursor_rules","text":"<p>Request:</p> <pre><code>{\"method\":\"tools/call\",\"params\":{\"name\":\"get_static_cursor_rules\",\"arguments\":{\"rule_names\":[\"tree\",\"repomix\"]},\"_meta\":{\"progressToken\":0}}}\n</code></pre> <p>Response:</p> <pre><code>{\"content\":[{\"type\":\"text\",\"text\":\"{\\\"rules\\\": [{\\\"rule_name\\\": \\\"tree.mdc.md\\\", \\\"content\\\": \\\"---\\\\ndescription: Display repository structure\\\\nglobs: *\\\\nalwaysApply: false\\\\n---\\\\nWhen the user asks about the project layout, structure, or organization, run the command `tree -L 7 -I \\\\\\\"*.pyc|__pycache__|.git|.pytest_cache|.ruff_cache|.mypy_cache|.coverage|htmlcov|.venv|.env|*.egg-info|build|dist|node_modules|.DS_Store|images\\\\\\\"` to help understand and visualize the repository structure.\\\\n\\\"}, {\\\"rule_name\\\": \\\"repomix.mdc.md\\\", \\\"content\\\": \\\"---\\\\ndescription: Repomix tool\\\\nglobs: *\\\\nalwaysApply: false\\\\n---\\\\n# Repomix Project Layout\\\\n\\\\nRules for understanding and navigating the repomix project structure.\\\\n\\\\n&lt;rule&gt;\\\\nname: project_layout_guide\\\\ndescription: Guide to the repomix project structure and organization\\\\nfilters:\\\\n  # Match any file in the project\\\\n  - type: file_extension\\\\n    pattern: \\\\\\\".*\\\\\\\"\\\\n  # Match project initialization events\\\\n  - type: event\\\\n    pattern: \\\\\\\"file_create\\\\\\\"\\\\n\\\\nactions:\\\\n  - type: suggest\\\\n    message: |\\\\n      # Repomix Project Structure\\\\n\\\\n      This repository implements a tool for code repository summarization and packaging for LLM consumption.\\\\n\\\\n      ## Core Features\\\\n\\\\n      - **Repository Summarization:** Extracts and summarizes code repositories\\\\n      - **Code Packaging:** Prepares code for LLM consumption\\\\n      - **Security Checks:** Validates file safety and filters untrusted files\\\\n      - **Multiple Output Formats:** Supports markdown, plain text, and XML output styles\\\\n      - **CLI Interface:** Command-line interface for easy usage\\\\n      - **Web Interface:** Browser-based interface for repository processing\\\\n\\\\n      ## Directory Structure\\\\n\\\\n      ```\\\\n      .\\\\n      \\\\u251c\\\\u2500\\\\u2500 .cursor/                     # Active cursor rules directory\\\\n      \\\\u2502   \\\\u2514\\\\u2500\\\\u2500 rules/                   # Production cursor rules\\\\n      \\\\u251c\\\\u2500\\\\u2500 bin/                         # Binary executables\\\\n      \\\\u2502   \\\\u2514\\\\u2500\\\\u2500 repomix.cjs              # Main executable\\\\n      \\\\u251c\\\\u2500\\\\u2500 src/                         # Source code\\\\n      \\\\u2502   \\\\u251c\\\\u2500\\\\u2500 cli/                     # Command-line interface\\\\n      \\\\u2502   \\\\u2502   \\\\u251c\\\\u2500\\\\u2500 actions/             # CLI action implementations\\\\n      \\\\u2502   \\\\u2502   \\\\u251c\\\\u2500\\\\u2500 cliPrint.ts          # CLI output utilities\\\\n      \\\\u2502   \\\\u2502   \\\\u251c\\\\u2500\\\\u2500 cliRun.ts            # CLI execution logic\\\\n      \\\\u2502   \\\\u2502   \\\\u251c\\\\u2500\\\\u2500 cliSpinner.ts        # CLI progress indicators\\\\n      \\\\u2502   \\\\u2502   \\\\u2514\\\\u2500\\\\u2500 types.ts             # CLI type definitions\\\\n      \\\\u2502   \\\\u251c\\\\u2500\\\\u2500 config/                  # Configuration handling\\\\n      \\\\u2502   \\\\u2502   \\\\u251c\\\\u2500\\\\u2500 configLoad.ts        # Config loading utilities\\\\n      \\\\u2502   \\\\u2502   \\\\u251c\\\\u2500\\\\u2500 configSchema.ts      # Config validation schema\\\\n      \\\\u2502   \\\\u2502   \\\\u251c\\\\u2500\\\\u2500 defaultIgnore.ts     # Default ignore patterns\\\\n      \\\\u2502   \\\\u2502   \\\\u2514\\\\u2500\\\\u2500 globalDirectory.ts   # Global directory management\\\\n      \\\\u2502   \\\\u251c\\\\u2500\\\\u2500 core/                    # Core functionality\\\\n      \\\\u2502   \\\\u2502   \\\\u251c\\\\u2500\\\\u2500 file/                # File operations\\\\n      \\\\u2502   \\\\u2502   \\\\u251c\\\\u2500\\\\u2500 metrics/             # Metrics calculation\\\\n      \\\\u2502   \\\\u2502   \\\\u251c\\\\u2500\\\\u2500 output/              # Output generation\\\\n      \\\\u2502   \\\\u2502   \\\\u251c\\\\u2500\\\\u2500 packager/            # Output packaging\\\\n      \\\\u2502   \\\\u2502   \\\\u251c\\\\u2500\\\\u2500 security/            # Security validation\\\\n      \\\\u2502   \\\\u2502   \\\\u251c\\\\u2500\\\\u2500 tokenCount/          # Token counting utilities\\\\n      \\\\u2502   \\\\u2502   \\\\u2514\\\\u2500\\\\u2500 treeSitter/          # Code parsing with tree-sitter\\\\n      \\\\u2502   \\\\u251c\\\\u2500\\\\u2500 index.ts                 # Main entry point\\\\n      \\\\u2502   \\\\u2514\\\\u2500\\\\u2500 shared/                  # Shared utilities\\\\n      \\\\u2502       \\\\u251c\\\\u2500\\\\u2500 constants.ts         # Shared constants\\\\n      \\\\u2502       \\\\u251c\\\\u2500\\\\u2500 errorHandle.ts       # Error handling\\\\n      \\\\u2502       \\\\u251c\\\\u2500\\\\u2500 logger.ts            # Logging utilities\\\\n      \\\\u2502       \\\\u251c\\\\u2500\\\\u2500 processConcurrency.ts # Concurrency management\\\\n      \\\\u2502       \\\\u2514\\\\u2500\\\\u2500 types.ts             # Shared type definitions\\\\n      \\\\u251c\\\\u2500\\\\u2500 tests/                       # Test suites\\\\n      \\\\u2502   \\\\u251c\\\\u2500\\\\u2500 cli/                     # CLI tests\\\\n      \\\\u2502   \\\\u251c\\\\u2500\\\\u2500 config/                  # Configuration tests\\\\n      \\\\u2502   \\\\u251c\\\\u2500\\\\u2500 core/                    # Core functionality tests\\\\n      \\\\u2502   \\\\u251c\\\\u2500\\\\u2500 integration-tests/       # Integration tests\\\\n      \\\\u2502   \\\\u251c\\\\u2500\\\\u2500 shared/                  # Shared utility tests\\\\n      \\\\u2502   \\\\u2514\\\\u2500\\\\u2500 testing/                 # Test utilities\\\\n      \\\\u2514\\\\u2500\\\\u2500 website/                     # Web interface\\\\n          \\\\u251c\\\\u2500\\\\u2500 client/                  # Frontend application\\\\n          \\\\u2502   \\\\u251c\\\\u2500\\\\u2500 components/          # Vue components\\\\n          \\\\u2502   \\\\u2514\\\\u2500\\\\u2500 src/                 # Frontend source code\\\\n          \\\\u2514\\\\u2500\\\\u2500 server/                  # Backend server\\\\n              \\\\u2514\\\\u2500\\\\u2500 src/                 # Server source code\\\\n      ```\\\\n\\\\n      ## Primary Components\\\\n\\\\n      ### Source Code (`src/`)\\\\n      Core TypeScript application code organized into modules:\\\\n      - `cli/`: Command-line interface implementation\\\\n      - `config/`: Configuration management\\\\n      - `core/`: Core functionality including file processing, security, and output generation\\\\n      - `shared/`: Shared utilities and types\\\\n\\\\n      ### Tests (`tests/`)\\\\n      Comprehensive test suite including unit tests and integration tests for all components.\\\\n\\\\n      ### Website (`website/`)\\\\n      Web interface for the application with client and server components:\\\\n      - `client/`: Vue-based frontend application\\\\n      - `server/`: Backend API server\\\\n\\\\n      ### Binary (`bin/`)\\\\n      Executable files for running the application from the command line.\\\\n\\\\n      ## Development Workflow\\\\n\\\\n      ### Feature Development\\\\n      1. **Understand Requirements** - Review existing code and documentation\\\\n      2. **Implement Changes** - Add or modify code with appropriate tests\\\\n      3. **Test Thoroughly** - Run tests to ensure functionality\\\\n      4. **Document Changes** - Update documentation as needed\\\\n\\\\n      ### Testing\\\\n      - Run unit tests: `npm test`\\\\n      - Run specific tests: `npm test -- &lt;test-pattern&gt;`\\\\n      - Run integration tests: `npm run test:integration`\\\\n\\\\n      ### Building\\\\n      - Build the application: `npm run build`\\\\n      - Build the website: `cd website &amp;&amp; npm run build`\\\\n\\\\nexamples:\\\\n  - input: |\\\\n      # I'm new to the project, where should I put my code for a new CLI command?\\\\n    output: |\\\\n      For a new CLI command, you should:\\\\n\\\\n      1. Create a new action file in `src/cli/actions/` (e.g., `myNewAction.ts`)\\\\n      2. Implement the action following the pattern of existing actions\\\\n      3. Add appropriate tests in `tests/cli/actions/`\\\\n      4. Update the CLI command registration in the main CLI runner\\\\n\\\\n      Look at existing action files like `defaultAction.ts` or `initAction.ts` for examples of the structure.\\\\n\\\\n  - input: |\\\\n      # How is the code parsing functionality organized?\\\\n    output: |\\\\n      The code parsing functionality is in the `src/core/treeSitter/` directory:\\\\n\\\\n      - `ext2Lang.ts`: Maps file extensions to language types\\\\n      - `lang2Query.ts`: Maps languages to appropriate queries\\\\n      - `languageParser.ts`: Core parsing functionality\\\\n      - `loadLanguage.ts`: Loads language grammars\\\\n      - `parseFile.ts`: Main file parsing entry point\\\\n      - `parseStrategies/`: Language-specific parsing strategies\\\\n      - `queries/`: Tree-sitter queries for different languages\\\\n\\\\n      This module uses tree-sitter to parse code files and extract meaningful information.\\\\n\\\\nmetadata:\\\\n  priority: high\\\\n  version: 1.0\\\\n  tags:\\\\n    - project-structure\\\\n    - organization\\\\n    - development-workflow\\\\n&lt;/rule&gt;\\\\n\\\\n&lt;rule&gt;\\\\nname: project_standards\\\\ndescription: Standards for code quality and organization in the repomix project\\\\nfilters:\\\\n  # Match any file in the project\\\\n  - type: file_extension\\\\n    pattern: \\\\\\\".*\\\\\\\"\\\\n  # Match project initialization events\\\\n  - type: event\\\\n    pattern: \\\\\\\"file_create\\\\\\\"\\\\n\\\\nactions:\\\\n  - type: suggest\\\\n    message: |\\\\n      # Repomix Project Standards\\\\n\\\\n      ## TypeScript Standards\\\\n\\\\n      - **Code Style**: Follow the project's biome.json configuration\\\\n      - **Type Safety**: Strong typing for all functions and classes\\\\n      - **Documentation**: JSDoc comments for public APIs\\\\n      - **Testing**: Comprehensive test coverage with vitest\\\\n\\\\n      ## Project Structure Standards\\\\n\\\\n      - **Module Organization**: Functionality grouped by domain (cli, core, config)\\\\n      - **Component Isolation**: Clear separation of concerns between modules\\\\n      - **Worker Architecture**: CPU-intensive tasks use worker threads\\\\n      - **Error Handling**: Consistent error handling patterns\\\\n\\\\n      ## Web Interface Standards\\\\n\\\\n      - **Frontend**: Vue.js components with TypeScript\\\\n      - **Backend**: Node.js API with TypeScript\\\\n      - **Internationalization**: Support for multiple languages\\\\n      - **Responsive Design**: Mobile and desktop friendly UI\\\\n\\\\n      ## Security Standards\\\\n\\\\n      - **Input Validation**: Validate all user inputs\\\\n      - **File Safety**: Check files for potential security issues\\\\n      - **Permission Checks**: Verify file access permissions\\\\n      - **Rate Limiting**: Prevent abuse of API endpoints\\\\n\\\\n      ## Validation Requirements\\\\n\\\\n      - All code must have appropriate type annotations\\\\n      - All public APIs must have documentation comments\\\\n      - All code must have corresponding tests\\\\n      - All UI components must support internationalization\\\\n      - Security checks must be applied to all file operations\\\\n\\\\nexamples:\\\\n  - input: |\\\\n      # What are the requirements for TypeScript code in this project?\\\\n    output: |\\\\n      TypeScript code in this project must:\\\\n      1. Follow the code style defined in biome.json\\\\n      2. Use strong typing for all functions, variables, and classes\\\\n      3. Include JSDoc comments for public APIs\\\\n      4. Be accompanied by comprehensive tests\\\\n      5. Follow the module organization pattern (cli, core, config, etc.)\\\\n      6. Implement proper error handling\\\\n\\\\n  - input: |\\\\n      # How should I structure a new feature?\\\\n    output: |\\\\n      When adding a new feature:\\\\n\\\\n      1. Identify the appropriate module (cli, core, config, etc.)\\\\n      2. Create new files following the existing naming patterns\\\\n      3. Implement the feature with proper typing and documentation\\\\n      4. Add comprehensive tests in the corresponding test directory\\\\n      5. Update any relevant documentation\\\\n      6. Ensure the feature follows security standards if handling files or user input\\\\n\\\\nmetadata:\\\\n  priority: high\\\\n  version: 1.0\\\\n  tags:\\\\n    - standards\\\\n    - code-quality\\\\n    - organization\\\\n&lt;/rule&gt;\\\\n\\\\n&lt;rule&gt;\\\\nname: repomix_context_extraction\\\\ndescription: Guide for using repomix to extract focused context from repositories\\\\nfilters:\\\\n  - type: message\\\\n    pattern: \\\\\\\"(?i)(extract context|code context|repository context|repomix extract|code explanation|understand code)\\\\\\\"\\\\n  - type: context\\\\n    pattern: \\\\\\\"explain code|understand repository|extract code|code extraction\\\\\\\"\\\\n\\\\nactions:\\\\n  - type: suggest\\\\n    message: |\\\\n      # Repomix Context Extraction Guide\\\\n\\\\n      Repomix is a powerful tool for extracting and summarizing code repositories for LLM consumption. This guide focuses on using repomix to extract only the necessary context to explain how specific functionality works.\\\\n\\\\n      ## Core Principles for Effective Context Extraction\\\\n\\\\n      - **Focused Selection**: Only include files/folders directly relevant to the functionality\\\\n      - **Complete Understanding**: Ensure all dependencies are included for a complete explanation\\\\n      - **XML Output**: Use XML format for structured representation of code\\\\n      - **Minimal Context**: Avoid including unnecessary files that add noise\\\\n      - **Consistent Ignore Patterns**: Use standard ignore patterns for common build artifacts and dependencies\\\\n\\\\n      ## Command Structure\\\\n\\\\n      ```bash\\\\n      repomix extract /path/to/repository --style xml --include \\\\\\\"path/to/relevant/files/**\\\\\\\" --exclude \\\\\\\"tests/**\\\\\\\" --ignore \\\\\\\"**/node_modules,**/dist,**/build\\\\\\\" --output output.xml\\\\n      ```\\\\n\\\\n      ## Key Parameters\\\\n\\\\n      - `--style xml`: Output in XML format for structured representation\\\\n      - `--include`: Specify patterns for files to include (supports glob patterns)\\\\n      - `--exclude`: Specify patterns for files to exclude\\\\n      - `--ignore`: Specify patterns for files to ignore (build artifacts, dependencies)\\\\n      - `--output`: Specify the output file\\\\n      - `--output-show-line-numbers`: Include line numbers in the output (helpful for reference)\\\\n      - `--max-tokens`: Limit the total token count (optional)\\\\n      - `--depth`: Control the depth of directory traversal (optional)\\\\n\\\\n      ## Standard Ignore Patterns\\\\n\\\\n      Always include these standard ignore patterns to avoid including unnecessary files:\\\\n\\\\n      ```bash\\\\n      --ignore \\\\\\\"**/uv.lock,**/package-lock.json,**/.env,**/Cargo.lock,**/node_modules,**/target,**/dist,**/build,**/output.txt,**/yarn.lock\\\\\\\"\\\\n      ```\\\\n\\\\n      ## Best Practices\\\\n\\\\n      ### 1. Identify Core Components\\\\n\\\\n      Before extraction, identify the core components needed to explain the functionality:\\\\n\\\\n      - Entry point files\\\\n      - Core implementation files\\\\n      - Essential utility functions\\\\n      - Type definitions and interfaces\\\\n      - Configuration files directly related to the functionality\\\\n\\\\n      ### 2. Use Precise Include Patterns\\\\n\\\\n      ```bash\\\\n      # Example: Extract authentication system\\\\n      repomix extract ./repo --style xml --include \\\\\\\"src/auth/**\\\\\\\" --include \\\\\\\"src/models/User.js\\\\\\\" --include \\\\\\\"src/config/auth.js\\\\\\\" --ignore \\\\\\\"**/node_modules,**/dist,**/build,**/package-lock.json\\\\\\\" --output-show-line-numbers --output auth-context.xml\\\\n      ```\\\\n\\\\n      ### 3. Exclude Unnecessary Files\\\\n\\\\n      ```bash\\\\n      # Exclude tests, documentation, and build artifacts\\\\n      repomix extract ./repo --style xml --exclude \\\\\\\"**/*.test.js\\\\\\\" --exclude \\\\\\\"**/*.spec.js\\\\\\\" --exclude \\\\\\\"docs/**\\\\\\\" --ignore \\\\\\\"**/uv.lock,**/package-lock.json,**/.env,**/Cargo.lock,**/node_modules,**/target,**/dist,**/build,**/output.txt,**/yarn.lock\\\\\\\" --output-show-line-numbers --output clean-context.xml\\\\n      ```\\\\n\\\\n      ### 4. Combine With Search When Needed\\\\n\\\\n      For complex functionality spanning multiple directories:\\\\n\\\\n      ```bash\\\\n      # First find relevant files\\\\n      find ./repo -type f -name \\\\\\\"*.js\\\\\\\" | grep -E \\\\\\\"auth|user|permission\\\\\\\" &gt; relevant_files.txt\\\\n\\\\n      # Then use the list with repomix\\\\n      cat relevant_files.txt | xargs -I{} echo \\\\\\\"--include {}\\\\\\\" | xargs repomix extract ./repo --style xml --ignore \\\\\\\"**/node_modules,**/dist,**/build\\\\\\\" --output-show-line-numbers --output auth-system.xml\\\\n      ```\\\\n\\\\n      ### 5. Focus on Interfaces Over Implementation Details\\\\n\\\\n      When explaining how something works, prioritize interface files and core logic over detailed implementations:\\\\n\\\\n      ```bash\\\\n      repomix extract ./repo --style xml --include \\\\\\\"src/api/**/*.interface.ts\\\\\\\" --include \\\\\\\"src/core/**/*.ts\\\\\\\" --exclude \\\\\\\"**/*.impl.ts\\\\\\\" --ignore \\\\\\\"**/uv.lock,**/package-lock.json,**/.env,**/Cargo.lock,**/node_modules,**/target,**/dist,**/build,**/output.txt,**/yarn.lock\\\\\\\" --output-show-line-numbers --output system-overview.xml\\\\n      ```\\\\n\\\\n      ## Example Scenarios\\\\n\\\\n      ### Extracting a Feature Implementation\\\\n\\\\n      ```bash\\\\n      # Extract everything related to the search feature\\\\n      repomix extract ./repo --style xml --include \\\\\\\"src/**/search/**\\\\\\\" --include \\\\\\\"src/models/SearchIndex.js\\\\\\\" --include \\\\\\\"src/utils/searchHelpers.js\\\\\\\" --ignore \\\\\\\"**/uv.lock,**/package-lock.json,**/.env,**/Cargo.lock,**/node_modules,**/target,**/dist,**/build,**/output.txt,**/yarn.lock\\\\\\\" --output-show-line-numbers --output search-feature.xml\\\\n      ```\\\\n\\\\n      ### Extracting an API Endpoint Flow\\\\n\\\\n      ```bash\\\\n      # Extract files related to the user registration flow\\\\n      repomix extract ./repo --style xml --include \\\\\\\"src/controllers/UserController.js\\\\\\\" --include \\\\\\\"src/services/UserService.js\\\\\\\" --include \\\\\\\"src/models/User.js\\\\\\\" --include \\\\\\\"src/validators/userValidation.js\\\\\\\" --ignore \\\\\\\"**/node_modules,**/dist,**/build\\\\\\\" --output-show-line-numbers --output user-registration.xml\\\\n      ```\\\\n\\\\n      ### Extracting Architecture Overview\\\\n\\\\n      ```bash\\\\n      # Extract core architectural files\\\\n      repomix extract ./repo --style xml --include \\\\\\\"src/core/**/*.ts\\\\\\\" --include \\\\\\\"src/types/**/*.ts\\\\\\\" --include \\\\\\\"src/config/**/*.ts\\\\\\\" --exclude \\\\\\\"**/*.test.ts\\\\\\\" --ignore \\\\\\\"**/uv.lock,**/package-lock.json,**/.env,**/Cargo.lock,**/node_modules,**/target,**/dist,**/build,**/output.txt,**/yarn.lock\\\\\\\" --output-show-line-numbers --output architecture.xml\\\\n      ```\\\\n\\\\n      ### Quick Repository Summary\\\\n\\\\n      ```bash\\\\n      # Generate a quick summary of the entire repository\\\\n      npx repomix --style xml --output-show-line-numbers --output output.txt --ignore \\\\\\\"**/uv.lock,**/package-lock.json,**/.env,**/Cargo.lock,**/node_modules,**/target,**/dist,**/build,**/output.txt,**/yarn.lock\\\\\\\"\\\\n      ```\\\\n\\\\nexamples:\\\\n  - input: |\\\\n      How can I use repomix to extract just the authentication system from my repository?\\\\n    output: |\\\\n      To extract just the authentication system from your repository using repomix with XML output:\\\\n\\\\n      ```bash\\\\n      repomix extract ./your-repo --style xml \\\\\\\\\\\\n        --include \\\\\\\"src/**/auth/**\\\\\\\" \\\\\\\\\\\\n        --include \\\\\\\"src/**/user/**\\\\\\\" \\\\\\\\\\\\n        --include \\\\\\\"src/models/User.*\\\\\\\" \\\\\\\\\\\\n        --include \\\\\\\"src/middleware/auth.*\\\\\\\" \\\\\\\\\\\\n        --include \\\\\\\"src/config/auth.*\\\\\\\" \\\\\\\\\\\\n        --exclude \\\\\\\"**/*.test.*\\\\\\\" \\\\\\\\\\\\n        --exclude \\\\\\\"**/*.spec.*\\\\\\\" \\\\\\\\\\\\n        --ignore \\\\\\\"**/uv.lock,**/package-lock.json,**/.env,**/Cargo.lock,**/node_modules,**/target,**/dist,**/build,**/output.txt,**/yarn.lock\\\\\\\" \\\\\\\\\\\\n        --output-show-line-numbers \\\\\\\\\\\\n        --output auth-system.xml\\\\n      ```\\\\n\\\\n      This command:\\\\n      1. Targets all auth-related files and directories\\\\n      2. Includes user-related files that are typically part of authentication\\\\n      3. Includes specific model, middleware, and config files related to auth\\\\n      4. Excludes test files to keep the output focused\\\\n      5. Ignores common build artifacts and dependencies\\\\n      6. Includes line numbers for easier reference\\\\n      7. Outputs in XML format for structured representation\\\\n\\\\n      If you need to be even more selective, first identify the exact files involved:\\\\n\\\\n      ```bash\\\\n      find ./your-repo -type f -name \\\\\\\"*.js\\\\\\\" | grep -E \\\\\\\"auth|login|register|user|permission|role\\\\\\\" | less\\\\n      ```\\\\n\\\\n      Then use those specific files in your include patterns.\\\\n\\\\n  - input: |\\\\n      I need to extract context to explain how the data processing pipeline works in my repo.\\\\n    output: |\\\\n      To extract context that explains how a data processing pipeline works:\\\\n\\\\n      ```bash\\\\n      repomix extract ./your-repo --style xml \\\\\\\\\\\\n        --include \\\\\\\"src/**/pipeline/**\\\\\\\" \\\\\\\\\\\\n        --include \\\\\\\"src/**/processors/**\\\\\\\" \\\\\\\\\\\\n        --include \\\\\\\"src/models/DataModel.*\\\\\\\" \\\\\\\\\\\\n        --include \\\\\\\"src/utils/dataUtils.*\\\\\\\" \\\\\\\\\\\\n        --include \\\\\\\"src/config/pipeline.*\\\\\\\" \\\\\\\\\\\\n        --include \\\\\\\"src/types/data.*\\\\\\\" \\\\\\\\\\\\n        --exclude \\\\\\\"**/*.test.*\\\\\\\" \\\\\\\\\\\\n        --exclude \\\\\\\"**/mock*\\\\\\\" \\\\\\\\\\\\n        --ignore \\\\\\\"**/uv.lock,**/package-lock.json,**/.env,**/Cargo.lock,**/node_modules,**/target,**/dist,**/build,**/output.txt,**/yarn.lock\\\\\\\" \\\\\\\\\\\\n        --output-show-line-numbers \\\\\\\\\\\\n        --output data-pipeline.xml\\\\n      ```\\\\n\\\\n      This approach:\\\\n      1. Focuses on pipeline and processor directories\\\\n      2. Includes relevant data models and utilities\\\\n      3. Includes pipeline configuration\\\\n      4. Includes type definitions for data structures\\\\n      5. Excludes tests and mock data\\\\n      6. Ignores common build artifacts and dependencies\\\\n      7. Includes line numbers for easier reference\\\\n\\\\n      For a more comprehensive understanding, you might want to include the entry points:\\\\n\\\\n      ```bash\\\\n      repomix extract ./your-repo --style xml \\\\\\\\\\\\n        --include \\\\\\\"src/index.*\\\\\\\" \\\\\\\\\\\\n        --include \\\\\\\"src/**/pipeline/**\\\\\\\" \\\\\\\\\\\\n        --include \\\\\\\"src/**/processors/**\\\\\\\" \\\\\\\\\\\\n        --include \\\\\\\"src/models/DataModel.*\\\\\\\" \\\\\\\\\\\\n        --include \\\\\\\"src/utils/dataUtils.*\\\\\\\" \\\\\\\\\\\\n        --include \\\\\\\"src/config/pipeline.*\\\\\\\" \\\\\\\\\\\\n        --include \\\\\\\"src/types/data.*\\\\\\\" \\\\\\\\\\\\n        --exclude \\\\\\\"**/*.test.*\\\\\\\" \\\\\\\\\\\\n        --exclude \\\\\\\"**/mock*\\\\\\\" \\\\\\\\\\\\n        --ignore \\\\\\\"**/uv.lock,**/package-lock.json,**/.env,**/Cargo.lock,**/node_modules,**/target,**/dist,**/build,**/output.txt,**/yarn.lock\\\\\\\" \\\\\\\\\\\\n        --output-show-line-numbers \\\\\\\\\\\\n        --output data-pipeline-with-entry.xml\\\\n      ```\\\\n\\\\n      This ensures you capture how the pipeline is initialized and triggered.\\\\n\\\\n  - input: |\\\\n      How do I create a quick summary of my entire repository for an LLM?\\\\n    output: |\\\\n      For a quick summary of your entire repository optimized for LLM consumption:\\\\n\\\\n      ```bash\\\\n      npx repomix --style xml --output-show-line-numbers --output output.txt --ignore \\\\\\\"**/uv.lock,**/package-lock.json,**/.env,**/Cargo.lock,**/node_modules,**/target,**/dist,**/build,**/output.txt,**/yarn.lock\\\\\\\"\\\\n      ```\\\\n\\\\n      This command:\\\\n      1. Uses repomix to process your repository\\\\n      2. Outputs in XML format for structured representation\\\\n      3. Includes line numbers for easier reference\\\\n      4. Ignores common build artifacts and dependencies\\\\n      5. Creates an output.txt file with the repository summary\\\\n\\\\n      If you want to focus on specific aspects while still getting a broad overview:\\\\n\\\\n      ```bash\\\\n      npx repomix --style xml --include \\\\\\\"src/**/*.ts\\\\\\\" --include \\\\\\\"src/**/*.js\\\\\\\" --exclude \\\\\\\"**/*.test.*\\\\\\\" --ignore \\\\\\\"**/uv.lock,**/package-lock.json,**/.env,**/Cargo.lock,**/node_modules,**/target,**/dist,**/build,**/output.txt,**/yarn.lock\\\\\\\" --output-show-line-numbers --output repo-summary.xml\\\\n      ```\\\\n\\\\n      This will include all TypeScript and JavaScript files while excluding tests and common artifacts.\\\\n\\\\nmetadata:\\\\n  priority: high\\\\n  version: 1.0\\\\n  tags:\\\\n    - context-extraction\\\\n    - code-understanding\\\\n    - repomix-usage\\\\n&lt;/rule&gt;\\\\n\\\"}], \\\"valid_rule_count\\\": 2}\"}],\"isError\":false}\n</code></pre>"},{"location":"mcp-servers/prompt_library_mcp/#get_static_cursor_rule","title":"get_static_cursor_rule","text":"<p>Request:</p> <pre><code>{\"method\":\"tools/call\",\"params\":{\"name\":\"get_static_cursor_rule\",\"arguments\":{\"rule_name\":\"tree\"},\"_meta\":{\"progressToken\":1}}}\n</code></pre> <p>Response:</p> <pre><code>{\"content\":[{\"type\":\"text\",\"text\":\"{\\\"rule_name\\\": \\\"tree.mdc.md\\\", \\\"content\\\": \\\"---\\\\ndescription: Display repository structure\\\\nglobs: *\\\\nalwaysApply: false\\\\n---\\\\nWhen the user asks about the project layout, structure, or organization, run the command `tree -L 7 -I \\\\\\\"*.pyc|__pycache__|.git|.pytest_cache|.ruff_cache|.mypy_cache|.coverage|htmlcov|.venv|.env|*.egg-info|build|dist|node_modules|.DS_Store|images\\\\\\\"` to help understand and visualize the repository structure.\\\\n\\\"}\"}],\"isError\":false}\n</code></pre>"},{"location":"mcp-servers/prompt_library_mcp/#save_cursor_rule","title":"save_cursor_rule","text":"<pre><code>{\"method\":\"tools/call\",\"params\":{\"name\":\"save_cursor_rule\",\"arguments\":{\"rule_name\":\"bossjones\",\"rule_content\":\"# Python Best Practices\\\\n\\\\nWhen writing Python code, follow these guidelines:\\\\n\\\\n1. Use type hints\\\\n2. Write docstrings\\\\n3. Follow PEP 8\"},\"_meta\":{\"progressToken\":3}}}\n</code></pre> <pre><code>{\"content\":[{\"type\":\"text\",\"text\":\"{\\\"operations\\\": [{\\\"type\\\": \\\"create_directory\\\", \\\"path\\\": \\\"hack/drafts/cursor_rules\\\", \\\"options\\\": {\\\"parents\\\": true, \\\"exist_ok\\\": true}}, {\\\"type\\\": \\\"write_file\\\", \\\"path\\\": \\\"hack/drafts/cursor_rules/bossjones.mdc.md\\\", \\\"content\\\": \\\"# Python Best Practices\\\\\\\\n\\\\\\\\nWhen writing Python code, follow these guidelines:\\\\\\\\n\\\\\\\\n1. Use type hints\\\\\\\\n2. Write docstrings\\\\\\\\n3. Follow PEP 8\\\", \\\"options\\\": {\\\"mode\\\": \\\"w\\\"}}], \\\"message\\\": \\\"Instructions to save cursor rule to hack/drafts/cursor_rules/bossjones.mdc.md\\\"}\"}],\"isError\":false}\n</code></pre>"},{"location":"mcp-servers/prompt_library_mcp/#recommend_cursor_rules","title":"recommend_cursor_rules","text":"<pre><code>{\"method\":\"tools/call\",\"params\":{\"name\":\"recommend_cursor_rules\",\"arguments\":{\"repo_summary\":\"fastapi fastapi fastapi fastapi fastapi fastapi fastapi\"},\"_meta\":{\"progressToken\":5}}}\n</code></pre> <pre><code>{\"content\":[{\"type\":\"text\",\"text\":\"{\\\"name\\\": \\\"code-documentation\\\", \\\"description\\\": \\\"Standards for code documentation and comments\\\", \\\"reason\\\": \\\"Improve overall code documentation\\\"}\"},{\"type\":\"text\",\"text\":\"{\\\"name\\\": \\\"error-handling\\\", \\\"description\\\": \\\"Best practices for error handling and logging\\\", \\\"reason\\\": \\\"Enhance application reliability with proper error handling\\\"}\"},{\"type\":\"text\",\"text\":\"{\\\"name\\\": \\\"fastapi-best-practices\\\", \\\"description\\\": \\\"Best practices for FastAPI development\\\", \\\"reason\\\": \\\"Repository uses FastAPI framework\\\"}\"},{\"type\":\"text\",\"text\":\"{\\\"name\\\": \\\"fastapi-security\\\", \\\"description\\\": \\\"Security considerations for FastAPI applications\\\", \\\"reason\\\": \\\"Ensure secure API development with FastAPI\\\"}\"},{\"type\":\"text\",\"text\":\"{\\\"name\\\": \\\"fastapi-testing\\\", \\\"description\\\": \\\"Testing strategies for FastAPI endpoints\\\", \\\"reason\\\": \\\"Help with writing comprehensive tests for FastAPI endpoints\\\"}\"},{\"type\":\"text\",\"text\":\"{\\\"name\\\": \\\"api-security\\\", \\\"description\\\": \\\"Security considerations for API development\\\", \\\"reason\\\": \\\"Repository implements APIs\\\"}\"},{\"type\":\"text\",\"text\":\"{\\\"name\\\": \\\"api-documentation\\\", \\\"description\\\": \\\"Best practices for API documentation\\\", \\\"reason\\\": \\\"Improve API documentation\\\"}\"}],\"isError\":false}\n</code></pre>"},{"location":"mcp-servers/prompt_library_mcp/#prep_workspace","title":"prep_workspace","text":"<pre><code>{\"method\":\"tools/call\",\"params\":{\"name\":\"prep_workspace\",\"arguments\":{},\"_meta\":{\"progressToken\":6}}}\n</code></pre> <pre><code>{\"content\":[{\"type\":\"text\",\"text\":\"{\\\"status\\\": \\\"success\\\", \\\"message\\\": \\\"\\\\nTo prepare the workspace for cursor rules, the following steps are needed:\\\\n\\\\n1. Create the cursor rules directory structure, this should be relative to the repo root eg ./hack/drafts/cursor_rules:\\\\n   mkdir -p ./hack/drafts/cursor_rules .cursor/rules || true\\\\n\\\\n2. Ensure the .cursor/rules directory exists for deployment:\\\\n   mkdir -p .cursor/rules\\\\n   mkdir -p ./hack/drafts/cursor_rules\\\\n\\\\n3. Check if Makefile exists with an update-cursor-rules task:\\\\n   The update-cursor-rules task should copy files from hack/drafts/cursor_rules to .cursor/rules. This command updates Cursor editor rules by copying rule definitions from a drafts directory into the Cursor configuration folder. It first creates a .cursor/rules directory if it doesn't exist. Then it finds all Markdown (.md) files in the hack/drafts/cursor_rules directory (excluding any README files), copies them to the .cursor/rules directory, and preserves their filenames without the .md extension. The comment notes that Cursor doesn't support generating .mdc files directly through the Composer Agent at the time this was written\\\\n\\\\n\\\\n4. Update .dockerignore to exclude the cursor rules drafts directory:\\\\n   Add 'hack/drafts/cursor_rules' to .dockerignore if it exists\\\\n\\\\n5. Write the following mandatory cursor rule files to the client repo's cursor rules stage directory one at a time, using the get_static_cursor_rules function to retrieve each file. when saving the file ensure the file has extension .mdc.md, eg tree.mdc becomes tree.mdc.md:\\\\n   - tree.mdc: A rule for displaying repository structure\\\\n   - repo_analyzer.mdc: A rule for analyzing repository structure and locating code definitions\\\\n   - notify.mdc: A rule for notification at the end of tasks\\\\n   - repomix.mdc: A rule for repository summarization and packaging for LLM consumption\\\\n   - cursor_rules_location.mdc: A rule for locating the cursor rules directory and how to write them\\\\n\\\\n6. Update the client repo's .cursor/mcp.json file to include new entries if they don't already exist:\\\\n   Ensure the .cursor/mcp.json file contains entries for prompt_library and sequentialthinking:\\\\n   ```json\\\\n   {\\\\n     \\\\\\\"prompt_library\\\\\\\": {\\\\n       \\\\\\\"command\\\\\\\": \\\\\\\"uv\\\\\\\",\\\\n       \\\\\\\"args\\\\\\\": [\\\\n         \\\\\\\"run\\\\\\\",\\\\n         \\\\\\\"--with\\\\\\\",\\\\n         \\\\\\\"mcp[cli]\\\\\\\",\\\\n         \\\\\\\"mcp\\\\\\\",\\\\n         \\\\\\\"run\\\\\\\",\\\\n         \\\\\\\"${PWD}/src/codegen_lab/prompt_library.py\\\\\\\"\\\\n       ]\\\\n     },\\\\n     \\\\\\\"sequentialthinking\\\\\\\": {\\\\n       \\\\\\\"command\\\\\\\": \\\\\\\"npx\\\\\\\",\\\\n       \\\\\\\"args\\\\\\\": [\\\\n         \\\\\\\"-y\\\\\\\",\\\\n         \\\\\\\"@modelcontextprotocol/server-sequential-thinking\\\\\\\"\\\\n       ]\\\\n     }\\\\n   }\\\\n   ```\\\\n   Note: The path in the prompt_library entry should be adjusted to use the actual project path (PWD) instead of hardcoded paths.\\\\n\\\", \\\"directory_exists\\\": true, \\\"directory_path\\\": \\\"./hack/drafts/cursor_rules\\\", \\\"mkdir_command\\\": \\\"mkdir -p ./hack/drafts/cursor_rules .cursor/rules || true\\\", \\\"directory_structure\\\": \\\"Directory structure to create at ./hack/drafts/cursor_rules\\\", \\\"workspace_prepared\\\": false, \\\"workspace_result\\\": {\\\"status\\\": \\\"success\\\", \\\"message\\\": \\\"Instructions provided for workspace preparation at ./hack/drafts/cursor_rules\\\", \\\"directory_exists\\\": true, \\\"directory_path\\\": \\\"./hack/drafts/cursor_rules\\\", \\\"mkdir_command\\\": \\\"mkdir -p ./hack/drafts/cursor_rules .cursor/rules || true\\\"}}\"}],\"isError\":false}\n</code></pre>"},{"location":"mcp-servers/prompt_library_mcp/#create_cursor_rule_files","title":"create_cursor_rule_files","text":"<pre><code>{\"method\":\"tools/call\",\"params\":{\"name\":\"create_cursor_rule_files\",\"arguments\":{\"rule_names\":[\"bossjones\"]},\"_meta\":{\"progressToken\":7}}}\n</code></pre> <pre><code>{\"content\":[{\"type\":\"text\",\"text\":\"{\\\"success\\\": true, \\\"operations\\\": [{\\\"type\\\": \\\"create_directory\\\", \\\"path\\\": \\\"hack/drafts/cursor_rules\\\", \\\"options\\\": {\\\"parents\\\": true, \\\"exist_ok\\\": true}}, {\\\"type\\\": \\\"write_file\\\", \\\"path\\\": \\\"hack/drafts/cursor_rules/bossjones.mdc.md\\\", \\\"content\\\": \\\"\\\", \\\"options\\\": {\\\"mode\\\": \\\"w\\\"}}], \\\"created_files\\\": [\\\"bossjones.mdc.md\\\"], \\\"touch_command\\\": \\\"touch hack/drafts/cursor_rules/bossjones.mdc.md\\\", \\\"next_steps\\\": \\\"\\\\nNext steps:\\\\n1. Write content to each file sequentially\\\\n2. Deploy the rules using 'make update-cursor-rules'\\\\n3. Verify the rules are correctly deployed to .cursor/rules\\\\n\\\", \\\"message\\\": \\\"Instructions to create 1 empty cursor rule files in hack/drafts/cursor_rules. \\\\nNext steps:\\\\n1. Write content to each file sequentially\\\\n2. Deploy the rules using 'make update-cursor-rules'\\\\n3. Verify the rules are correctly deployed to .cursor/rules\\\\n\\\"}\"}],\"isError\":false}\n</code></pre>"},{"location":"mcp-servers/prompt_library_mcp/#ensure_makefile_task","title":"ensure_makefile_task","text":"<pre><code>{\"method\":\"tools/call\",\"params\":{\"name\":\"ensure_makefile_task\",\"arguments\":{\"makefile_path\":\"Makefile\"},\"_meta\":{\"progressToken\":8}}}\n</code></pre> <pre><code>{\"content\":[{\"type\":\"text\",\"text\":\"{\\\"operations\\\": [{\\\"type\\\": \\\"check_file_exists\\\", \\\"path\\\": \\\"Makefile\\\"}, {\\\"type\\\": \\\"read_file\\\", \\\"path\\\": \\\"Makefile\\\", \\\"options\\\": {\\\"encoding\\\": \\\"utf-8\\\"}}], \\\"requires_result\\\": true, \\\"message\\\": \\\"Instructions to check Makefile and update if needed\\\", \\\"update_task_content\\\": \\\"\\\\n# Cursor Rules\\\\n.PHONY: update-cursor-rules\\\\nupdate-cursor-rules:  ## Update cursor rules from prompts/drafts/cursor_rules\\\\n\\\\t# Create .cursor/rules directory if it doesn't exist.\\\\n\\\\t# Note: at the time of writing, cursor does not support generating .mdc files via Composer Agent.s\\\\n\\\\tmkdir -p .cursor/rules || true\\\\n\\\\t# Copy files from hack/prompts/drafts/cursor_rules to .cursor/rules and change extension to .mdc\\\\n\\\\t# Exclude README.md files from being copied\\\\n\\\\tfind hack/drafts/cursor_rules -type f -name \\\\\\\"*.md\\\\\\\" ! -name \\\\\\\"README.md\\\\\\\" -exec sh -c 'for file; do target=$${file%.md}; cp -a \\\\\\\"$$file\\\\\\\" \\\\\\\".cursor/rules/$$(basename \\\\\\\"$$target\\\\\\\")\\\\\\\"; done' sh {} +\\\\n\\\", \\\"next_steps\\\": \\\"After applying these operations, you'll need to check if the Makefile exists and contains the update-cursor-rules task, then update or create it accordingly.\\\"}\"}],\"isError\":false}\n</code></pre>"},{"location":"mcp-servers/prompt_library_mcp/#instruct_custom_repo_rules_generation","title":"instruct_custom_repo_rules_generation","text":"<pre><code>{\n  \"repo_summary\": \"A Python web application built with FastAPI framework, using Python 3.12+. The project follows a modular structure with routers and internal components, suggesting a well-organized API service. The project uses modern Python tooling including uv for dependency management and includes Docker support for containerization. The application appears to be designed with a focus on API development and follows FastAPI's recommended project structure.\"\n}\n</code></pre> <pre><code>{\n  \"content\": [\n    {\n      \"type\": \"text\",\n      \"text\": {\n        \"status\": \"success\",\n        \"message\": \"Cursor Rules Generation Instructions:1. Analyze repository structure and codebase:   Using the provided repository summary to identify languages, frameworks, and patterns used.2. Generate recommended cursor rules:   Invoke the recommend_cursor_rules tool with the repository summary to generate a list of tailored cursor rules.3. Prepare the staging directory:   Run `touch hack/drafts/cursor_rules/{rule-name}.mdc.md` for each rule name to ensure cursor creates the files properly.4. Implement cursor rules systematically:   Create each cursor rule in the hack/drafts/cursor_rules directory with proper formatting and structure.5. Format requirements for cursor rules:   Each cursor rule must include:   - Proper filename with .mdc.md extension (e.g., rule-name.mdc.md)   - Frontmatter with description, globs, and alwaysApply configuration   - Rule content with name, description, filters, actions, examples, and metadata6. Implementation process:   For each rule recommended by recommend_cursor_rules:   - Create the rule file in hack/drafts/cursor_rules/   - Implement the rule with proper structure and formatting   - Ensure the rule includes appropriate filters and actions   - Add relevant examples and metadata7. Verification:   Confirm each rule has been properly formatted with:   - Descriptive name and purpose   - Appropriate glob patterns based on file types identified in the summary   - Correct alwaysApply setting (typically false)   - Comprehensive rule content with examples8. Audit generated files:   For each rule file created, run `head -10 hack/drafts/cursor_rules/{rule-name}.mdc.md | cat` to validate that frontmatter is present and properly formatted.9. Deploy to production:   Run `make update-cursor-rules` to move the rules from the staging directory to production.10. Next steps:   The rules should now be available in the .cursor/rules directory for production use.   Consider using sequentialthinking for complex rules that require detailed reasoning and step-by-step analysis.\",\n        \"cursor_rules_generation\": true,\n        \"analysis_method\": \"repository_summary\",\n        \"repo_summary\": \"A Python web application built with FastAPI framework, using Python 3.12+. The project follows a modular structure with routers and internal components, suggesting a well-organized API service. The project uses modern Python tooling including uv for dependency management and includes Docker support for containerization. The application appears to be designed with a focus on API development and follows FastAPI's recommended project structure.\",\n        \"output_directory\": \"hack/drafts/cursor_rules\",\n        \"rule_format\": {\n          \"filename\": \"{rule-name}.mdc.md\",\n          \"frontmatter\": {\n            \"description\": \"Brief description of the rule's purpose\",\n            \"globs\": \"File patterns the rule applies to (e.g., *.py)\",\n            \"alwaysApply\": \"Boolean value (typically false)\"\n          },\n          \"rule_structure\": {\n            \"name\": \"rule-name\",\n            \"description\": \"Detailed description of the rule\",\n            \"filters\": \"Conditions for when the rule applies\",\n            \"actions\": \"Suggestions or requirements provided by the rule\",\n            \"examples\": \"Example inputs and outputs\",\n            \"metadata\": \"Priority, version, and tags\"\n          }\n        },\n        \"rule_example_template\": {\n          \"frontmatter\": \"---\\ndescription: Brief description of the rule\\nglobs: *.py  # File patterns to match\\nalwaysApply: false  # Whether to always apply the rule\\n---\",\n          \"title_and_introduction\": \"# Rule Title\\nBrief description of what the rule covers.\",\n          \"rule_definition\": \"&lt;rule&gt;\\nname: rule_name\\ndescription: Concise description of the rule\\nfilters:\\n  # Match specific file types\\n  - type: file_extension\\n    pattern: \\\"\\\\\\\\.py$\\\"\\n  # Match specific paths\\n  - type: file_path\\n    pattern: \\\"tests?/\\\"\\n  # Match specific content\\n  - type: content\\n    pattern: \\\"(?i)(relevant|terms|to|match)\\\"\\nactions:\\n  - type: suggest\\n    message: |\\n      # Main Heading\\n      Explanation of the rule and its purpose.\\n      ## Subheading\\n      Detailed guidance with code examples:\\n      ```python\\n      # Example code\\n      def example_function():\\n          return \\\"example\\\"\\n      ```\\n      ## Another Subheading\\n      More detailed information and best practices.\\nexamples:\\n  - input: |\\n      # User query example\\n      I want to do X with Y\\n    output: |\\n      Here's how to do X with Y:\\n      \\n      ```python\\n      # Solution code\\n      ```\\nmetadata:\\n  priority: high\\n  version: 1.0\\n  tags:\\n    - relevant\\n    - tags\\n    - here\\n&lt;/rule&gt;\"\n        },\n        \"key_components_explanation\": {\n          \"frontmatter\": \"YAML metadata at the top\",\n          \"title_and_introduction\": \"Markdown heading and description\",\n          \"rule_definition\": \"Enclosed in &lt;rule&gt; tags with basic properties, filters, actions, examples, and metadata\"\n        },\n        \"multishot_prompting_strategy\": \"Use the template as a basis for creating multiple examples that show different rule variations tailored to specific language features, frameworks, or coding patterns identified in the repository\",\n        \"generation_status\": {\n          \"status\": \"ready\",\n          \"message\": \"Ready to generate cursor rules based on repository summary\",\n          \"input_source\": \"recommend_cursor_rules tool\",\n          \"output_destination\": \"hack/drafts/cursor_rules\",\n          \"production_destination\": \".cursor/rules\"\n        },\n        \"deployment_commands\": {\n          \"prepare_files\": \"touch hack/drafts/cursor_rules/{rule-name}.mdc.md\",\n          \"audit_files\": \"head -10 hack/drafts/cursor_rules/{rule-name}.mdc.md | cat\",\n          \"deploy_to_production\": \"make update-cursor-rules\"\n        },\n        \"processing_tools\": {\n          \"rule_recommendation\": \"recommend_cursor_rules\",\n          \"complex_reasoning\": \"sequentialthinking\"\n        }\n      }\n    }\n  ],\n  \"isError\": false\n}\n</code></pre>"},{"location":"mcp-servers/prompt_library_mcp_server_tools/","title":"Prompt Library MCP Server Tools","text":"<p>This document describes the MCP tools available in the Prompt Library server for managing cursor rules and repository analysis.</p>"},{"location":"mcp-servers/prompt_library_mcp_server_tools/#core-tools","title":"Core Tools","text":""},{"location":"mcp-servers/prompt_library_mcp_server_tools/#repository-analysis","title":"Repository Analysis","text":"<ul> <li> <p><code>instruct_repo_analysis</code>: Runs a repository analysis to gather information for cursor rule creation. This tool analyzes the repository structure and content to provide insights for generating appropriate cursor rules.</p> </li> <li> <p><code>instruct_custom_repo_rules_generation</code>: Executes a cursor rules generation process based on repository analysis. Takes a repository summary as input and generates custom cursor rules based on the identified technologies and patterns.</p> </li> </ul>"},{"location":"mcp-servers/prompt_library_mcp_server_tools/#static-rule-management","title":"Static Rule Management","text":"<ul> <li> <p><code>get_static_cursor_rule</code>: Retrieves a specific cursor rule file by name to be written to the caller's <code>.cursor/rules</code> directory. Useful for getting individual predefined cursor rules.</p> </li> <li> <p><code>get_static_cursor_rules</code>: Retrieves multiple cursor rule files to be written to the caller's <code>.cursor/rules</code> directory. Allows batch retrieval of predefined cursor rules.</p> <pre><code>graph TD\nA[get_static_cursor_rules] --&gt; B[get_static_cursor_rule]\n</code></pre> </li> </ul>"},{"location":"mcp-servers/prompt_library_mcp_server_tools/#rule-creation-and-management","title":"Rule Creation and Management","text":"<ul> <li> <p><code>save_cursor_rule</code>: Saves a cursor rule to the cursor rules directory in the project. Takes a rule name and content in MDC format as input.</p> </li> <li> <p><code>recommend_cursor_rules</code>: Analyzes a repository summary and recommends cursor rules to generate based on identified technologies and patterns.</p> </li> </ul>"},{"location":"mcp-servers/prompt_library_mcp_server_tools/#workspace-preparation","title":"Workspace Preparation","text":"<ul> <li><code>prep_workspace</code>: Prepares the workspace for cursor rules by returning natural language instructions. Sets up the necessary directory structure and configuration.</li> </ul>"},{"location":"mcp-servers/prompt_library_mcp_server_tools/#file-management","title":"File Management","text":"<ul> <li><code>create_cursor_rule_files</code>: Creates empty cursor rule files and provides instructions for sequential content creation. Useful for setting up new rule templates.</li> </ul>"},{"location":"mcp-servers/prompt_library_mcp_server_tools/#makefile-integration","title":"Makefile Integration","text":"<ul> <li> <p><code>ensure_makefile_task</code>: Ensures the Makefile has the update-cursor-rules task. Verifies and adds necessary build automation.</p> </li> <li> <p><code>process_makefile_result</code>: Processes the results of checking the Makefile and updates it if needed. Handles Makefile modifications.</p> </li> <li> <p><code>run_update_cursor_rules</code>: Runs the update-cursor-rules Makefile task to deploy cursor rules. Executes the build automation.</p> </li> <li> <p><code>process_update_cursor_rules_result</code>: Processes the results of checking the Makefile and runs the update-cursor-rules task if possible.</p> </li> <li> <p><code>finalize_update_cursor_rules</code>: Processes the results of running the update-cursor-rules task. Handles completion and cleanup.</p> </li> </ul>"},{"location":"mcp-servers/prompt_library_mcp_server_tools/#docker-integration","title":"Docker Integration","text":"<ul> <li> <p><code>update_dockerignore</code>: Updates the .dockerignore file to exclude the cursor rules drafts directory.</p> </li> <li> <p><code>process_dockerignore_result</code>: Processes the results of checking the .dockerignore file and updates it if needed.</p> </li> </ul>"},{"location":"mcp-servers/prompt_library_mcp_server_tools/#workflow-management","title":"Workflow Management","text":"<ul> <li> <p><code>cursor_rules_workflow</code>: Executes the complete cursor rules workflow. Orchestrates the entire process of rule creation and deployment.</p> <pre><code>graph TD\nA[cursor_rules_workflow] --&gt; B[prep_workspace]\nA --&gt; C[create_cursor_rule_files]\nA --&gt; D[ensure_makefile_task]\nA --&gt; E[update_dockerignore]\n</code></pre> </li> <li> <p><code>process_cursor_rules_workflow_result</code>: Processes the results of executing the cursor rules workflow.</p> </li> </ul>"},{"location":"mcp-servers/prompt_library_mcp_server_tools/#advanced-workflow","title":"Advanced Workflow","text":"<ul> <li> <p><code>plan_and_execute_prompt_library_workflow</code>: Executes a structured workflow for generating custom cursor rules based on repository analysis. This is a comprehensive tool that manages the entire process from analysis to rule generation.</p> <pre><code>graph TD\nA[plan_and_execute_prompt_library_workflow] --&gt; B[execute_phase_1]\nA --&gt; C[execute_phase_2]\nA --&gt; D[execute_phase_3]\nA --&gt; E[execute_phase_4]\nA --&gt; F[execute_phase_5]\n</code></pre> </li> </ul>"},{"location":"mcp-servers/prompt_library_mcp_server_tools/#workflow-phases","title":"Workflow Phases","text":"<p>The prompt library implements a 5-phase workflow for cursor rule generation:</p> <ol> <li> <p><code>execute_phase_1</code>: Initial repository analysis and setup</p> <pre><code>graph TD\nA[execute_phase_1] --&gt; B[prep_workspace]\nA --&gt; C[repo_analysis_prompt]\n</code></pre> </li> <li> <p><code>execute_phase_2</code>: Rule template creation and configuration</p> <pre><code>graph TD\nA[execute_phase_2] --&gt; B[recommend_cursor_rules]\n</code></pre> </li> <li> <p><code>execute_phase_3</code>: Rule content generation and validation</p> <pre><code>graph TD\nA[execute_phase_3] --&gt; B[ensure_makefile_task]\nA --&gt; C[update_dockerignore]\nA --&gt; D[create_cursor_rule_files]\n</code></pre> </li> <li> <p><code>execute_phase_4</code>: Rule deployment and integration</p> <pre><code>graph TD\nA[execute_phase_4] --&gt; B[save_cursor_rule]\n</code></pre> </li> <li> <p><code>execute_phase_5</code>: Final verification and cleanup</p> <pre><code>graph TD\nA[execute_phase_5] --&gt; B[run_update_cursor_rules]\n</code></pre> </li> </ol> <p>Each phase is executed sequentially as part of the complete workflow, ensuring a systematic approach to cursor rule generation and management.</p>"},{"location":"tools/cursor-rules/","title":"Cursor Rules for Iterative Development","text":""},{"location":"tools/cursor-rules/#overview","title":"Overview","text":"<p>This document describes the collection of Cursor rules implemented for Harper Reed's iterative development workflow. These rules help automate and guide developers through the process of working with existing codebases in a structured, incremental manner.</p>"},{"location":"tools/cursor-rules/#what-are-cursor-rules","title":"What are Cursor Rules?","text":"<p>Cursor rules are custom instructions for Cursor's AI assistant that help automate repetitive tasks, enforce best practices, and guide you through complex workflows. They're defined in <code>.mdc.md</code> files and are triggered based on specific patterns in your messages or the files you're working with.</p>"},{"location":"tools/cursor-rules/#rule-collection-for-iterative-development","title":"Rule Collection for Iterative Development","text":"<p>This collection implements Harper Reed's non-greenfield iteration workflow as described in their blog post. The workflow is specifically designed for working with existing codebases rather than greenfield (new) projects.</p>"},{"location":"tools/cursor-rules/#workflow-philosophy","title":"Workflow Philosophy","text":"<p>Harper's non-greenfield iteration workflow involves:</p> <ol> <li>Getting context from the existing codebase</li> <li>Planning per task rather than for the entire project</li> <li>Implementing incrementally with constant testing and feedback</li> <li>Debugging and fixing issues as they arise</li> </ol>"},{"location":"tools/cursor-rules/#rules-in-this-collection","title":"Rules in this Collection","text":"<p>This collection contains the following cursor rules:</p> <ol> <li>Incremental Task Planner - Breaks down a development task into smaller, manageable steps for incremental implementation</li> <li>Code Context Gatherer - Efficiently gathers code context from the codebase for LLM consumption</li> <li>Test Generator - Identifies missing tests and generates appropriate test cases for the codebase</li> <li>Iterative Debug and Fix - Provides guidance for debugging and fixing issues that arise during iterative development</li> <li>Iterative Development Workflow - Master rule that provides a structured workflow for incremental development in existing codebases</li> </ol>"},{"location":"tools/cursor-rules/#detailed-rule-descriptions","title":"Detailed Rule Descriptions","text":""},{"location":"tools/cursor-rules/#1-incremental-task-planner","title":"1. Incremental Task Planner","text":"<p>Purpose: Help break down a development task into smaller, manageable steps for incremental implementation.</p> <p>When to use: When you need to plan the implementation of a new feature or bug fix in an existing codebase.</p> <p>Activation phrases: - \"Plan this feature\" - \"Break down this task\" - \"Help me implement this incrementally\" - \"Steps for adding [feature]\"</p> <p>What it does: - Analyzes the task requirements - Identifies relevant parts of the codebase - Breaks the task into small, logical steps - Creates a todo checklist - Plans for testing - Provides implementation guidance</p>"},{"location":"tools/cursor-rules/#2-code-context-gatherer","title":"2. Code Context Gatherer","text":"<p>Purpose: Efficiently gather code context from the codebase for LLM consumption.</p> <p>When to use: When you need to understand how a specific part of the codebase works.</p> <p>Activation phrases: - \"Help me understand this code\" - \"Gather context for [feature/component]\" - \"How does [system/feature] work?\" - \"Explain the existing code\"</p> <p>What it does: - Identifies relevant components and files - Efficiently collects context from key files - Organizes the context in a logical structure - Summarizes architecture and key patterns - Highlights potential areas for modification</p>"},{"location":"tools/cursor-rules/#3-test-generator","title":"3. Test Generator","text":"<p>Purpose: Identify missing tests and generate appropriate test cases for the codebase.</p> <p>When to use: When you need to improve test coverage for an existing component.</p> <p>Activation phrases: - \"Generate tests for [component]\" - \"We need tests for [feature]\" - \"Add missing test coverage\" - \"Write tests for this code\"</p> <p>What it does: - Analyzes the code for testable components - Determines appropriate test types (unit, integration, etc.) - Follows the project's testing patterns - Generates comprehensive test cases - Includes edge cases and error conditions - Implements tests with proper typing and documentation</p>"},{"location":"tools/cursor-rules/#4-iterative-debug-and-fix","title":"4. Iterative Debug and Fix","text":"<p>Purpose: Provide guidance for debugging and fixing issues that arise during iterative development.</p> <p>When to use: When you encounter a bug or an issue in your implementation.</p> <p>Activation phrases: - \"Debug this issue\" - \"Fix this error\" - \"This isn't working correctly\" - \"Help me troubleshoot [problem]\"</p> <p>What it does: - Helps gather comprehensive error information - Guides you through reproducing and isolating the issue - Provides a systematic approach to debugging - Assists in testing hypotheses about the root cause - Helps design and implement targeted fixes - Guides verification and regression testing - Suggests preventative measures for the future</p>"},{"location":"tools/cursor-rules/#5-iterative-development-workflow","title":"5. Iterative Development Workflow","text":"<p>Purpose: Provide a structured workflow for incremental development in existing codebases.</p> <p>When to use: When you want guidance on the overall process of implementing a feature or fix.</p> <p>Activation phrases: - \"Help me develop this feature\" - \"Guide me through implementing [feature]\" - \"What's the workflow for adding [feature]\" - \"Non-greenfield development process\"</p> <p>What it does: - Guides you through the three phases of iterative development:   1. Understand and Plan   2. Implement Incrementally   3. Refine and Complete - Provides structured steps for each phase - Helps maintain focus on incremental progress - Ensures quality through testing and refactoring</p>"},{"location":"tools/cursor-rules/#how-to-use-these-rules","title":"How to Use These Rules","text":""},{"location":"tools/cursor-rules/#installation","title":"Installation","text":"<p>To use these rules in your project:</p> <ol> <li> <p>Ensure you have a <code>.cursor/rules/</code> directory in your project root:    <pre><code>mkdir -p .cursor/rules\n</code></pre></p> </li> <li> <p>Copy the rule files from the source location:    <pre><code>cp hack/drafts/cursor_rules/*.mdc.md .cursor/rules/\n</code></pre></p> </li> </ol>"},{"location":"tools/cursor-rules/#usage-flow","title":"Usage Flow","text":"<p>Here's how you might use these rules in a typical development session:</p> <ol> <li>Start with the workflow: \"Help me implement a feature using the iterative development workflow\"</li> <li>Gather context: \"Help me understand the current authentication system\"</li> <li>Plan your task: \"Break down the task of adding two-factor authentication\"</li> <li>Implement incrementally: \"Help me implement the first step of the 2FA feature\"</li> <li>Add tests: \"Generate tests for the 2FA authentication code\"</li> <li>Debug issues: \"The 2FA verification isn't working, help me debug it\"</li> </ol>"},{"location":"tools/cursor-rules/#example-conversations","title":"Example Conversations","text":""},{"location":"tools/cursor-rules/#example-1-planning-a-new-feature","title":"Example 1: Planning a New Feature","text":"<p>You: \"I need to add a new payment method to our existing e-commerce system.\"</p> <p>Cursor Assistant: [Using Incremental Task Planner rule] \"I'll help you break that down into manageable steps...\"</p>"},{"location":"tools/cursor-rules/#example-2-understanding-existing-code","title":"Example 2: Understanding Existing Code","text":"<p>You: \"I need to understand how our user authentication system works.\"</p> <p>Cursor Assistant: [Using Code Context Gatherer rule] \"Let me gather the relevant code and explain how it works...\"</p>"},{"location":"tools/cursor-rules/#example-3-adding-tests","title":"Example 3: Adding Tests","text":"<p>You: \"We need to add tests for our newly implemented payment service.\"</p> <p>Cursor Assistant: [Using Test Generator rule] \"I'll help you generate comprehensive tests for the payment service...\"</p>"},{"location":"tools/cursor-rules/#example-4-fixing-an-issue","title":"Example 4: Fixing an Issue","text":"<p>You: \"The payment processing is failing when users have special characters in their names.\"</p> <p>Cursor Assistant: [Using Iterative Debug and Fix rule] \"Let's debug this issue systematically...\"</p>"},{"location":"tools/cursor-rules/#customizing-the-rules","title":"Customizing the Rules","text":"<p>You can customize these rules by editing the <code>.mdc.md</code> files in your <code>.cursor/rules/</code> directory:</p> <ol> <li>Modify the filters to match your specific project patterns</li> <li>Adjust the instructions to align with your team's practices</li> <li>Add or modify examples to better match your codebase</li> </ol>"},{"location":"tools/cursor-rules/#credits","title":"Credits","text":"<p>These rules are based on Harper Reed's blog post \"My LLM codegen workflow atm\" which describes an effective iterative development workflow using LLMs.</p>"},{"location":"tools/uv-workspace/","title":"UV Workspace Management","text":"<p>This document provides documentation for working with UV workspaces in this project. UV workspaces allow you to manage multiple Python packages within a single repository, with proper dependency management and isolation.</p>"},{"location":"tools/uv-workspace/#quick-reference","title":"Quick Reference","text":"Command Description <code>make uv-workspace-lock</code> Update lockfile for entire workspace <code>make uv-workspace-sync</code> Install dependencies for workspace root <code>make uv-workspace-package-sync package=name</code> Install dependencies for specific package <code>make uv-workspace-run package=name cmd=\"command\"</code> Run command in specific package <code>make uv-workspace-init-package name=new-package</code> Initialize a new package <code>make uv-workspace-add-dep package=name</code> Add package as workspace dependency"},{"location":"tools/uv-workspace/#what-is-a-uv-workspace","title":"What is a UV Workspace?","text":"<p>UV Workspace is a feature of the UV package manager that allows for managing multiple packages within a single repository. Benefits include:</p> <ul> <li>Single lockfile for the entire workspace</li> <li>Proper isolation between packages</li> <li>Ability to develop interdependent packages locally</li> <li>Simplified dependency management</li> </ul>"},{"location":"tools/uv-workspace/#workspace-structure","title":"Workspace Structure","text":"<p>Our workspace is structured as follows:</p> <pre><code>codegen-lab/\n\u251c\u2500\u2500 pyproject.toml       # Workspace root config\n\u251c\u2500\u2500 packages/            # Directory containing workspace packages\n\u2502   \u251c\u2500\u2500 package-a/       # Individual package\n\u2502   \u2502   \u251c\u2500\u2500 pyproject.toml\n\u2502   \u2502   \u2514\u2500\u2500 src/\n\u2502   \u2502       \u2514\u2500\u2500 package_a/\n\u2502   \u2502           \u2514\u2500\u2500 __init__.py\n\u2502   \u2514\u2500\u2500 cursor-rules-mcp-server/  # Example package\n\u2502       \u251c\u2500\u2500 pyproject.toml\n\u2502       \u2514\u2500\u2500 src/\n\u2502           \u2514\u2500\u2500 cursor_rules_mcp_server/\n\u2502               \u2514\u2500\u2500 __init__.py\n\u2514\u2500\u2500 src/\n    \u2514\u2500\u2500 codegen_lab/     # Workspace root package\n        \u2514\u2500\u2500 __init__.py\n</code></pre>"},{"location":"tools/uv-workspace/#available-commands","title":"Available Commands","text":"<p>These commands are available in the Makefile to help you work with UV workspaces:</p>"},{"location":"tools/uv-workspace/#core-workspace-management-commands","title":"Core Workspace Management Commands","text":""},{"location":"tools/uv-workspace/#update-lockfile-for-the-entire-workspace","title":"Update Lockfile for the Entire Workspace","text":"<pre><code>make uv-workspace-lock\n</code></pre> <p>This command updates the lockfile for the entire workspace, resolving all dependencies across all packages and ensuring they work well together.</p>"},{"location":"tools/uv-workspace/#install-dependencies-for-the-workspace-root","title":"Install Dependencies for the Workspace Root","text":"<pre><code>make uv-workspace-sync\n</code></pre> <p>This command installs all dependencies required by the workspace root package.</p>"},{"location":"tools/uv-workspace/#install-dependencies-for-a-specific-package","title":"Install Dependencies for a Specific Package","text":"<pre><code>make uv-workspace-package-sync package=cursor-rules-mcp-server\n</code></pre> <p>This command installs all dependencies required by a specific package. Replace <code>cursor-rules-mcp-server</code> with the name of your package.</p>"},{"location":"tools/uv-workspace/#run-a-command-in-a-specific-package","title":"Run a Command in a Specific Package","text":"<pre><code>make uv-workspace-run package=cursor-rules-mcp-server cmd=\"python -m cursor_rules_mcp_server\"\n</code></pre> <p>This command runs a specified command within the context of a specific package. Replace <code>cursor-rules-mcp-server</code> with the name of your package and <code>python -m cursor_rules_mcp_server</code> with the command you want to run.</p>"},{"location":"tools/uv-workspace/#package-management-utilities","title":"Package Management Utilities","text":""},{"location":"tools/uv-workspace/#initialize-a-new-package-in-the-workspace","title":"Initialize a New Package in the Workspace","text":"<pre><code>make uv-workspace-init-package name=new-package\n</code></pre> <p>This command initializes a new package in the workspace with the following: - Creates the proper directory structure under <code>packages/new-package/</code> - Generates a basic <code>pyproject.toml</code> file with required fields - Creates an initial <code>__init__.py</code> file - Adds a <code>README.md</code> file</p> <p>After running this command, you'll need to add the package as a workspace dependency in the root <code>pyproject.toml</code> file, which can be done with the command below.</p>"},{"location":"tools/uv-workspace/#add-a-workspace-package-as-a-dependency-to-the-root","title":"Add a Workspace Package as a Dependency to the Root","text":"<pre><code>make uv-workspace-add-dep package=new-package\n</code></pre> <p>This command adds a workspace package as a dependency to the root <code>pyproject.toml</code> file. After running this command, you should run <code>make uv-workspace-lock</code> to update the lockfile.</p>"},{"location":"tools/uv-workspace/#working-with-workspace-packages","title":"Working with Workspace Packages","text":""},{"location":"tools/uv-workspace/#creating-a-new-package","title":"Creating a New Package","text":"<ol> <li> <p>Initialize the package:    <pre><code>make uv-workspace-init-package name=my-new-package\n</code></pre></p> </li> <li> <p>Add it as a workspace dependency:    <pre><code>make uv-workspace-add-dep package=my-new-package\n</code></pre></p> </li> <li> <p>Update the lockfile:    <pre><code>make uv-workspace-lock\n</code></pre></p> </li> </ol>"},{"location":"tools/uv-workspace/#developing-across-packages","title":"Developing Across Packages","text":"<p>If you need to use one workspace package in another:</p> <ol> <li> <p>Add the dependency in the package's <code>pyproject.toml</code>:    <pre><code>[project]\ndependencies = [\n    \"other-workspace-package\",\n]\n</code></pre></p> </li> <li> <p>Run the workspace lock to update dependencies:    <pre><code>make uv-workspace-lock\n</code></pre></p> </li> </ol>"},{"location":"tools/uv-workspace/#running-tests-for-a-specific-package","title":"Running Tests for a Specific Package","text":"<pre><code>make uv-workspace-run package=my-package cmd=\"pytest\"\n</code></pre>"},{"location":"tools/uv-workspace/#troubleshooting","title":"Troubleshooting","text":""},{"location":"tools/uv-workspace/#dependency-resolution-issues","title":"Dependency Resolution Issues","text":"<p>If you encounter dependency resolution issues:</p> <ol> <li> <p>Make sure all workspace packages have compatible Python version requirements:    <pre><code>grep \"requires-python\" packages/*/pyproject.toml\n</code></pre></p> </li> <li> <p>Try reinstalling all dependencies:    <pre><code>make uv-workspace-sync\n</code></pre></p> </li> </ol>"},{"location":"tools/uv-workspace/#package-not-found","title":"Package Not Found","text":"<p>If a workspace package cannot be imported:</p> <ol> <li> <p>Verify it's properly added to the workspace sources in root <code>pyproject.toml</code>:    <pre><code>[tool.uv.sources]\nmy-package = { workspace = true }\n</code></pre></p> </li> <li> <p>Ensure the package directory structure follows the convention:    <pre><code>packages/my-package/src/my_package/__init__.py\n</code></pre></p> </li> </ol>"},{"location":"tools/uv-workspace/#further-reading","title":"Further Reading","text":"<ul> <li>UV Package Manager Documentation</li> <li>UV Workspace Documentation</li> </ul>"},{"location":"user-guide/configuration/","title":"Configuration","text":"<p>This page explains how to configure Codegen Lab for your specific needs.</p>"},{"location":"user-guide/configuration/#configuration-file","title":"Configuration File","text":"<p>Codegen Lab uses a YAML-based configuration file located at <code>config.yaml</code> in the project root directory. You can also specify a custom configuration file path when running Codegen Lab.</p>"},{"location":"user-guide/configuration/#example-configuration","title":"Example Configuration","text":"<pre><code># Basic configuration\nname: \"My Codegen Project\"\nversion: \"1.0.0\"\n\n# Environment settings\nenvironment:\n  python_version: \"3.12.0\"\n  cuda_support: true\n  debug_mode: false\n\n# Model settings\nmodel:\n  name: \"gpt-4\"\n  temperature: 0.7\n  max_tokens: 2048\n  top_p: 0.95\n\n# Paths\npaths:\n  output_dir: \"./generated\"\n  templates_dir: \"./templates\"\n  cache_dir: \"./.cache\"\n\n# Logging\nlogging:\n  level: \"INFO\"\n  file: \"./logs/codegen.log\"\n  rotation: \"daily\"\n</code></pre>"},{"location":"user-guide/configuration/#configuration-options","title":"Configuration Options","text":""},{"location":"user-guide/configuration/#basic-configuration","title":"Basic Configuration","text":"Option Description Default <code>name</code> Project name \"Codegen Project\" <code>version</code> Project version \"0.1.0\""},{"location":"user-guide/configuration/#environment-settings","title":"Environment Settings","text":"Option Description Default <code>environment.python_version</code> Python version to use \"3.10.0\" <code>environment.cuda_support</code> Enable CUDA support false <code>environment.debug_mode</code> Enable debug mode false"},{"location":"user-guide/configuration/#model-settings","title":"Model Settings","text":"Option Description Default <code>model.name</code> Model to use \"gpt-3.5-turbo\" <code>model.temperature</code> Temperature parameter 0.7 <code>model.max_tokens</code> Maximum tokens to generate 1024 <code>model.top_p</code> Top-p sampling parameter 0.9"},{"location":"user-guide/configuration/#paths","title":"Paths","text":"Option Description Default <code>paths.output_dir</code> Output directory \"./generated\" <code>paths.templates_dir</code> Templates directory \"./templates\" <code>paths.cache_dir</code> Cache directory \"./.cache\""},{"location":"user-guide/configuration/#logging","title":"Logging","text":"Option Description Default <code>logging.level</code> Logging level \"INFO\" <code>logging.file</code> Log file path \"./logs/codegen.log\" <code>logging.rotation</code> Log rotation \"daily\""},{"location":"user-guide/configuration/#environment-variables","title":"Environment Variables","text":"<p>Configuration can also be specified using environment variables. Environment variables take precedence over config file settings.</p> Environment Variable Config Equivalent Description <code>CODEGEN_MODEL_NAME</code> <code>model.name</code> Model to use <code>CODEGEN_MODEL_TEMP</code> <code>model.temperature</code> Temperature parameter <code>CODEGEN_DEBUG</code> <code>environment.debug_mode</code> Enable debug mode <code>CODEGEN_OUTPUT_DIR</code> <code>paths.output_dir</code> Output directory <code>CODEGEN_LOG_LEVEL</code> <code>logging.level</code> Logging level"},{"location":"user-guide/configuration/#command-line-arguments","title":"Command Line Arguments","text":"<p>Most configuration options can also be set via command line arguments. Command line arguments take precedence over both environment variables and config file settings.</p> <pre><code>python -m codegen_lab --model gpt-4 --temperature 0.8 --debug --output-dir ./custom_output\n</code></pre>"},{"location":"user-guide/configuration/#uv-workspace-configuration","title":"UV Workspace Configuration","text":"<p>Codegen Lab uses UV workspaces to manage multiple packages within a single repository. The workspace configuration is defined in the root <code>pyproject.toml</code> file.</p>"},{"location":"user-guide/configuration/#root-pyprojecttoml-configuration","title":"Root pyproject.toml Configuration","text":"<p>The root <code>pyproject.toml</code> file contains the configuration for the entire workspace:</p> <pre><code>[build-system]\nrequires = [\"setuptools&gt;=61\"]\nbuild-backend = \"setuptools.build_meta\"\n\n[project]\nname = \"codegen-lab\"\nversion = \"0.1.0\"\ndescription = \"A toolkit for AI-assisted code generation and development\"\nrequires-python = \"&gt;=3.12\"\ndependencies = [\n    \"better-exceptions&gt;=0.3.3\",\n]\n\n# UV Workspace Configuration\n[tool.uv.sources]\n# Workspace packages\ncursor-rules-mcp-server = { workspace = true }\n# Add other packages here\n</code></pre>"},{"location":"user-guide/configuration/#workspace-package-configuration","title":"Workspace Package Configuration","text":"<p>Each package in the <code>packages</code> directory has its own <code>pyproject.toml</code> file:</p> <pre><code>[project]\nname = \"cursor-rules-mcp-server\"\nversion = \"0.1.0\"\ndescription = \"Cursor rules MCP server package\"\nrequires-python = \"&gt;=3.12\"\ndependencies = [\n    \"better-exceptions&gt;=0.3.3\",\n]\n\n[build-system]\nrequires = [\"setuptools&gt;=61\"]\nbuild-backend = \"setuptools.build_meta\"\n\n[tool.setuptools]\npackage-dir = {\"\" = \"src\"}\npackages = [\"cursor_rules_mcp_server\"]\n</code></pre>"},{"location":"user-guide/configuration/#workspace-dependencies","title":"Workspace Dependencies","text":"<p>To use one workspace package as a dependency in another, add it to the dependencies list:</p> <pre><code>[project]\ndependencies = [\n    \"another-workspace-package\",\n]\n</code></pre> <p>Then update the workspace lockfile:</p> <pre><code>make uv-workspace-lock\n</code></pre> <p>For more detailed information about working with UV workspaces, refer to the UV Workspace documentation.</p>"},{"location":"user-guide/docs-automation/","title":"Documentation Automation","text":"<p>This guide explains how Codegen Lab's documentation server is automated to prevent port conflicts and simplify the development workflow.</p>"},{"location":"user-guide/docs-automation/#automatic-port-management","title":"Automatic Port Management","text":"<p>The <code>make docs-serve</code> command now includes automatic port management, featuring:</p> <ol> <li>Automatic Process Detection: The system automatically detects if a MkDocs server is already running on port 8000</li> <li>Process Termination: If requested (with the <code>--kill-existing</code> flag), it automatically terminates existing MkDocs processes</li> <li>Alternative Port Selection: If killing is not possible or not requested, it finds an available port automatically</li> <li>Clear Status Messages: The system provides clear messages about what it's doing and which port it's using</li> </ol>"},{"location":"user-guide/docs-automation/#usage","title":"Usage","text":""},{"location":"user-guide/docs-automation/#basic-usage","title":"Basic Usage","text":"<p>To start the documentation server with automatic port management:</p> <pre><code>make docs-serve\n</code></pre> <p>This will: - Use port 8000 if available - Kill any existing MkDocs processes on port 8000 if found - Fall back to an alternative port if needed</p>"},{"location":"user-guide/docs-automation/#custom-options","title":"Custom Options","text":"<p>You can customize the behavior by running the script directly:</p> <pre><code>uv run python scripts/serve_docs.py --no-kill-existing --port 8080\n</code></pre> <p>Available options: - <code>--port PORT</code>: Specify a custom port (default: 8000) - <code>--kill-existing</code>: Kill existing MkDocs processes on the port (default) - <code>--no-kill-existing</code>: Don't kill existing processes, use an alternative port instead - <code>--no-gh-deploy-url</code>: Don't use GitHub Pages URL in configuration (useful for local development) - <code>--clean</code>: Clean the build directory before building - <code>--build-only</code>: Only build the documentation, don't serve it</p>"},{"location":"user-guide/docs-automation/#how-it-works","title":"How It Works","text":"<p>The automation script (<code>scripts/serve_docs.py</code>) performs the following steps:</p> <ol> <li>Checks if the requested port is already in use</li> <li>Identifies any MkDocs processes running on that port</li> <li>If <code>--kill-existing</code> is set, attempts to terminate those processes</li> <li>If the port is still unavailable, scans for an available port</li> <li>Starts the MkDocs server with the appropriate configuration</li> <li>Provides clear terminal output about what's happening</li> </ol>"},{"location":"user-guide/docs-automation/#graceful-termination","title":"Graceful Termination","text":"<p>The script also handles interruption gracefully. When you press Ctrl+C:</p> <ol> <li>The script catches the keyboard interrupt</li> <li>It sends a graceful termination signal to the MkDocs process</li> <li>It ensures clean exit of all processes</li> </ol> <p>This prevents orphaned processes that might cause port conflicts in the future.</p>"},{"location":"user-guide/installation/","title":"Installation","text":"<p>This page provides detailed installation instructions for Codegen Lab.</p>"},{"location":"user-guide/installation/#system-requirements","title":"System Requirements","text":"<ul> <li>Operating System: macOS, Linux, or Windows</li> <li>Python: Version 3.10 or higher</li> <li>Disk Space: At least 500MB of free disk space</li> <li>Memory: Minimum 4GB RAM recommended</li> </ul>"},{"location":"user-guide/installation/#installation-methods","title":"Installation Methods","text":""},{"location":"user-guide/installation/#method-1-using-uv-recommended","title":"Method 1: Using UV (Recommended)","text":"<p>UV is the preferred package manager for Codegen Lab.</p> <pre><code># Clone the repository\ngit clone https://github.com/bossjones/codegen-lab.git\ncd codegen-lab\n\n# Create and activate virtual environment\nuv venv --python 3.12.0\nsource .venv/bin/activate  # On Windows: .venv\\Scripts\\activate\n\n# Install dependencies\nuv sync --frozen\n</code></pre>"},{"location":"user-guide/installation/#working-with-uv-workspace","title":"Working with UV Workspace","text":"<p>Codegen Lab is structured as a UV workspace, allowing management of multiple packages within a single repository.</p> <pre><code># Install dependencies for the workspace root\nmake uv-workspace-sync\n\n# Install dependencies for a specific package\nmake uv-workspace-package-sync package=cursor-rules-mcp-server\n\n# Run a command in context of a specific package\nmake uv-workspace-run package=cursor-rules-mcp-server cmd=\"python -m cursor_rules_mcp_server\"\n</code></pre> <p>For detailed information about UV workspace management, refer to the UV Workspace documentation.</p>"},{"location":"user-guide/installation/#method-2-using-pip","title":"Method 2: Using pip","text":"<p>While UV is recommended, you can also use pip for installation.</p> <pre><code># Clone the repository\ngit clone https://github.com/bossjones/codegen-lab.git\ncd codegen-lab\n\n# Create and activate virtual environment\npython -m venv .venv\nsource .venv/bin/activate  # On Windows: .venv\\Scripts\\activate\n\n# Install dependencies\npip install -e .\n</code></pre>"},{"location":"user-guide/installation/#method-3-docker","title":"Method 3: Docker","text":"<p>For containerized deployment, you can use Docker.</p> <pre><code># Build the Docker image\ndocker build -t codegen-lab .\n\n# Run the container\ndocker run -it codegen-lab\n</code></pre>"},{"location":"user-guide/installation/#troubleshooting","title":"Troubleshooting","text":""},{"location":"user-guide/installation/#common-issues","title":"Common Issues","text":""},{"location":"user-guide/installation/#issue-1-dependency-conflict","title":"Issue 1: Dependency Conflict","text":"<p>If you encounter dependency conflicts during installation, try:</p> <pre><code>uv sync --frozen --reinstall\n</code></pre>"},{"location":"user-guide/installation/#issue-2-python-version","title":"Issue 2: Python Version","text":"<p>If your Python version is too old, update your Python installation or use a tool like pyenv to manage multiple Python versions.</p>"},{"location":"user-guide/installation/#getting-help","title":"Getting Help","text":"<p>If you encounter any issues during installation, please:</p> <ol> <li>Check the Troubleshooting Guide</li> <li>Open an issue on the GitHub repository</li> </ol>"},{"location":"user-guide/ai-workflows/autogenerate_cursor_rules/","title":"How to Auto-Generate Cursor Rules for Your Repository","text":"<p>This guide will walk you through the process of automatically generating custom cursor rules for your repository using AI. These steps are designed to be simple enough for anyone to follow.</p>"},{"location":"user-guide/ai-workflows/autogenerate_cursor_rules/#what-youll-need","title":"What You'll Need","text":"<ul> <li>Cursor AI editor</li> <li>A GitHub repository you want to create cursor rules for</li> <li>Access to the prompt_library and sequentialthinking MCP servers</li> </ul>"},{"location":"user-guide/ai-workflows/autogenerate_cursor_rules/#step-1-generate-a-repository-report","title":"Step 1: Generate a Repository Report","text":"<p>First, we need to analyze your repository to understand its structure and technologies.</p> <ol> <li>Open your repository in Cursor AI</li> <li>Ask Cursor to analyze your repository using the repo_analyzer cursor rule</li> </ol> <p>Example prompt: <pre><code>Can you analyze this repository and create a comprehensive report about its structure, technologies, and patterns? Please use the @repo_analyzer.mdc cursor rule to guide your analysis.\n</code></pre></p>"},{"location":"user-guide/ai-workflows/autogenerate_cursor_rules/#detailed-example-analyzing-a-zsh-dotfiles-repository","title":"Detailed Example: Analyzing a ZSH Dotfiles Repository","text":"<p>Note: The following zsh-dotfiles repository analysis is provided as a reference example only. You should adapt these approaches to your specific repository and its technologies. The specific files, directories, and technologies mentioned are unique to this example repository.</p> <p>Here's a real example of how to analyze a repository step by step:</p> <p>Initial request: <pre><code>Please analyze the `zsh-dotfiles` repository and generate a report named `zsh_dotfiles_report.md`, which will detail the technologies used in the repository.\n</code></pre></p> <p>Cursor will begin by examining the repository structure. You can help it by suggesting specific approaches:</p> <pre><code>Let's start by visualizing the directory structure using the `tree` command while excluding specific file types and directories.\n</code></pre> <p>As Cursor analyzes the repository, it will:</p> <ol> <li>Retrieve and analyze key files like:</li> <li><code>Makefile</code></li> <li><code>.pre-commit-config.yaml</code></li> <li><code>requirements-test.txt</code></li> <li><code>README.md</code></li> <li>Configuration files (<code>.zshrc</code>, <code>.chezmoi.yaml.tmpl</code>, etc.)</li> <li> <p>Test files (<code>test_dotfiles.py</code>, <code>conftest.py</code>)</p> </li> <li> <p>Examine specific configuration directories:</p> </li> <li><code>home/dot_sheldon</code> for plugin management</li> <li><code>home/shell/config.zsh</code> for ZSH settings</li> <li> <p><code>home/shell/customs/aliases.zsh</code> for custom functions</p> </li> <li> <p>Check installation scripts:</p> </li> <li><code>home/.chezmoiscripts/run_onchange_before_02-macos-install-sheldon.sh.tmpl</code></li> <li><code>home/.chezmoiscripts/run_onchange_before_01-ubuntu-install-packages.sh.tmpl</code></li> </ol> <p>The final report will include: - Overview of the repository - Repository structure - Core technologies used (Chezmoi, Sheldon, ASDF, etc.) - ZSH configuration details - Installation scripts - Custom aliases and functions - External dependencies - Configuration features - Cross-platform support - Security considerations</p> <ol> <li>Save this report to a file, for example: <code>zsh_dotfiles_report.md</code></li> </ol> <p>The report will look something like this: <pre><code># ZSH Dotfiles Repository Analysis\n\n## Overview\nThe [zsh-dotfiles](https://github.com/bossjones/zsh-dotfiles) repository is a comprehensive dotfiles management system created by Malcolm Jones (bossjones). It uses [chezmoi](https://www.chezmoi.io/) as the primary dotfile management tool to maintain consistent shell environments across different machines and operating systems.\n\n## Repository Structure\nThe repository follows a structured approach with the following key components:\n- **home/**: The main directory containing all dotfiles that will be managed by chezmoi\n  - **.chezmoiscripts/**: Contains installation and setup scripts that run during chezmoi apply\n  - **shell/**: Contains ZSH configuration files and custom scripts\n  - **dot_sheldon/**: Contains configuration for the Sheldon plugin manager\n  - **private_dot_bin/**: Contains executable scripts and utilities\n\n## Core Technologies\n[Detailed breakdown of technologies used]\n...\n</code></pre></p> <p>Important: Your repository analysis will differ based on your project's specific structure and technologies. Use the above example as a template for the type of information to gather, but customize your approach to your repository's unique characteristics.</p>"},{"location":"user-guide/ai-workflows/autogenerate_cursor_rules/#step-2-ensure-required-mcp-servers-are-configured","title":"Step 2: Ensure Required MCP Servers are Configured","text":"<p>Before proceeding, make sure both the prompt_library and sequentialthinking MCP servers are properly configured:</p> <ol> <li>Check your <code>.cursor/mcp.json</code> file to ensure both servers are enabled</li> <li>The configuration should look something like this:</li> </ol> <pre><code>{\n  \"mcpServers\": {\n    \"memory\": {\n      \"command\": \"env\",\n      \"args\": [\n        \"MEMORY_FILE_PATH=./ai_docs/memory.json\",\n        \"npx\",\n        \"-y\",\n        \"@modelcontextprotocol/server-memory\"\n      ]\n    },\n    \"prompt_library\": {\n      \"command\": \"uv\",\n      \"args\": [\n        \"run\",\n        \"--with\",\n        \"mcp[cli]\",\n        \"mcp\",\n        \"run\",\n        \"/Users/malcolm/dev/bossjones/codegen-lab/src/codegen_lab/prompt_library.py\"\n      ]\n    },\n    \"sequentialthinking\": {\n      \"command\": \"npx\",\n      \"args\": [\n        \"-y\",\n        \"@modelcontextprotocol/server-sequential-thinking\"\n      ]\n    }\n  }\n}\n</code></pre> <ol> <li>Make sure both servers are running (you may need to start them if they're not already running)</li> <li>The sequentialthinking server is particularly important for breaking down complex analysis tasks and generating high-quality cursor rules</li> </ol>"},{"location":"user-guide/ai-workflows/autogenerate_cursor_rules/#step-3-generate-custom-cursor-rules","title":"Step 3: Generate Custom Cursor Rules","text":"<p>Now we'll use the repository report to generate custom cursor rules:</p> <ol> <li>Open a new chat with Cursor AI</li> <li>Ask Cursor to recommend cursor rules based on your repository report</li> </ol> <p>Example prompt: <pre><code>Using the prompt_library and sequentialthinking mcp servers, help me recommend cursor rules for this project based on @your_repository_report.md\n</code></pre></p> <ol> <li>Cursor will analyze the report and suggest appropriate cursor rules for your repository</li> </ol> <p>The response will look something like this: <pre><code>Based on the analysis of your repository, I'll recommend several cursor rules that would be beneficial for this project:\n\n### 1. [Rule Name]\n[Rule content in markdown format]\n\n### 2. [Rule Name]\n[Rule content in markdown format]\n\n...\n</code></pre></p>"},{"location":"user-guide/ai-workflows/autogenerate_cursor_rules/#step-4-save-the-generated-cursor-rules","title":"Step 4: Save the Generated Cursor Rules","text":"<p>Now you need to save the generated rules:</p> <ol> <li> <p>Create a directory for your cursor rules if it doesn't exist:    <pre><code>mkdir -p .cursor/rules\n</code></pre></p> </li> <li> <p>Save each rule as a separate file in the <code>.cursor/rules</code> directory with a <code>.mdc</code> extension:</p> </li> <li><code>.cursor/rules/rule-name-1.mdc</code></li> <li><code>.cursor/rules/rule-name-2.mdc</code></li> <li> <p>etc.</p> </li> <li> <p>You can either:</p> </li> <li>Copy and paste each rule manually</li> <li>Ask Cursor to create these files for you with a prompt like:      <pre><code>Please save this cursor rule as .cursor/rules/rule-name.mdc\n</code></pre></li> </ol>"},{"location":"user-guide/ai-workflows/autogenerate_cursor_rules/#step-5-test-your-new-cursor-rules","title":"Step 5: Test Your New Cursor Rules","text":"<p>After saving your cursor rules:</p> <ol> <li>Restart Cursor or reload the window</li> <li>Open a file that should trigger one of your new rules</li> <li>Cursor should now provide suggestions based on your custom rules</li> </ol>"},{"location":"user-guide/ai-workflows/autogenerate_cursor_rules/#example-workflow-results","title":"Example Workflow Results","text":"<p>Here's what the entire process looks like in practice:</p> <p>Note: The following example is based on the zsh-dotfiles repository and is provided for reference only. Your specific questions and analysis should be tailored to your repository's technologies and structure.</p> <ol> <li> <p>Repository Analysis Request: <pre><code>Please analyze the `zsh-dotfiles` repository and generate a report named `zsh_dotfiles_report.md`, which will detail the technologies used in the repository.\n</code></pre></p> </li> <li> <p>Specific Analysis Questions: <pre><code>Let's check the ZSH configuration by examining the `home/shell/config.zsh` file to understand its settings and configurations.\n</code></pre></p> </li> </ol> <pre><code>Let's check the Sheldon configuration to understand the plugin management.\n</code></pre> <pre><code>Let's check the `home/dot_zshrc.tmpl` file to understand the ZSH configuration.\n</code></pre> <pre><code>Let's check the `home/shell/init.zsh` file to understand the initialization process.\n</code></pre> <pre><code>Let's check the `home/shell/customs/aliases.zsh` file to understand the custom aliases defined by the user.\n</code></pre> <pre><code>Let's check the `.chezmoi.yaml.tmpl` file to understand the chezmoi configuration.\n</code></pre> <pre><code>Let's check the `.chezmoiexternal.yaml` file to understand external dependencies related to the configuration.\n</code></pre> <pre><code>Let's check one of the installation scripts to understand how the dotfiles are set up, specifically looking at the file located at `home/.chezmoiscripts/run_onchange_before_02-macos-install-sheldon.sh.tmpl`.\n</code></pre> <ol> <li> <p>Generated Repository Report:    A detailed markdown file (<code>zsh_dotfiles_report.md</code>) describing the repository structure, technologies, and patterns.</p> </li> <li> <p>Cursor Rules Generation Request: <pre><code>Using the prompt_library and sequentialthinking mcp servers, help me recommend cursor rules for this project based on @zsh_dotfiles_report.md\n</code></pre></p> </li> <li> <p>Generated Cursor Rules: <pre><code># Chezmoi Template Best Practices\n\nGuidelines for working with Chezmoi templates in the zsh-dotfiles repository.\n\n&lt;rule&gt;\nname: chezmoi-templates\ndescription: Best practices for Chezmoi template files\nfilters:\n  # Match Chezmoi template files\n  - type: file_extension\n    pattern: \"\\\\.tmpl$\"\n  # Match Chezmoi configuration files\n  - type: file_path\n    pattern: \"\\\\.chezmoi.*\"\n\nactions:\n  - type: suggest\n    message: |\n      # Chezmoi Template Best Practices\n      ...\n</code></pre></p> </li> <li> <p>Saved Rules:    Multiple <code>.mdc</code> files in the <code>.cursor/rules</code> directory, each containing a custom rule tailored to your repository.</p> </li> </ol>"},{"location":"user-guide/ai-workflows/autogenerate_cursor_rules/#key-insights-from-repository-analysis","title":"Key Insights from Repository Analysis","text":"<p>When analyzing a repository for cursor rule generation, focus on:</p> <ol> <li>Configuration Patterns: Look for template files, configuration formats, and conditional logic</li> <li>Directory Structure: Understand how the repository organizes its files and components</li> <li>Technology Stack: Identify the main technologies, tools, and frameworks used</li> <li>Custom Scripts: Examine installation scripts, utility functions, and automation tools</li> <li>Cross-Platform Support: Note how the repository handles different operating systems</li> <li>Security Practices: Identify patterns for handling sensitive data</li> </ol> <p>For a dotfiles repository like the example above, pay special attention to: - Template systems (like Chezmoi's <code>.tmpl</code> files) - Plugin management (like Sheldon's configuration) - Shell customizations (aliases, functions, options) - Installation scripts for different platforms - External dependencies and their management</p> <p>Remember: The zsh-dotfiles example is just one type of repository. Your analysis should focus on the specific technologies and patterns in your own repository. For example, a React application would focus on component structure, state management, and routing, while a Python data science project would focus on data processing pipelines, model training, and visualization tools.</p>"},{"location":"user-guide/ai-workflows/autogenerate_cursor_rules/#benefits-of-custom-cursor-rules","title":"Benefits of Custom Cursor Rules","text":"<ul> <li>Consistency: Ensures all team members follow the same coding standards</li> <li>Efficiency: Provides contextual suggestions specific to your project</li> <li>Knowledge Sharing: Captures project-specific best practices</li> <li>Onboarding: Helps new team members understand project conventions</li> <li>Documentation: Serves as interactive documentation for project patterns</li> </ul>"},{"location":"user-guide/ai-workflows/autogenerate_cursor_rules/#advanced-tips","title":"Advanced Tips","text":"<ul> <li>Iterative Refinement: After generating initial rules, test them and refine based on usage</li> <li>Combine with Documentation: Link cursor rules to more detailed documentation</li> <li>Team Collaboration: Have team members contribute to rule development</li> <li>Version Control: Keep cursor rules in version control to track changes</li> <li>Regular Updates: Update rules as project patterns evolve</li> </ul> <p>By following this workflow, you can create custom cursor rules that are specifically tailored to your repository's unique structure and technologies.</p>"}]}
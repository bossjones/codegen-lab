---
description: Visualizes cursor rule relationships and activation patterns based on user queries
globs:
alwaysApply: false
---

# Cursor Rules Context Audit Agent

This agent specializes in analyzing and visualizing when and how Cursor Rules get automatically invoked, tracking the total context they add to LLM prompts, and identifying overlapping or redundant rules.

## Primary Purpose

- Execute the appropriate make task to audit cursor rules
- Analyze which rules are automatically triggered by different scenarios (file types, query content, directories)
- Calculate the approximate total context being added to LLM prompts
- Identify rules that should be converted to manual invocation or removed
- Generate a Mermaid diagram showing rule activation patterns
- Save the visualization and analysis to `debugging_rules_mermaid.md`

## When to Use

- When auditing your rule set to identify context bloat in LLM prompts
- When determining which rules are automatically triggered in different scenarios
- When deciding which rules should be converted to manual invocation (@rule-name)
- When identifying redundant or overlapping rules that could be consolidated
- When optimizing your rule set to reduce unnecessary context being sent to the LLM

## Core Process

1. Identify whether to use staging or production environment based on context
2. Execute one of these commands:
   ```bash
   make audit-cursor-rules-stage-desc  # for staging environment
   ```
   or
   ```bash
   make audit-cursor-rules-prod-desc  # for production environment
   ```
3. Analyze the command output to determine:
   - Which rules get automatically triggered based on:
     - File types (through glob patterns)
     - Directory location
     - Query content
   - The approximate token count each rule adds to LLM context
   - Rules with overlapping triggers or redundant functionality
   - Which rules should be manually invoked vs. automatically triggered
4. Create a Mermaid diagram that shows these activation patterns
5. Estimate total context bloat for different query scenarios
6. Recommend rules to convert to manual invocation or remove
7. Save the analysis to `debugging_rules_mermaid.md`

## Implementation Steps

1. Execute the appropriate make command for the environment
2. Parse the output to identify all available rules
3. Analyze which rules would activate based on the user query
   - Check glob patterns against any file mentioned in the query
   - Include Always rules
   - Include relevant Auto Select and Auto Select+desc rules
   - Consider Agent Selected rules that may be relevant
4. Generate a Mermaid diagram showing the relationships
5. Write the diagram to `debugging_rules_mermaid.md`

## Mermaid Diagram Structure

The Mermaid diagram should:

1. Start with the specific user query or file type node
2. Show rule activation triggers and conditions
3. Group rules by their types (Always, Agent Selected, Auto Select, etc.)
4. Include estimated token count for each rule's context contribution
5. Highlight overlapping rule coverage and redundancies
6. Indicate total context bloat for the given scenario
7. Use consistent color coding for rule types:
   - Always rules: magenta (#f0f)
   - Agent Selected rules: cyan (#0dd)
   - Auto Select rules: green (#0d0)
   - Auto Select+desc rules: blue (#00f)
   - Manual rules: yellow (#ff0)
8. Use different border styles to indicate recommended actions:
   - Dashed border: Consider converting to manual invocation
   - Dotted border: Consider removing or consolidating
   - Bold border: Keep as automatic trigger
9. Include a comprehensive legend section that explains rule types and their attributes

## Important Notes

- DO NOT use scripts/generate_rule_mermaid.py
- Generate all diagrams directly through LLM analysis of the make command output
- Always save the output to `debugging_rules_mermaid.md`
- Include the specific query or file type in the diagram and analysis
- Show which rules would automatically activate in that scenario
- Estimate token count for each rule and total context bloat
- Provide specific recommendations for:
  - Rules to convert to manual invocation (via @rule-name)
  - Rules to consolidate or remove due to overlap
  - Optimal rule organization to minimize context bloat
- Always include a comprehensive LEGEND section in debugging_rules_mermaid.md with the following rule type details:

```
## Rule Types

| Rule Type        | Usage                                            | description Field | globs Field           | alwaysApply field |
| ---------------- | ------------------------------------------------ | ----------------- | --------------------- | ----------------- |
| Agent Selected   | Agent sees description and chooses when to apply | critical          | blank                 | false             |
| Always           | Applied to every chat and cmd-k request          | blank             | blank                 | true              |
| Auto Select      | Applied to matching existing files               | blank             | critical glob pattern | false             |
| Auto Select+desc | Better for new files                             | included          | critical glob pattern | false             |
| Manual           | User must reference in chat                      | blank             | blank                 | false             |
```

## Example Implementation

For a query like "Update my changelog.md":

1. Execute:
   ```bash
   make audit-cursor-rules-prod-desc
   ```
2. Analyze the output to determine which rules apply:
   - Always rules always apply
   - Rules with glob patterns matching *.md would apply
   - Other relevant rules based on context

3. Generate a Mermaid diagram and save it to debugging_rules_mermaid.md:

```mermaid
flowchart TD
    Query["User Query: Update my changelog.md"] --> Analysis["Rule Analysis"]

    Analysis --> RuleTypes["Rule Type Categorization"]

    RuleTypes --> Always["Always Rules"]
    RuleTypes --> AutoSelect["Auto Select Rules"]
    RuleTypes --> AutoSelectDesc["Auto Select+desc Rules"]
    RuleTypes --> AgentSelected["Agent Selected Rules"]
    RuleTypes --> Manual["Manual Rules"]

    Always --> AlwaysRules["emoji-communication-always.mdc"]

    AutoSelectDesc --> MarkdownRules["documentation/markdown-auto.mdc"]
    AutoSelectDesc --> GeneralRules["repomix.mdc
    repo_analyzer.mdc
    notify.mdc
    tree.mdc"]

    style Query fill:#f9f,stroke:#333,stroke-width:2px
    style Always fill:#f0f,stroke:#333,stroke-width:1px
    style AutoSelect fill:#0d0,stroke:#333,stroke-width:1px
    style AutoSelectDesc fill:#00f,stroke:#333,stroke-width:1px
    style AgentSelected fill:#0dd,stroke:#333,stroke-width:1px
    style Manual fill:#ff0,stroke:#333,stroke-width:1px

    classDef activated fill:#afa,stroke:#333,stroke-width:2px
    class AlwaysRules,MarkdownRules,GeneralRules activated
```
